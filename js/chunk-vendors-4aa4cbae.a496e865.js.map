{"version":3,"file":"js/chunk-vendors-4aa4cbae.a496e865.js","mappings":"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","sources":["webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/errors.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/executor_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/backend/state.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/keras_format/common.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/common.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/keras_format/initializer_config.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/initializers.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/variables.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/flags_layers.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/constraints.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/logs.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/losses.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/metrics.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/user_defined_metadata.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/layer_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/version.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/models.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/activations.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_recurrent.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js","webpack://student1/./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js","webpack://student1/./node_modules/@tensorflow/tfjs/dist/version.js","webpack://student1/./node_modules/@tensorflow/tfjs/dist/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AttributeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, RuntimeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, ValueError.prototype);\n    }\n}\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, NotImplementedError.prototype);\n    }\n}\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AssertionError.prototype);\n    }\n}\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, IndexError.prototype);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVIOzs7Ozs7O0dBT0c7QUFDSCxnQkFBZ0I7QUFFaEI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBZSxTQUFRLEtBQUs7SUFDdkMsWUFBWSxPQUFnQjtRQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixnQ0FBZ0M7UUFDaEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQWEsU0FBUSxLQUFLO0lBQ3JDLFlBQVksT0FBZ0I7UUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsZ0NBQWdDO1FBQ2hDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxVQUFXLFNBQVEsS0FBSztJQUNuQyxZQUFZLE9BQWdCO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLGdDQUFnQztRQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsS0FBSztJQUM1QyxZQUFZLE9BQWdCO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLGdDQUFnQztRQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxjQUFlLFNBQVEsS0FBSztJQUN2QyxZQUFZLE9BQWdCO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLGdDQUFnQztRQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sVUFBVyxTQUFRLEtBQUs7SUFDbkMsWUFBWSxPQUFnQjtRQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixnQ0FBZ0M7UUFDaEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogRXhwbGljaXQgZXJyb3IgdHlwZXMuXG4gKlxuICogU2VlIHRoZSBmb2xsb3dpbmcgbGluayBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB3aHkgdGhlIGNvZGUgaW5jbHVkZXNcbiAqIGNhbGxzIHRvIHNldFByb3RvdHlwZU9mOlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXG4gKi9cbi8vIHRzbGludDplbmFibGVcblxuLyoqXG4gKiBFcXVpdmFsZW50IG9mIFB5dGhvbidzIEF0dHJpYnV0ZUVycm9yLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBdHRyaWJ1dGVFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCBvZiBQeXRob24ncyBSdW50aW1lRXJyb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW50aW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSdW50aW1lRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgb2YgUHl0aG9uJ3MgVmFsdWVFcnJvci5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbHVlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBWYWx1ZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IG9mIFB5dGhvbidzIE5vdEltcGxlbWVudGVkRXJyb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RJbXBsZW1lbnRlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgZXhwbGljaXRseS5cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm90SW1wbGVtZW50ZWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCBvZiBQeXRob24ncyBBc3NlcnRpb25FcnJvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2VydGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgZXhwbGljaXRseS5cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgb2YgUHl0aG9uJ3MgSW5kZXhFcnJvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEluZGV4RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbmRleEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport class LruCache {\n    constructor(maxEntries) {\n        this.maxEntries = maxEntries || 100;\n        this.cache = new Map();\n    }\n    /**\n     * Get the entry for the key and mark it as used recently.\n     */\n    get(key) {\n        let entry;\n        if (this.cache.has(key)) {\n            entry = this.cache.get(key);\n            this.cache.delete(key);\n            this.cache.set(key, entry);\n        }\n        return entry;\n    }\n    /**\n     * Put the entry into the cache. If the key already existed, mark the key as\n     * used recently.\n     */\n    put(key, value) {\n        if (this.cache.has(key)) {\n            this.cache.delete(key);\n        }\n        else if (this.cache.size >= this.maxEntries) {\n            const keyToDelete = this.cache.keys().next().value;\n            this.cache.delete(keyToDelete);\n        }\n        this.cache.set(key, value);\n    }\n    /**\n     * Get the MaxEntries of the cache.\n     */\n    getMaxEntries() {\n        return this.maxEntries;\n    }\n    /**\n     * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n     * entries in the cache.\n     */\n    setMaxEntries(maxEntries) {\n        if (maxEntries < 0) {\n            throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${maxEntries}.`);\n        }\n        if (this.maxEntries > maxEntries) {\n            for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n                const keyToDelete = this.cache.keys().next().value;\n                this.cache.delete(keyToDelete);\n            }\n        }\n        this.maxEntries = maxEntries;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0b3JfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvdXRpbHMvZXhlY3V0b3JfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFDSDs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLFFBQVE7SUFJbkIsWUFBWSxVQUFtQjtRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxHQUFHLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBYSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNJLEdBQUcsQ0FBQyxHQUFXO1FBQ3BCLElBQUksS0FBUSxDQUFDO1FBQ2IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFRO1FBQzlCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDN0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksYUFBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGFBQWEsQ0FBQyxVQUFrQjtRQUNyQyxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FDWCw0REFDSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsRUFBRTtZQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3JELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUNuRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNoQztTQUNGO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8qKlxuICogTHJ1Q2FjaGU6IEEgbWFwcGluZyBmcm9tIHRoZSBTdHJpbmcgdG8gVC4gSWYgdGhlIG51bWJlciBvZiB0aGUgZW50cmllcyBpc1xuICogZXhjZWVkaW5nIHRoZSBgbWF4RW50cmllc2AsIHRoZSBMcnVDYWNoZSB3aWxsIGRlbGV0ZSB0aGUgbGVhc3QgcmVjZW50bHlcbiAqIHVzZWQgZW50cnkuXG4gKi9cblxuZXhwb3J0IGNsYXNzIExydUNhY2hlPFQ+IHtcbiAgcHJpdmF0ZSBjYWNoZTogTWFwPHN0cmluZywgVD47XG4gIHByaXZhdGUgbWF4RW50cmllczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG1heEVudHJpZXM/OiBudW1iZXIpIHtcbiAgICB0aGlzLm1heEVudHJpZXMgPSBtYXhFbnRyaWVzIHx8IDEwMDtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFQ+KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBlbnRyeSBmb3IgdGhlIGtleSBhbmQgbWFyayBpdCBhcyB1c2VkIHJlY2VudGx5LlxuICAgKi9cbiAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IFQge1xuICAgIGxldCBlbnRyeTogVDtcbiAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgZW50cnkgPSB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgZW50cnkpO1xuICAgIH1cbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICAvKipcbiAgICogUHV0IHRoZSBlbnRyeSBpbnRvIHRoZSBjYWNoZS4gSWYgdGhlIGtleSBhbHJlYWR5IGV4aXN0ZWQsIG1hcmsgdGhlIGtleSBhc1xuICAgKiB1c2VkIHJlY2VudGx5LlxuICAgKi9cbiAgcHVibGljIHB1dChrZXk6IHN0cmluZywgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY2FjaGUuc2l6ZSA+PSB0aGlzLm1heEVudHJpZXMpIHtcbiAgICAgIGNvbnN0IGtleVRvRGVsZXRlID0gdGhpcy5jYWNoZS5rZXlzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5VG9EZWxldGUpO1xuICAgIH1cbiAgICB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIE1heEVudHJpZXMgb2YgdGhlIGNhY2hlLlxuICAgKi9cbiAgcHVibGljIGdldE1heEVudHJpZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5tYXhFbnRyaWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgTWF4RW50cmllcyBvZiB0aGUgY2FjaGUuIElmIHRoZSBtYXhFbnRyaWVzIGlzIGRlY3JlYXNlZCwgcmVkdWNlXG4gICAqIGVudHJpZXMgaW4gdGhlIGNhY2hlLlxuICAgKi9cbiAgcHVibGljIHNldE1heEVudHJpZXMobWF4RW50cmllczogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKG1heEVudHJpZXMgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZSBtYXhFbnRyaWVzIG9mIExSVSBjYWNoZXMgbXVzdCBiZSBhdCBsZWFzdCAwLCBidXQgZ290ICR7XG4gICAgICAgICAgICAgIG1heEVudHJpZXN9LmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1heEVudHJpZXMgPiBtYXhFbnRyaWVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWF4RW50cmllcyAtIG1heEVudHJpZXM7IGkrKykge1xuICAgICAgICBjb25zdCBrZXlUb0RlbGV0ZSA9IHRoaXMuY2FjaGUua2V5cygpLm5leHQoKS52YWx1ZTtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5VG9EZWxldGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWF4RW50cmllcyA9IG1heEVudHJpZXM7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        // tslint:disable-next-line:no-any\n        let newArray = [];\n        for (let i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    }\n    else {\n        const newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nexport function assert(val, message) {\n    if (!val) {\n        throw new AssertionError(message);\n    }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n    let counter = 0;\n    for (const item of array) {\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n    const objectList = toList(objs);\n    let retVal = '';\n    for (const obj of objectList) {\n        if (obj.id == null) {\n            throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = `${retVal}${Math.abs(obj.id)}`;\n    }\n    return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n    const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    /*\n     If the class is private the name starts with \"_\" which is not secure\n     for creating scopes. We prefix the name with \"private\" in this case.\n     */\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n    // quick return for empty string or single character strings\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    // Check for the underscore indicating snake_case\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    const dict = {};\n    dict['className'] = instance.getClassName();\n    dict['config'] = instance.getConfig();\n    return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n    if (config == null || typeof config !== 'object') {\n        return;\n    }\n    else if (Array.isArray(config)) {\n        config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n    }\n    else {\n        const fields = Object.keys(config);\n        for (const field of fields) {\n            const value = config[field];\n            if (value != null && typeof value === 'object') {\n                if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n                    typeof value['value'] === 'number') {\n                    config[field] = value['value'];\n                }\n                else {\n                    convertNDArrayScalarsInConfig(value);\n                }\n            }\n        }\n    }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n    // tslint:enable\n    if (typeof identifier === 'string') {\n        const functionName = identifier;\n        let fn;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        }\n        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        }\n        else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` +\n                    `This may be due to one of the following reasons:\\n` +\n                    `1. The ${printableModuleName} is defined in Python, in which ` +\n                    `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                    `code.\\n` +\n                    `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                    `but is not registered properly with ` +\n                    `tf.serialization.registerClass().`);\n                // TODO(cais): Add link to tutorial page on custom layers.\n            }\n        }\n        return fn;\n    }\n    else {\n        // In this case we are dealing with a Keras config dictionary.\n        const config = identifier;\n        if (config['className'] == null || config['config'] == null) {\n            throw new ValueError(`${printableModuleName}: Improper config format: ` +\n                `${JSON.stringify(config)}.\\n` +\n                `'className' and 'config' must set.`);\n        }\n        const className = config['className'];\n        let cls, fromConfig;\n        if (className in customObjects) {\n            [cls, fromConfig] = customObjects[className];\n        }\n        else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n            [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n        }\n        else if (className in moduleObjects) {\n            [cls, fromConfig] = moduleObjects[className];\n        }\n        if (cls == null) {\n            throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` +\n                `This may be due to one of the following reasons:\\n` +\n                `1. The ${printableModuleName} is defined in Python, in which ` +\n                `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                `code.\\n` +\n                `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                `but is not registered properly with ` +\n                `tf.serialization.registerClass().`);\n            // TODO(cais): Add link to tutorial page on custom layers.\n        }\n        if (fromConfig != null) {\n            // Porting notes: Instead of checking to see whether fromConfig accepts\n            // customObjects, we create a customObjects dictionary and tack it on to\n            // config['config'] as config['config'].customObjects. Objects can use it,\n            // if they want.\n            // tslint:disable-next-line:no-any\n            const customObjectsCombined = {};\n            for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (const key of Object.keys(customObjects)) {\n                customObjectsCombined[key] = customObjects[key];\n            }\n            // Add the customObjects to config\n            const nestedConfig = config['config'];\n            nestedConfig['customObjects'] = customObjectsCombined;\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            convertNDArrayScalarsInConfig(config['config']);\n            const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n        else {\n            // Then `cls` may be a function returning a class.\n            // In this case by convention `config` holds\n            // the kwargs of the function.\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            // In python this is **config['config'], for tfjs-layers we require\n            // classes that use this fall-through construction method to take\n            // a config interface that mimics the expansion of named parameters.\n            const returnObj = new cls(config['config']);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n    return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return 'float32';\n        default:\n            throw new ValueError(`Invalid dtype: ${dtype}`);\n    }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n    if (xs == null || ys == null) {\n        return xs === ys;\n    }\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for (let i = 0; i < xs.length; ++i) {\n        if (xs[i] !== ys[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n    if (xs == null) {\n        return xs;\n    }\n    const out = [];\n    // TODO(cais): Maybe improve performance by sorting.\n    for (const x of xs) {\n        if (out.indexOf(x) === -1) {\n            out.push(x);\n        }\n    }\n    return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n    if (obj == null) {\n        throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n    }\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n    if (value == null) {\n        return;\n    }\n    if (values.indexOf(value) < 0) {\n        throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n    }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n    assert(minLength >= 0);\n    assert(maxLength >= minLength);\n    return (Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n        x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n    if (Array.isArray(value)) {\n        util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n        value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n    }\n    else {\n        util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n    }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (Array.isArray(value)) {\n        return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n    }\n    else if (typeof value === 'string') {\n        return `\"${value}\"`;\n    }\n    else {\n        return `${value}`;\n    }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs, nowFunc) {\n    let lastTime = nowFunc != null ? nowFunc() : util.now();\n    let lastResult;\n    const f2 = (...args) => {\n        const now = nowFunc != null ? nowFunc() : util.now();\n        if (now - lastTime < waitMs) {\n            return lastResult;\n        }\n        lastTime = now;\n        lastResult = f(...args);\n        return lastResult;\n    };\n    return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n    if (activationName === 'relu') {\n        return 'relu';\n    }\n    if (activationName === 'linear') {\n        return 'linear';\n    }\n    if (activationName === 'elu') {\n        return 'elu';\n    }\n    return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues) {\n    assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n    for (const values of arrayOfValues) {\n        assert(Array.isArray(values), 'one of the values is not an array');\n        assert(values.length > 0, 'one of the values is empty');\n    }\n    return arrayOfValues.reduce((products, values) => {\n        if (products.length === 0) {\n            return values.map(value => [value]);\n        }\n        return values\n            .map(value => {\n            return products.map((prevValue) => [...prevValue, value]);\n        })\n            .reduce((flattenedProduct, unflattenedProduct) => {\n            return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n    }, []);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Utilities related to persistent state in the backend.\n */\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n    return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = '') {\n    if (!(prefix in _uidPrefixes)) {\n        _uidPrefixes[prefix] = 0;\n    }\n    _uidPrefixes[prefix] += 1;\n    return prefix + _uidPrefixes[prefix].toString();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvYmFja2VuZC9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVIOztHQUVHO0FBRUg7Ozs7R0FJRztBQUNILElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sVUFBVSxxQkFBcUI7SUFDbkMsT0FBTyxtQkFBbUIsRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFNLFlBQVksR0FBK0IsRUFBRSxDQUFDO0FBRXBEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFO0lBQ2hDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsRUFBRTtRQUM3QixZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixPQUFPLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogVXRpbGl0aWVzIHJlbGF0ZWQgdG8gcGVyc2lzdGVudCBzdGF0ZSBpbiB0aGUgYmFja2VuZC5cbiAqL1xuXG4vKipcbiAqIEFuIElEIHRvIHRyYWNrIGB0Zi5TeW1ib2xpY1RlbnNvcmBzIGFuZCBkZXJpdmVkIGNsYXNzZXMuXG4gKiBSZXF1aXJlZCBpbiBkaWZmZXJlbnQgcGxhY2VzIGluIGVuZ2luZS90b3BvbG9neS50cyB0byBpZGVudGlmeSB1bmlxdWVcbiAqIHRlbnNvcnMuXG4gKi9cbmxldCBfbmV4dFVuaXF1ZVRlbnNvcklkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRVbmlxdWVUZW5zb3JJZCgpOiBudW1iZXIge1xuICByZXR1cm4gX25leHRVbmlxdWVUZW5zb3JJZCsrO1xufVxuXG5jb25zdCBfdWlkUHJlZml4ZXM6IHtbcHJlZml4OiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG5cbi8qKlxuICogUHJvdmlkZXMgYSB1bmlxdWUgVUlEIGdpdmVuIGEgc3RyaW5nIHByZWZpeC5cbiAqXG4gKiBAcGFyYW0gcHJlZml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVaWQocHJlZml4ID0gJycpOiBzdHJpbmcge1xuICBpZiAoIShwcmVmaXggaW4gX3VpZFByZWZpeGVzKSkge1xuICAgIF91aWRQcmVmaXhlc1twcmVmaXhdID0gMDtcbiAgfVxuICBfdWlkUHJlZml4ZXNbcHJlZml4XSArPSAxO1xuICByZXR1cm4gcHJlZml4ICsgX3VpZFByZWZpeGVzW3ByZWZpeF0udG9TdHJpbmcoKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\nexport const VALID_INTERPOLATION_FORMAT_VALUES = ['nearest', 'bilinear'];\nexport const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\nexport const VALID_POOL_MODE_VALUES = ['max', 'avg'];\nexport const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];\nexport const VALID_SAMPLE_WEIGHT_MODES = ['temporal'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2tlcmFzX2Zvcm1hdC9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFhSCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUcxRSxNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQU16RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFJckUsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFJckQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUkvRSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLy8gVE9ETyhodWFuKTogYWRkIGxheWVyLXNwZWNpZmljIGlucHV0IHNoYXBlIHR5cGVzIChzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMtbGF5ZXJzL3B1bGwvNDkyKVxuLyoqIEBkb2NhbGlhcyAobnVsbCB8IG51bWJlcilbXSAqL1xuZXhwb3J0IHR5cGUgU2hhcGUgPSBBcnJheTxudWxsIHwgbnVtYmVyPjtcblxuLy8gVGhlIHRmanMtY29yZSB2ZXJzaW9uIG9mIERhdGFUeXBlIG11c3Qgc3RheSBzeW5jZWQgd2l0aCB0aGlzLlxuZXhwb3J0IHR5cGUgRGF0YVR5cGUgPSAnZmxvYXQzMid8J2ludDMyJ3wnYm9vbCd8J2NvbXBsZXg2NCd8J3N0cmluZyc7XG5cbi8vIFRPRE8oc29lcmdlbCk6IE1vdmUgdGhlIENhbWVsQ2FzZSB2ZXJzaW9ucyBiYWNrIG91dCBvZiBrZXJhc19mb3JtYXRcbi8vIGUuZy4gdG8gc3JjL2NvbW1vbi50cy4gIE1heWJlIGV2ZW4gZHVwbGljYXRlICphbGwqIG9mIHRoZXNlIHRvIGJlIHBlZGFudGljP1xuLyoqIEBkb2NpbmxpbmUgKi9cbmV4cG9ydCB0eXBlIERhdGFGb3JtYXQgPSAnY2hhbm5lbHNGaXJzdCd8J2NoYW5uZWxzTGFzdCc7XG5leHBvcnQgY29uc3QgVkFMSURfREFUQV9GT1JNQVRfVkFMVUVTID0gWydjaGFubmVsc0ZpcnN0JywgJ2NoYW5uZWxzTGFzdCddO1xuXG5leHBvcnQgdHlwZSBJbnRlcnBvbGF0aW9uRm9ybWF0ID0gJ25lYXJlc3QnfCdiaWxpbmVhcic7XG5leHBvcnQgY29uc3QgVkFMSURfSU5URVJQT0xBVElPTl9GT1JNQVRfVkFMVUVTID0gWyduZWFyZXN0JywgJ2JpbGluZWFyJ107XG4vLyBUaGVzZSBjb25zdGFudHMgaGF2ZSBhIHNuYWtlIHZzLiBjYW1lbCBkaXN0aW5jdGlvbi5cbmV4cG9ydCB0eXBlIERhdGFGb3JtYXRTZXJpYWxpemF0aW9uID0gJ2NoYW5uZWxzX2ZpcnN0J3wnY2hhbm5lbHNfbGFzdCc7XG5cbi8qKiBAZG9jaW5saW5lICovXG5leHBvcnQgdHlwZSBQYWRkaW5nTW9kZSA9ICd2YWxpZCd8J3NhbWUnfCdjYXVzYWwnO1xuZXhwb3J0IGNvbnN0IFZBTElEX1BBRERJTkdfTU9ERV9WQUxVRVMgPSBbJ3ZhbGlkJywgJ3NhbWUnLCAnY2F1c2FsJ107XG5cbi8qKiBAZG9jaW5saW5lICovXG5leHBvcnQgdHlwZSBQb29sTW9kZSA9ICdtYXgnfCdhdmcnO1xuZXhwb3J0IGNvbnN0IFZBTElEX1BPT0xfTU9ERV9WQUxVRVMgPSBbJ21heCcsICdhdmcnXTtcblxuLyoqIEBkb2NpbmxpbmUgKi9cbmV4cG9ydCB0eXBlIEJpZGlyZWN0aW9uYWxNZXJnZU1vZGUgPSAnc3VtJ3wnbXVsJ3wnY29uY2F0J3wnYXZlJztcbmV4cG9ydCBjb25zdCBWQUxJRF9CSURJUkVDVElPTkFMX01FUkdFX01PREVTID0gWydzdW0nLCAnbXVsJywgJ2NvbmNhdCcsICdhdmUnXTtcblxuLyoqIEBkb2NpbmxpbmUgKi9cbmV4cG9ydCB0eXBlIFNhbXBsZVdlaWdodE1vZGUgPSAndGVtcG9yYWwnO1xuZXhwb3J0IGNvbnN0IFZBTElEX1NBTVBMRV9XRUlHSFRfTU9ERVMgPSBbJ3RlbXBvcmFsJ107XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport { VALID_DATA_FORMAT_VALUES, VALID_INTERPOLATION_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES } from './keras_format/common';\nimport { checkStringTypeUnionValue } from './utils/generic_utils';\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap = new Map();\nexport function checkDataFormat(value) {\n    checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\nexport function checkInterpolationFormat(value) {\n    checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES, 'InterpolationFormat', value);\n}\nexport function checkPaddingMode(value) {\n    checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\nexport function checkPoolMode(value) {\n    checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\nconst _nameScopeStack = [];\nconst _nameScopeDivider = '/';\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope(name, fn) {\n    _nameScopeStack.push(name);\n    try {\n        const val = fn();\n        _nameScopeStack.pop();\n        return val;\n    }\n    catch (e) {\n        _nameScopeStack.pop();\n        throw e;\n    }\n}\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix() {\n    if (_nameScopeStack.length === 0) {\n        return '';\n    }\n    else {\n        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n    }\n}\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName) {\n    if (!isValidTensorName(tensorName)) {\n        throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n    }\n    return currentNameScopePrefix() + tensorName;\n}\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName) {\n    if (!isValidTensorName(scopedName)) {\n        throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n    }\n    if (!nameMap.has(scopedName)) {\n        nameMap.set(scopedName, 0);\n    }\n    const index = nameMap.get(scopedName);\n    nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n    if (index > 0) {\n        const result = `${scopedName}_${index}`;\n        // Mark the composed name as used in case someone wants\n        // to call getUniqueTensorName(\"name_1\").\n        nameMap.set(result, 1);\n        return result;\n    }\n    else {\n        return scopedName;\n    }\n}\nconst tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name) {\n    return !!name.match(tensorNameRegex);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    let prod = 1;\n    for (let i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n    // same behavior as tf.min()\n    if (array.length === 0) {\n        return Number.NaN;\n    }\n    let min = Number.POSITIVE_INFINITY;\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        if (value < min) {\n            min = value;\n        }\n    }\n    return min;\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n    // same behavior as tf.max()\n    if (array.length === 0) {\n        return Number.NaN;\n    }\n    let max = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        if (value > max) {\n            max = value;\n        }\n    }\n    return max;\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        sum += value;\n    }\n    return sum;\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n    return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n    const meanValue = mean(array);\n    const demeaned = array.map((value) => value - meanValue);\n    let sumSquare = 0;\n    for (let i = 0; i < demeaned.length; i++) {\n        const value = demeaned[i];\n        sumSquare += value * value;\n    }\n    return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n    const arraySorted = array.slice().sort((a, b) => a - b);\n    const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n    const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n    if (lowIdx === highIdx) {\n        return arraySorted[lowIdx];\n    }\n    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n    if (end < begin) {\n        throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n    }\n    const out = [];\n    for (let i = begin; i < end; ++i) {\n        out.push(i);\n    }\n    return out;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { backend } from '@tensorflow/tfjs-core';\nlet _epsilon;\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n    if (_epsilon == null) {\n        _epsilon = backend().epsilon();\n    }\n    return _epsilon;\n}\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e) {\n    _epsilon = e;\n}\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat() {\n    return 'channelsLast';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2JhY2tlbmQvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRzlDLElBQUksUUFBZ0IsQ0FBQztBQUVyQjs7R0FFRztBQUNILE1BQU0sVUFBVSxPQUFPO0lBQ3JCLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtRQUNwQixRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDaEM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFTO0lBQ2xDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZUFBZTtJQUM3QixPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtiYWNrZW5kfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuaW1wb3J0IHtEYXRhRm9ybWF0fSBmcm9tICcuLi9rZXJhc19mb3JtYXQvY29tbW9uJztcblxubGV0IF9lcHNpbG9uOiBudW1iZXI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZ1enogZmFjdG9yIHVzZWQgaW4gbnVtZXJpYyBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVwc2lsb24oKSB7XG4gIGlmIChfZXBzaWxvbiA9PSBudWxsKSB7XG4gICAgX2Vwc2lsb24gPSBiYWNrZW5kKCkuZXBzaWxvbigpO1xuICB9XG4gIHJldHVybiBfZXBzaWxvbjtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZnV6eiBmYWN0b3IgdXNlZCBpbiBudW1lcmljIGV4cHJlc3Npb25zLlxuICogQHBhcmFtIGUgTmV3IHZhbHVlIG9mIGVwc2lsb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFcHNpbG9uKGU6IG51bWJlcikge1xuICBfZXBzaWxvbiA9IGU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGVmYXVsdCBpbWFnZSBkYXRhIGZvcm1hdCBjb252ZW50aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2VEYXRhRm9ybWF0KCk6IERhdGFGb3JtYXQge1xuICByZXR1cm4gJ2NoYW5uZWxzTGFzdCc7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common';\n// tslint:enable\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n    tfc.setBackend(requestedBackend);\n    backend = requestedBackend;\n}\nexport function getBackend() {\n    return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic() {\n    return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x) {\n    const shape = x.shape;\n    if (shape.length > 0) {\n        return shape.reduce((a, b) => a * b);\n    }\n    else {\n        // Scalar.\n        return 1;\n    }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x, dtype) {\n    return tfc.cast(x, dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x, axis = -1) {\n    const outShape = x.shape.slice();\n    if (axis < 0) {\n        axis = outShape.length + axis + 1;\n    }\n    outShape.splice(axis, 0, 1);\n    return tfc.reshape(x, outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x, n) {\n    return tidy(() => {\n        if (x.shape.length !== 2) {\n            throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` +\n                `rank-${x.shape.length} tensor.`);\n        }\n        const y = expandDims(x, 1);\n        return tile(y, [1, n, 1]);\n    });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x) {\n    const newShape = [math_utils.arrayProd(x.shape)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x) {\n    if (x.rank <= 1) {\n        throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n    }\n    const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n            case 3:\n                return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n            case 4:\n                return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n            case 5:\n                return tfc.slice(array, [start, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n                ]);\n            case 6:\n                return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n                    array.shape[5]\n                ]);\n            default:\n                throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n            case 3:\n                return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n            case 4:\n                return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(array, start, size, axis) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 3:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n                    case 3:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 4:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n                    case 3:\n                        return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n                    case 4:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors, axis = -1) {\n    let rank;\n    if (axis < 0) {\n        rank = tensors[0].rank;\n        if (rank !== 0) {\n            axis = rank;\n        }\n        else {\n            axis = 0;\n        }\n    }\n    if (axis === tensors[0].rank) {\n        // Porting Note: This is necessary because tfc.concat() requires axis to be\n        //   in the interval [-rank, rank).\n        axis = -1;\n    }\n    // Porting Note: Sparse concat is not supported yet.\n    return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a, b) {\n    switch (a.rank) {\n        case 1:\n            return tfc.concat1d([a, b]);\n        case 2:\n            return tfc.concat2d([a, b], 0);\n        case 3:\n            return tfc.concat3d([a, b], 0);\n        case 4:\n            return tfc.concat4d([a, b], 0);\n        default:\n            throw new ValueError(`concatAlongFirstAxis() received an unsupported ` +\n                `tensor rank: ${a.rank}`);\n    }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x, n) {\n    if (!Array.isArray(n)) {\n        n = [n];\n    }\n    if (x.rank !== n.length) {\n        throw new ValueError(`The length of input n (${n.length}) does not match ` +\n            `the number of dimensions in input x (${x.rank})`);\n    }\n    return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n    return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(a, b, activation, bias) {\n    if ((a.rank < 2) || (b.rank < 2)) {\n        throw new NotImplementedError(`dot requires both inputs to be rank >= 2` +\n            ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n    }\n    if (b.rank >= 3) {\n        const xLastDim = a.shape.slice(-1)[0];\n        const ySecondLastDim = b.shape.slice(-2)[0];\n        if (xLastDim !== ySecondLastDim) {\n            throw new NotImplementedError(`If rank y >= 3, then the second last dim` +\n                ` of y must equal the last dim of x but got x shape = ${a.shape} and ` +\n                ` y shape = ${b.shape}`);\n        }\n    }\n    // Handle basic 2D x 2D case.\n    if ((a.rank === 2) && (b.rank === 2)) {\n        const transposeA = false;\n        const transposeB = false;\n        // tfc.fused.matMul only fuses certain activation functions. Unsupported\n        // activation functions are treated as 'linear' activations, which is\n        // equivalent to a no-op.\n        return tfc.fused.matMul({\n            a,\n            b: b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        });\n    }\n    else {\n        // Reshape x into the analogous 2D Tensor.\n        const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n        const aLastDim = aFirstDims.pop();\n        a = tfc.reshape(a, [-1, aLastDim]);\n        // Reshape y into the analogous 2D Tensor, and keep track of the\n        // required dimensions to reproduce the output shape.\n        const bShape = b.shape.slice();\n        const bLastDim = bShape.pop();\n        const ySecondLastDim = bShape.pop();\n        const yOtherDims = [...bShape, bLastDim];\n        // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n        // where r is the rank of y.\n        const perm = Array.from({ length: b.rank }, (_, i) => {\n            if (i === 0) {\n                return b.rank - 2;\n            }\n            else if (i <= b.rank - 2) {\n                return i - 1;\n            }\n            return i;\n        });\n        b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n        // Multiply x and y as 2D Tensors, and then reshape back to original.\n        const outputShape = [...aFirstDims, ...yOtherDims];\n        const transposeA = false;\n        const transposeB = false;\n        return tfc.reshape(tfc.fused.matMul({\n            a,\n            b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        }), outputShape);\n    }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x) {\n    // TODO(cais): Move to the core.\n    return tidy(() => {\n        const zerosLikeX = coreZerosLike(x);\n        const onesLikeX = coreOnesLike(x);\n        return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n    });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices, numClasses) {\n    return tidy(() => {\n        if (indices.rank !== 1) {\n            throw new Error('Only 1D one-hot tensors are supported in the ' +\n                'deeplearn backend, at present.');\n        }\n        indices = tfc.cast(indices, 'int32');\n        return tfc.cast(tfc.oneHot(indices, numClasses), 'float32');\n    });\n}\n/* Elementary math functions. */\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(reference, indices, axis) {\n    return tidy(() => {\n        if (Array.isArray(indices)) {\n            indices = tensor1d(indices, 'int32');\n        }\n        else {\n            indices = tfc.cast(indices, 'int32');\n        }\n        return tfc.gather(reference, indices, axis);\n    });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x) {\n    return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x, a) {\n    return tidy(() => {\n        if (typeof (a) === 'number') {\n            a = scalar(Math.round(a), 'int32');\n        }\n        if (a.dtype !== 'int32') {\n            throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n        }\n        return tfc.pow(x, a);\n    });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank, bias, dataFormat) {\n    const biasShape = bias.shape;\n    if (bias.rank !== 1 && bias.rank !== xRank) {\n        throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` +\n            `; expected it to be 1 or ${xRank}`);\n    }\n    if (xRank === 5) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 4) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 3) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank < 3) {\n        return bias;\n    }\n    throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(x, bias, dataFormat) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n    });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x, alpha = 1) {\n    // TODO(cais): Add support for alpha values other than 1.\n    if (alpha !== 1) {\n        throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` +\n            `yet.`);\n    }\n    return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x) {\n    return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(x, level, noiseShape, seed) {\n    return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x) {\n    return tidy(() => {\n        const y = tfc.add(.5, tfc.mul(.2, x));\n        return tfc.clipByValue(y, 0, 1);\n    });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase(x, alt, training = false) {\n    return training ? x() : alt();\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\nexport const VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', 'truncatedNormal'];\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid\n// and that we have the right number of them.\n/**\n * A string array of valid Initializer class names.\n *\n * This is guaranteed to match the `InitializerClassName` union type.\n */\nexport const initializerClassNames = [\n    'Zeros', 'Ones', 'Constant', 'RandomNormal', 'RandomUniform',\n    'TruncatedNormal', 'VarianceScaling', 'Orthogonal', 'Identity'\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6ZXJfY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2tlcmFzX2Zvcm1hdC9pbml0aWFsaXplcl9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFRSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFPbkUsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQ2xDLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBNEU3Qyw0RUFBNEU7QUFDNUUsNkVBQTZFO0FBQzdFLDZDQUE2QztBQUU3Qzs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQTJCO0lBQzNELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxlQUFlO0lBQzVELGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxVQUFVO0NBQy9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0Jhc2VTZXJpYWxpemF0aW9ufSBmcm9tICcuL3R5cGVzJztcblxuLy8gVE9ETyhzb2VyZ2VsKTogTW92ZSB0aGUgQ2FtZWxDYXNlIHZlcnNpb25zIGJhY2sgb3V0IG9mIGtlcmFzX2Zvcm1hdFxuLy8gZS5nLiB0byBzcmMvY29tbW9uLnRzLiAgTWF5YmUgZXZlbiBkdXBsaWNhdGUgKmFsbCogb2YgdGhlc2UgdG8gYmUgcGVkYW50aWM/XG4vKiogQGRvY2lubGluZSAqL1xuZXhwb3J0IHR5cGUgRmFuTW9kZSA9ICdmYW5Jbid8J2Zhbk91dCd8J2ZhbkF2Zyc7XG5leHBvcnQgY29uc3QgVkFMSURfRkFOX01PREVfVkFMVUVTID0gWydmYW5JbicsICdmYW5PdXQnLCAnZmFuQXZnJ107XG5cbi8vIFRoZXNlIGNvbnN0YW50cyBoYXZlIGEgc25ha2UgdnMuIGNhbWVsIGRpc3RpbmN0aW9uLlxuZXhwb3J0IHR5cGUgRmFuTW9kZVNlcmlhbGl6YXRpb24gPSAnZmFuX2luJ3wnZmFuX291dCd8J2Zhbl9hdmcnO1xuXG4vKiogQGRvY2lubGluZSAqL1xuZXhwb3J0IHR5cGUgRGlzdHJpYnV0aW9uID0gJ25vcm1hbCd8J3VuaWZvcm0nfCd0cnVuY2F0ZWROb3JtYWwnO1xuZXhwb3J0IGNvbnN0IFZBTElEX0RJU1RSSUJVVElPTl9WQUxVRVMgPVxuICAgIFsnbm9ybWFsJywgJ3VuaWZvcm0nLCAndHJ1bmNhdGVkTm9ybWFsJ107XG4vLyBUaGVzZSBjb25zdGFudHMgaGF2ZSBhIHNuYWtlIHZzLiBjYW1lbCBkaXN0aW5jdGlvbi5cbmV4cG9ydCB0eXBlIERpc3RyaWJ1dGlvblNlcmlhbGl6YXRpb24gPSAnbm9ybWFsJ3wndW5pZm9ybSd8J3RydW5jYXRlZF9ub3JtYWwnO1xuXG5leHBvcnQgdHlwZSBaZXJvc1NlcmlhbGl6YXRpb24gPSBCYXNlU2VyaWFsaXphdGlvbjwnWmVyb3MnLCB7fT47XG5cbmV4cG9ydCB0eXBlIE9uZXNTZXJpYWxpemF0aW9uID0gQmFzZVNlcmlhbGl6YXRpb248J09uZXMnLCB7fT47XG5cbmV4cG9ydCB0eXBlIENvbnN0YW50Q29uZmlnID0ge1xuICB2YWx1ZTogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgQ29uc3RhbnRTZXJpYWxpemF0aW9uID1cbiAgICBCYXNlU2VyaWFsaXphdGlvbjwnQ29uc3RhbnQnLCBDb25zdGFudENvbmZpZz47XG5cbmV4cG9ydCB0eXBlIFJhbmRvbU5vcm1hbENvbmZpZyA9IHtcbiAgbWVhbj86IG51bWJlcjtcbiAgc3RkZGV2PzogbnVtYmVyO1xuICBzZWVkPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUmFuZG9tTm9ybWFsU2VyaWFsaXphdGlvbiA9XG4gICAgQmFzZVNlcmlhbGl6YXRpb248J1JhbmRvbU5vcm1hbCcsIFJhbmRvbU5vcm1hbENvbmZpZz47XG5cbmV4cG9ydCB0eXBlIFJhbmRvbVVuaWZvcm1Db25maWcgPSB7XG4gIG1pbnZhbD86IG51bWJlcjtcbiAgbWF4dmFsPzogbnVtYmVyO1xuICBzZWVkPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUmFuZG9tVW5pZm9ybVNlcmlhbGl6YXRpb24gPVxuICAgIEJhc2VTZXJpYWxpemF0aW9uPCdSYW5kb21Vbmlmb3JtJywgUmFuZG9tVW5pZm9ybUNvbmZpZz47XG5cbmV4cG9ydCB0eXBlIFRydW5jYXRlZE5vcm1hbENvbmZpZyA9IHtcbiAgbWVhbj86IG51bWJlcjtcbiAgc3RkZGV2PzogbnVtYmVyO1xuICBzZWVkPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgVHJ1bmNhdGVkTm9ybWFsU2VyaWFsaXphdGlvbiA9XG4gICAgQmFzZVNlcmlhbGl6YXRpb248J1RydW5jYXRlZE5vcm1hbCcsIFRydW5jYXRlZE5vcm1hbENvbmZpZz47XG5cbmV4cG9ydCB0eXBlIFZhcmlhbmNlU2NhbGluZ0NvbmZpZyA9IHtcbiAgc2NhbGU/OiBudW1iZXI7XG5cbiAgbW9kZT86IEZhbk1vZGVTZXJpYWxpemF0aW9uO1xuICBkaXN0cmlidXRpb24/OiBEaXN0cmlidXRpb25TZXJpYWxpemF0aW9uO1xuICBzZWVkPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgVmFyaWFuY2VTY2FsaW5nU2VyaWFsaXphdGlvbiA9XG4gICAgQmFzZVNlcmlhbGl6YXRpb248J1ZhcmlhbmNlU2NhbGluZycsIFZhcmlhbmNlU2NhbGluZ0NvbmZpZz47XG5cbmV4cG9ydCB0eXBlIE9ydGhvZ29uYWxDb25maWcgPSB7XG4gIHNlZWQ/OiBudW1iZXI7XG4gIGdhaW4/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBPcnRob2dvbmFsU2VyaWFsaXphdGlvbiA9XG4gICAgQmFzZVNlcmlhbGl6YXRpb248J09ydGhvZ29uYWwnLCBPcnRob2dvbmFsQ29uZmlnPjtcblxuZXhwb3J0IHR5cGUgSWRlbnRpdHlDb25maWcgPSB7XG4gIGdhaW4/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBJZGVudGl0eVNlcmlhbGl6YXRpb24gPVxuICAgIEJhc2VTZXJpYWxpemF0aW9uPCdJZGVudGl0eScsIElkZW50aXR5Q29uZmlnPjtcblxuLy8gVXBkYXRlIGluaXRpYWxpemVyQ2xhc3NOYW1lcyBiZWxvdyBpbiBjb25jZXJ0IHdpdGggdGhpcy5cbmV4cG9ydCB0eXBlIEluaXRpYWxpemVyU2VyaWFsaXphdGlvbiA9IFplcm9zU2VyaWFsaXphdGlvbnxPbmVzU2VyaWFsaXphdGlvbnxcbiAgICBDb25zdGFudFNlcmlhbGl6YXRpb258UmFuZG9tVW5pZm9ybVNlcmlhbGl6YXRpb258UmFuZG9tTm9ybWFsU2VyaWFsaXphdGlvbnxcbiAgICBUcnVuY2F0ZWROb3JtYWxTZXJpYWxpemF0aW9ufElkZW50aXR5U2VyaWFsaXphdGlvbnxcbiAgICBWYXJpYW5jZVNjYWxpbmdTZXJpYWxpemF0aW9ufE9ydGhvZ29uYWxTZXJpYWxpemF0aW9uO1xuXG5leHBvcnQgdHlwZSBJbml0aWFsaXplckNsYXNzTmFtZSA9IEluaXRpYWxpemVyU2VyaWFsaXphdGlvblsnY2xhc3NfbmFtZSddO1xuXG4vLyBXZSBjYW4ndCBlYXNpbHkgZXh0cmFjdCBhIHN0cmluZ1tdIGZyb20gdGhlIHN0cmluZyB1bmlvbiB0eXBlLCBidXQgd2UgY2FuXG4vLyByZWNhcGl0dWxhdGUgdGhlIGxpc3QsIGVuZm9yY2luZyBhdCBjb21waWxlIHRpbWUgdGhhdCB0aGUgdmFsdWVzIGFyZSB2YWxpZFxuLy8gYW5kIHRoYXQgd2UgaGF2ZSB0aGUgcmlnaHQgbnVtYmVyIG9mIHRoZW0uXG5cbi8qKlxuICogQSBzdHJpbmcgYXJyYXkgb2YgdmFsaWQgSW5pdGlhbGl6ZXIgY2xhc3MgbmFtZXMuXG4gKlxuICogVGhpcyBpcyBndWFyYW50ZWVkIHRvIG1hdGNoIHRoZSBgSW5pdGlhbGl6ZXJDbGFzc05hbWVgIHVuaW9uIHR5cGUuXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplckNsYXNzTmFtZXM6IEluaXRpYWxpemVyQ2xhc3NOYW1lW10gPSBbXG4gICdaZXJvcycsICdPbmVzJywgJ0NvbnN0YW50JywgJ1JhbmRvbU5vcm1hbCcsICdSYW5kb21Vbmlmb3JtJyxcbiAgJ1RydW5jYXRlZE5vcm1hbCcsICdWYXJpYW5jZVNjYWxpbmcnLCAnT3J0aG9nb25hbCcsICdJZGVudGl0eSdcbl07XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, transpose, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = transpose(q);\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\n// tslint:enable\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x) {\n    return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x) {\n    if (x.length === 0) {\n        return [];\n    }\n    if (!Array.isArray(x[0])) {\n        return [x];\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs) {\n    let x;\n    if (Array.isArray(xs)) {\n        if (xs.length !== 1) {\n            throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n        }\n        x = xs[0];\n    }\n    else {\n        x = xs;\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes) {\n    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n        if (shapes.length === 1) {\n            shapes = shapes;\n            return shapes[0];\n        }\n        else {\n            throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n        }\n    }\n    else {\n        return shapes;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvdXRpbHMvdHlwZXNfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFLSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXJDLGdCQUFnQjtBQUVoQjs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsQ0FBZ0I7SUFDOUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFDLENBQWdCO0lBQ2pELElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxDQUFDLENBQVksQ0FBQztLQUN2QjtJQUNELE9BQU8sQ0FBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxFQUFtQjtJQUNyRCxJQUFJLENBQVMsQ0FBQztJQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxVQUFVLENBQUMsdUNBQXVDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNYO1NBQU07UUFDTCxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ1I7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsTUFBcUI7SUFDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckQsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QixNQUFNLEdBQUcsTUFBaUIsQ0FBQztZQUMzQixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsQjthQUFNO1lBQ0wsTUFBTSxJQUFJLFVBQVUsQ0FBQyxpQ0FBaUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDeEU7S0FDRjtTQUFNO1FBQ0wsT0FBTyxNQUFlLENBQUM7S0FDeEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLyogT3JpZ2luYWwgc291cmNlOiB1dGlscy9nZW5lcmljX3V0aWxzLnB5ICovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuaW1wb3J0IHtWYWx1ZUVycm9yfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtTaGFwZX0gZnJvbSAnLi4va2VyYXNfZm9ybWF0L2NvbW1vbic7XG4vLyB0c2xpbnQ6ZW5hYmxlXG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGlucHV0IGlzIGFuIEFycmF5IG9mIFNoYXBlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlPZlNoYXBlcyh4OiBTaGFwZXxTaGFwZVtdKTogYm9vbGVhbiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHgpICYmIEFycmF5LmlzQXJyYXkoeFswXSk7XG59XG5cbi8qKlxuICogU3BlY2lhbCBjYXNlIG9mIG5vcm1hbGl6aW5nIHNoYXBlcyB0byBsaXN0cy5cbiAqXG4gKiBAcGFyYW0geCBBIHNoYXBlIG9yIGxpc3Qgb2Ygc2hhcGVzIHRvIG5vcm1hbGl6ZSBpbnRvIGEgbGlzdCBvZiBTaGFwZXMuXG4gKiBAcmV0dXJuIEEgbGlzdCBvZiBTaGFwZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVTaGFwZUxpc3QoeDogU2hhcGV8U2hhcGVbXSk6IFNoYXBlW10ge1xuICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KHhbMF0pKSB7XG4gICAgcmV0dXJuIFt4XSBhcyBTaGFwZVtdO1xuICB9XG4gIHJldHVybiB4IGFzIFNoYXBlW107XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIG9idGFpbiBleGFjdGx5IG9uZSBUZW5zb3IuXG4gKiBAcGFyYW0geHM6IEEgc2luZ2xlIGB0Zi5UZW5zb3JgIG9yIGFuIGBBcnJheWAgb2YgYHRmLlRlbnNvcmBzLlxuICogQHJldHVybiBBIHNpbmdsZSBgdGYuVGVuc29yYC4gSWYgYHhzYCBpcyBhbiBgQXJyYXlgLCByZXR1cm4gdGhlIGZpcnN0IG9uZS5cbiAqIEB0aHJvd3MgVmFsdWVFcnJvcjogSWYgYHhzYCBpcyBhbiBgQXJyYXlgIGFuZCBpdHMgbGVuZ3RoIGlzIG5vdCAxLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhhY3RseU9uZVRlbnNvcih4czogVGVuc29yfFRlbnNvcltdKTogVGVuc29yIHtcbiAgbGV0IHg6IFRlbnNvcjtcbiAgaWYgKEFycmF5LmlzQXJyYXkoeHMpKSB7XG4gICAgaWYgKHhzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoYEV4cGVjdGVkIFRlbnNvciBsZW5ndGggdG8gYmUgMTsgZ290ICR7eHMubGVuZ3RofWApO1xuICAgIH1cbiAgICB4ID0geHNbMF07XG4gIH0gZWxzZSB7XG4gICAgeCA9IHhzO1xuICB9XG4gIHJldHVybiB4O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBvYnRhaW4gZXhhY3RseSBvbiBpbnN0YW5jZSBvZiBTaGFwZS5cbiAqXG4gKiBAcGFyYW0gc2hhcGVzIElucHV0IHNpbmdsZSBgU2hhcGVgIG9yIEFycmF5IG9mIGBTaGFwZWBzLlxuICogQHJldHVybnMgSWYgaW5wdXQgaXMgYSBzaW5nbGUgYFNoYXBlYCwgcmV0dXJuIGl0IHVuY2hhbmdlZC4gSWYgdGhlIGlucHV0IGlzXG4gKiAgIGFuIGBBcnJheWAgY29udGFpbmluZyBleGFjdGx5IG9uZSBpbnN0YW5jZSBvZiBgU2hhcGVgLCByZXR1cm4gdGhlIGluc3RhbmNlLlxuICogICBPdGhlcndpc2UsIHRocm93IGEgYFZhbHVlRXJyb3JgLlxuICogQHRocm93cyBWYWx1ZUVycm9yOiBJZiBpbnB1dCBpcyBhbiBgQXJyYXlgIG9mIGBTaGFwZWBzLCBhbmQgaXRzIGxlbmd0aCBpcyBub3RcbiAqICAgMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV4YWN0bHlPbmVTaGFwZShzaGFwZXM6IFNoYXBlfFNoYXBlW10pOiBTaGFwZSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNoYXBlcykgJiYgQXJyYXkuaXNBcnJheShzaGFwZXNbMF0pKSB7XG4gICAgaWYgKHNoYXBlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHNoYXBlcyA9IHNoYXBlcyBhcyBTaGFwZVtdO1xuICAgICAgcmV0dXJuIHNoYXBlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoYEV4cGVjdGVkIGV4YWN0bHkgMSBTaGFwZTsgZ290ICR7c2hhcGVzLmxlbmd0aH1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNoYXBlcyBhcyBTaGFwZTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights) {\n    let count = 0;\n    for (const weight of weights) {\n        if (weight.shape.length === 0) {\n            count += 1;\n        }\n        else {\n            count += weight.shape.reduce((a, b) => a * b);\n        }\n    }\n    return count;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvdXRpbHMvdmFyaWFibGVfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFJSDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsT0FBd0I7SUFDM0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0IsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUNaO2FBQU07WUFDTCxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDL0M7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7TGF5ZXJWYXJpYWJsZX0gZnJvbSAnLi4vdmFyaWFibGVzJztcblxuLyoqXG4gKiBDb3VudCB0aGUgZWxlbWVudHMgaW4gYW4gQXJyYXkgb2YgTGF5ZXJWYXJpYWJsZXMuXG4gKlxuICogQHBhcmFtIHdlaWdodHM6IFRoZSBMYXllclZhcmlhYmxlcyBvZiB3aGljaCB0aGUgY29uc3RpdHVlbnQgbnVtYmVycyBhcmUgdG9cbiAqICAgYmUgY291bnRlZC5cbiAqIEByZXR1cm5zIEEgY291bnQgb2YgdGhlIGVsZW1lbnRzIGluIGFsbCB0aGUgTGF5ZXJWYXJpYWJsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UGFyYW1zSW5XZWlnaHRzKHdlaWdodHM6IExheWVyVmFyaWFibGVbXSk6IG51bWJlciB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAoY29uc3Qgd2VpZ2h0IG9mIHdlaWdodHMpIHtcbiAgICBpZiAod2VpZ2h0LnNoYXBlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgKz0gd2VpZ2h0LnNoYXBlLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { variableGrads } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId } from './backend/state';\nimport { getScopedTensorName, getUniqueTensorName } from './common';\nimport { NotImplementedError } from './errors';\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n    /**\n     * Construct Variable from a `tf.Tensor`.\n     *\n     * If not explicitly named, the Variable will be given a name with the\n     * prefix 'Variable'. Variable names are unique. In the case of name\n     * collision, suffixies '_<num>' will be added to the name.\n     *\n     * @param val Initial value of the Variable.\n     * @param name Name of the variable. If `null` or `undefined` is provided, it\n     *   will default a name with the prefix 'Variable'.\n     * @param constraint Optional, projection function to be applied to the\n     * variable after optimize updates\n     * @throws ValueError if `name` is `null` or `undefined`.\n     */\n    constructor(val, dtype = 'float32', name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null) {\n        this.dtype = dtype == null ? 'float32' : dtype;\n        this.shape = val.shape;\n        this.id = getNextUniqueTensorId();\n        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n        this.originalName = getScopedTensorName(name);\n        this.name = getUniqueTensorName(this.originalName);\n        this.trainable_ = trainable;\n        this.constraint = constraint;\n        this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n    }\n    /**\n     * Get a snapshot of the Variable's value.\n     *\n     * The returned value is a snapshot of the Variable's value at the time of\n     * the invocation. Future mutations in the value of the tensor will only\n     * be reflected by future calls to this method.\n     */\n    read() {\n        this.assertNotDisposed();\n        return this.val;\n    }\n    /**\n     * Update the value of the Variable.\n     *\n     * @param newVal: The new value to update to. Must be consistent with the\n     *   dtype and shape of the Variable.\n     * @return This Variable.\n     */\n    write(newVal) {\n        // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n        this.assertNotDisposed();\n        checkShapesMatch(this.val, newVal);\n        // Skip updating if this is the exact same tensor.\n        if (this.val.id !== newVal.id) {\n            this.val.assign(newVal);\n            if (this.constraint != null) {\n                this.val.assign(this.constraint.apply(this.val));\n            }\n        }\n        return this;\n    }\n    /**\n     * Dispose this LayersVariable instance from memory.\n     */\n    dispose() {\n        this.assertNotDisposed();\n        this.val.dispose();\n    }\n    assertNotDisposed() {\n        if (this.val.isDisposed) {\n            throw new Error(`LayersVariable ${this.name} is already disposed.`);\n        }\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this.trainable_ = trainable;\n        this.val.trainable = trainable;\n    }\n}\nfunction checkShapesMatch(x, y) {\n    if (x.shape.toString() !== y.shape.toString()) {\n        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n            JSON.stringify(y.shape));\n    }\n}\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(x, dtype, name, constraint) {\n    return new LayerVariable(x, dtype, name, true, constraint);\n}\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(shape, dtype, name) {\n    // TODO(cais): Implement logic for dtype.\n    return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(x, dtype, name) {\n    return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(shape, dtype, name) {\n    // TODO(cais): Implement logic for dtype.\n    const allocated = tfc.ones(shape);\n    return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(x, dtype, name) {\n    const allocated = tfc.onesLike(x);\n    return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(size, dtype, name) {\n    return new LayerVariable(tfc.eye(size), dtype, name);\n}\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(shape, minval, maxval, dtype, seed, name = 'randomUniform') {\n    return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'truncatedNormal') {\n    // TODO(cais): Implement logic for dtype and seed once they are supported\n    // by deeplearn.js.\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n    }\n    return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'randomNormal') {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`randomNormalVariable does not support dType ${dtype}.`);\n    }\n    return new LayerVariable(tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x, xNew) {\n    return x.write(xNew);\n}\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x, increment) {\n    return x.write(tfc.add(x.read(), increment));\n}\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x, decrement) {\n    return x.write(tfc.sub(x.read(), decrement));\n}\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs) {\n    return xs.map(x => x.read());\n}\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(variablesAndValues) {\n    variablesAndValues.forEach(variableAndValue => {\n        const variable = variableAndValue[0];\n        variable.write(variableAndValue[1]);\n    });\n}\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(lossFn, variables) {\n    // TODO(cais): The return type signature can be simplified if deeplearn makes\n    //   the corresponding type public.\n    const variableList = variables.map(variable => variable.read());\n    const valudAndGrads = variableGrads(lossFn, variableList);\n    return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/engine/topology.py */\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId, getUid } from '../backend/state';\nimport { getScopedTensorName, getUniqueTensorName, nameScope } from '../common';\nimport { AttributeError, NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { getInitializer } from '../initializers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport { batchGetValue, batchSetValue, LayerVariable } from '../variables';\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n    constructor(args) {\n        this.dtype = args.dtype;\n        this.shape = args.shape;\n        /*\n          TODO(michaelterry): Could throw error if ndim and shape are both defined\n            (then backport).\n        */\n        if (args.shape != null) {\n            this.ndim = args.shape.length;\n        }\n        else {\n            this.ndim = args.ndim;\n        }\n        this.maxNDim = args.maxNDim;\n        this.minNDim = args.minNDim;\n        this.axes = args.axes || {};\n    }\n}\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * a `tf.LayersModel` and the input data's shape, but not values are known.\n *\n * @doc {heading: 'Models', 'subheading': 'Classes'}\n */\nexport class SymbolicTensor {\n    /**\n     *\n     * @param dtype\n     * @param shape\n     * @param sourceLayer The Layer that produced this symbolic tensor.\n     * @param inputs The inputs passed to sourceLayer's __call__() method.\n     * @param nodeIndex\n     * @param tensorIndex\n     * @param callArgs The keyword arguments passed to the __call__() method.\n     * @param name\n     * @param outputTensorIndex The index of this tensor in the list of outputs\n     *   returned by apply().\n     */\n    constructor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n        this.dtype = dtype;\n        this.shape = shape;\n        this.sourceLayer = sourceLayer;\n        this.inputs = inputs;\n        this.callArgs = callArgs;\n        this.outputTensorIndex = outputTensorIndex;\n        this.id = getNextUniqueTensorId();\n        if (name != null) {\n            this.originalName = getScopedTensorName(name);\n            this.name = getUniqueTensorName(this.originalName);\n        }\n        this.rank = shape.length;\n    }\n}\nlet _nextNodeID = 0;\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n    constructor(args, \n    // TODO(michaelterry): Define actual type for this.\n    callArgs) {\n        this.callArgs = callArgs;\n        this.id = _nextNodeID++;\n        /*\n          Layer instance (NOT a list).\n          this is the layer that takes a list of input tensors\n          and turns them into a list of output tensors.\n          the current node will be added to\n          the inboundNodes of outboundLayer.\n        */\n        this.outboundLayer = args.outboundLayer;\n        /*\n            The following 3 properties describe where\n            the input tensors come from: which layers,\n            and for each layer, which node and which\n            tensor output of each node.\n        */\n        // List of layer instances.\n        this.inboundLayers = args.inboundLayers;\n        // List of integers, 1:1 mapping with inboundLayers.\n        this.nodeIndices = args.nodeIndices;\n        // List of integers, 1:1 mapping with inboundLayers.\n        this.tensorIndices = args.tensorIndices;\n        /*\n            Following 2 properties:\n            tensor inputs and outputs of outboundLayer.\n        */\n        // List of tensors. 1:1 mapping with inboundLayers.\n        this.inputTensors = args.inputTensors;\n        // List of tensors, created by outboundLayer.call().\n        this.outputTensors = args.outputTensors;\n        /*\n            Following 2 properties: input and output masks.\n            List of tensors, 1:1 mapping with inputTensor.\n        */\n        this.inputMasks = args.inputMasks;\n        // List of tensors, created by outboundLayer.computeMask().\n        this.outputMasks = args.outputMasks;\n        // Following 2 properties: input and output shapes.\n        // List of shape tuples, shapes of inputTensors.\n        this.inputShapes = args.inputShapes;\n        // List of shape tuples, shapes of outputTensors.\n        this.outputShapes = args.outputShapes;\n        // Add nodes to all layers involved.\n        for (const layer of args.inboundLayers) {\n            if (layer != null) {\n                layer.outboundNodes.push(this);\n            }\n        }\n        args.outboundLayer.inboundNodes.push(this);\n    }\n    getConfig() {\n        const inboundNames = [];\n        for (const layer of this.inboundLayers) {\n            if (layer != null) {\n                inboundNames.push(layer.name);\n            }\n            else {\n                inboundNames.push(null);\n            }\n        }\n        return {\n            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n            inboundLayers: inboundNames,\n            nodeIndices: this.nodeIndices,\n            tensorIndices: this.tensorIndices\n        };\n    }\n}\nlet _nextLayerID = 0;\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.LayersModel`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n *\n * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}\n */\nexport class Layer extends serialization.Serializable {\n    constructor(args = {}) {\n        super();\n        this._callHook = null;\n        this._addedWeightNames = [];\n        // Porting Notes: PyKeras does not have this property in this base Layer\n        //   class. Instead lets Layer subclass set it dynamically and checks the\n        //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n        //   base class.\n        this._stateful = false;\n        this.id = _nextLayerID++;\n        this.activityRegularizer = null;\n        this.inputSpec = null;\n        this.supportsMasking = false;\n        // These properties will be set upon call of this.build()\n        this._trainableWeights = [];\n        this._nonTrainableWeights = [];\n        this._losses = [];\n        this._updates = [];\n        this._built = false;\n        /*\n          These lists will be filled via successive calls\n          to this.addInboundNode().\n         */\n        this.inboundNodes = [];\n        this.outboundNodes = [];\n        let name = args.name;\n        if (!name) {\n            const prefix = this.getClassName();\n            name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n        }\n        this.name = name;\n        this.trainable_ = args.trainable == null ? true : args.trainable;\n        if (args.inputShape != null || args.batchInputShape != null) {\n            /*\n              In this case we will later create an input layer\n              to insert before the current layer\n             */\n            let batchInputShape;\n            if (args.batchInputShape != null) {\n                batchInputShape = args.batchInputShape;\n            }\n            else if (args.inputShape != null) {\n                let batchSize = null;\n                if (args.batchSize != null) {\n                    batchSize = args.batchSize;\n                }\n                batchInputShape = [batchSize].concat(args.inputShape);\n            }\n            this.batchInputShape = batchInputShape;\n            // Set dtype.\n            let dtype = args.dtype;\n            if (dtype == null) {\n                dtype = args.inputDType;\n            }\n            if (dtype == null) {\n                dtype = 'float32';\n            }\n            this.dtype = dtype;\n        }\n        if (args.weights != null) {\n            this.initialWeights = args.weights;\n        }\n        else {\n            this.initialWeights = null;\n        }\n        // The value of `_refCount` is initialized to null. When the layer is used\n        // in a symbolic way for the first time, it will be set to 1.\n        this._refCount = null;\n        this.fastWeightInitDuringBuild = false;\n    }\n    /**\n     * Converts a layer and its index to a unique (immutable type) name.\n     * This function is used internally with `this.containerNodes`.\n     * @param layer The layer.\n     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n     *   nodes.\n     *\n     * @returns The unique name.\n     */\n    static nodeKey(layer, nodeIndex) {\n        return layer.name + '_ib-' + nodeIndex.toString();\n    }\n    /**\n     * Returns this.inboundNode at index nodeIndex.\n     *\n     * Porting note: This is a replacement for _get_node_attribute_at_index()\n     * @param nodeIndex\n     * @param attrName The name of the attribute related to request for this node.\n     */\n    getNodeAtIndex(nodeIndex, attrName) {\n        if (this.inboundNodes.length === 0) {\n            throw new RuntimeError('The layer has never been called ' +\n                `and thus has no defined ${attrName}.`);\n        }\n        if (this.inboundNodes.length <= nodeIndex) {\n            throw new ValueError(`Asked to get ${attrName} at node ${nodeIndex}, ` +\n                `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n        }\n        return this.inboundNodes[nodeIndex];\n    }\n    /**\n     * Retrieves the input tensor(s) of a layer at a given node.\n     *\n     * @param nodeIndex Integer, index of the node from which to retrieve the\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n     *   was called.\n     *\n     * @return A tensor (or list of tensors if the layer has multiple inputs).\n     */\n    getInputAt(nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n    }\n    /**\n     * Retrieves the output tensor(s) of a layer at a given node.\n     *\n     * @param nodeIndex Integer, index of the node from which to retrieve the\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n     *   was called.\n     *\n     * @return A tensor (or list of tensors if the layer has multiple outputs).\n     */\n    getOutputAt(nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n    }\n    // Properties\n    /**\n     * Retrieves the input tensor(s) of a layer.\n     *\n     * Only applicable if the layer has exactly one inbound node,\n     * i.e. if it is connected to one incoming layer.\n     *\n     * @return Input tensor or list of input tensors.\n     *\n     * @exception AttributeError if the layer is connected to more than one\n     *   incoming layers.\n     */\n    get input() {\n        if (this.inboundNodes.length > 1) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has multiple inbound nodes, ' +\n                'hence the notion of \"layer input\" ' +\n                'is ill-defined. ' +\n                'Use `getInputAt(nodeIndex)` instead.');\n        }\n        else if (this.inboundNodes.length === 0) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' is not connected, no input to return.');\n        }\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);\n    }\n    /**\n     * Retrieves the output tensor(s) of a layer.\n     *\n     * Only applicable if the layer has exactly one inbound node,\n     * i.e. if it is connected to one incoming layer.\n     *\n     * @return Output tensor or list of output tensors.\n     *\n     * @exception AttributeError if the layer is connected to more than one\n     *   incoming layers.\n     */\n    get output() {\n        if (this.inboundNodes.length === 0) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has no inbound nodes.');\n        }\n        if (this.inboundNodes.length > 1) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has multiple inbound nodes, ' +\n                'hence the notion of \"layer output\" ' +\n                'is ill-defined. ' +\n                'Use `getOutputAt(nodeIndex)` instead.');\n        }\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);\n    }\n    get losses() {\n        return this._losses;\n    }\n    /**\n     * Retrieves the Layer's current loss values.\n     *\n     * Used for regularizers during training.\n     */\n    calculateLosses() {\n        // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n        //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n        //   Tensor (specifically Scalar) values are returned. This is due to the\n        //   imperative backend.\n        return this.losses.map(lossFn => lossFn());\n    }\n    get updates() {\n        return this._updates;\n    }\n    get built() {\n        return this._built;\n    }\n    set built(built) {\n        this._built = built;\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this._trainableWeights.forEach(w => w.trainable = trainable);\n        this.trainable_ = trainable;\n    }\n    get trainableWeights() {\n        if (this.trainable_) {\n            return this._trainableWeights.filter(w => w.trainable);\n        }\n        else {\n            return [];\n        }\n    }\n    set trainableWeights(weights) {\n        this._trainableWeights = weights;\n    }\n    get nonTrainableWeights() {\n        if (this.trainable) {\n            return this._trainableWeights.filter(w => !w.trainable)\n                .concat(this._nonTrainableWeights);\n        }\n        else {\n            return this._trainableWeights.concat(this._nonTrainableWeights);\n        }\n    }\n    set nonTrainableWeights(weights) {\n        this._nonTrainableWeights = weights;\n    }\n    /**\n     * The concatenation of the lists trainableWeights and nonTrainableWeights\n     * (in this order).\n     */\n    get weights() {\n        return this.trainableWeights.concat(this.nonTrainableWeights);\n    }\n    get stateful() {\n        return this._stateful;\n    }\n    /**\n     * Reset the states of the layer.\n     *\n     * This method of the base Layer class is essentially a no-op.\n     * Subclasses that are stateful (e.g., stateful RNNs) should override this\n     * method.\n     */\n    resetStates() {\n        if (!this.stateful) {\n            throw new Error('Cannot call the resetStates() method of a non-stateful Layer ' +\n                'object.');\n        }\n    }\n    /**\n     * Checks compatibility between the layer and provided inputs.\n     *\n     * This checks that the tensor(s) `input`\n     * verify the input assumptions of the layer\n     * (if any). If not, exceptions are raised.\n     *\n     * @param inputs Input tensor or list of input tensors.\n     *\n     * @exception ValueError in case of mismatch between\n     *   the provided inputs and the expectations of the layer.\n     */\n    assertInputCompatibility(inputs) {\n        inputs = generic_utils.toList(inputs);\n        if (this.inputSpec == null || this.inputSpec.length === 0) {\n            return;\n        }\n        const inputSpec = generic_utils.toList(this.inputSpec);\n        if (inputs.length !== inputSpec.length) {\n            throw new ValueError(`Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n                `but it received ${inputs.length} input tensors. ` +\n                `Input received: ${inputs}`);\n        }\n        for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n            const x = inputs[inputIndex];\n            const spec = inputSpec[inputIndex];\n            if (spec == null) {\n                continue;\n            }\n            // Check ndim.\n            const ndim = x.rank;\n            if (spec.ndim != null) {\n                if (ndim !== spec.ndim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n                        `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n                }\n            }\n            if (spec.maxNDim != null) {\n                if (ndim > spec.maxNDim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` +\n                        `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n                }\n            }\n            if (spec.minNDim != null) {\n                if (ndim < spec.minNDim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` +\n                        `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n                }\n            }\n            // Check dtype.\n            if (spec.dtype != null) {\n                if (x.dtype !== spec.dtype) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name} ` +\n                        `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n                }\n            }\n            // Check specific shape axes.\n            if (spec.axes) {\n                const xShape = x.shape;\n                for (const key in spec.axes) {\n                    const axis = Number(key);\n                    const value = spec.axes[key];\n                    // Perform Python-style slicing in case axis < 0;\n                    // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n                    // ensure type safety through Underscore calls.\n                    const xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n                        throw new ValueError(`Input ${inputIndex} is incompatible with layer ` +\n                            `${this.name}: expected axis ${axis} of input shape to ` +\n                            `have value ${value} but got shape ${xShape}.`);\n                    }\n                }\n            }\n            // Check shape.\n            if (spec.shape != null) {\n                for (let i = 0; i < spec.shape.length; ++i) {\n                    const specDim = spec.shape[i];\n                    const dim = x.shape[i];\n                    if (specDim != null && dim != null) {\n                        if (specDim !== dim) {\n                            throw new ValueError(`Input ${inputIndex} is incompatible with layer ` +\n                                `${this.name}: expected shape=${spec.shape}, ` +\n                                `found shape=${x.shape}.`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * This is where the layer's logic lives.\n     *\n     * @param inputs Input tensor, or list/tuple of input tensors.\n     * @param kwargs Additional keyword arguments.\n     *\n     * @return A tensor or list/tuple of tensors.\n     */\n    call(inputs, kwargs) {\n        return inputs;\n    }\n    invokeCallHook(inputs, kwargs) {\n        if (this._callHook != null) {\n            this._callHook(inputs, kwargs);\n        }\n    }\n    /**\n     * Set call hook.\n     * This is currently used for testing only.\n     * @param callHook\n     */\n    setCallHook(callHook) {\n        this._callHook = callHook;\n    }\n    /**\n     * Clear call hook.\n     * This is currently used for testing only.\n     */\n    clearCallHook() {\n        this._callHook = null;\n    }\n    /**\n     * Builds or executes a `Layer's logic.\n     *\n     * When called with `tf.Tensor`(s), execute the `Layer`s computation and\n     * return Tensor(s). For example:\n     *\n     * ```js\n     * const denseLayer = tf.layers.dense({\n     *   units: 1,\n     *   kernelInitializer: 'zeros',\n     *   useBias: false\n     * });\n     *\n     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n     * // numeric values).\n     * const input = tf.ones([2, 2]);\n     * const output = denseLayer.apply(input);\n     *\n     * // The output's value is expected to be [[0], [0]], due to the fact that\n     * // the dense layer has a kernel initialized to all-zeros and does not have\n     * // a bias.\n     * output.print();\n     * ```\n     *\n     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n     * future execution.  This entails internal book-keeping on shapes of\n     * expected Tensors, wiring layers together, and initializing weights.\n     *\n     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n     * building of non-`tf.Sequential` models. For example:\n     *\n     * ```js\n     * const flattenLayer = tf.layers.flatten();\n     * const denseLayer = tf.layers.dense({units: 1});\n     *\n     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n     * const input = tf.input({shape: [2, 2]});\n     * const output1 = flattenLayer.apply(input);\n     *\n     * // output1.shape is [null, 4]. The first dimension is the undetermined\n     * // batch size. The second dimension comes from flattening the [2, 2]\n     * // shape.\n     * console.log(JSON.stringify(output1.shape));\n     *\n     * // The output SymbolicTensor of the flatten layer can be used to call\n     * // the apply() of the dense layer:\n     * const output2 = denseLayer.apply(output1);\n     *\n     * // output2.shape is [null, 1]. The first dimension is the undetermined\n     * // batch size. The second dimension matches the number of units of the\n     * // dense layer.\n     * console.log(JSON.stringify(output2.shape));\n     *\n     * // The input and output and be used to construct a model that consists\n     * // of the flatten and dense layers.\n     * const model = tf.model({inputs: input, outputs: output2});\n     * ```\n     *\n     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n     * @param kwargs Additional keyword arguments to be passed to `call()`.\n     *\n     * @return Output of the layer's `call` method.\n     *\n     * @exception ValueError error in case the layer is missing shape information\n     *   for its `build` call.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    // Porting Note: This is a replacement for __call__() in Python.\n    apply(inputs, kwargs) {\n        kwargs = kwargs || {};\n        this.assertNotDisposed();\n        // Ensure inputs are all the same type.\n        const inputsList = generic_utils.toList(inputs);\n        let allAreSymbolic = true;\n        for (const input of inputsList) {\n            if (!(input instanceof SymbolicTensor)) {\n                allAreSymbolic = false;\n                break;\n            }\n        }\n        let noneAreSymbolic = true;\n        for (const input of inputsList) {\n            if (input instanceof SymbolicTensor) {\n                noneAreSymbolic = false;\n                break;\n            }\n        }\n        if (allAreSymbolic === noneAreSymbolic) {\n            throw new ValueError('Arguments to apply() must be all ' +\n                'SymbolicTensors or all Tensors');\n        }\n        // TODO(michaelterry): nameScope() may not be necessary.\n        return nameScope(this.name, () => {\n            // Handle laying building (weight creating, input spec locking).\n            if (!this.built) {\n                /*\n                  Throw exceptions in case the input is not compatible\n                  with the inputSpec specified in the layer constructor.\n                 */\n                this.assertInputCompatibility(inputs);\n                // Collect input shapes to build layer.\n                const inputShapes = [];\n                for (const xElem of generic_utils.toList(inputs)) {\n                    inputShapes.push(xElem.shape);\n                }\n                this.build(generic_utils.singletonOrArray(inputShapes));\n                this.built = true;\n                // Load weights that were specified at layer instantiation.\n                if (this.initialWeights) {\n                    this.setWeights(this.initialWeights);\n                }\n                if (this._refCount === null && noneAreSymbolic) {\n                    // The first use of this layer is a non-symbolic call, set ref count\n                    // to 1 so the Layer can be properly disposed if its dispose() method\n                    // is called.\n                    this._refCount = 1;\n                }\n            }\n            /*\n              Throw exceptions in case the input is not compatible\n              with the inputSpec set at build time.\n            */\n            this.assertInputCompatibility(inputs);\n            // Handle mask propagation.\n            // TODO(michaelterry): Mask propagation not currently implemented.\n            // Actually call the layer, collecting output(s), mask(s), and shape(s).\n            if (noneAreSymbolic) {\n                let output = this.call(inputs, kwargs);\n                // TODO(michaelterry): Compute the outputMask\n                // If the layer returns tensors from its inputs, unmodified,\n                // we copy them to avoid loss of tensor metadata.\n                const outputList = generic_utils.toList(output);\n                const outputListCopy = [];\n                // TODO(michaelterry): This copying may not be necessary given our eager\n                // backend.\n                for (let x of outputList) {\n                    if (inputsList.indexOf(x) !== -1) {\n                        x = x.clone();\n                    }\n                    outputListCopy.push(x);\n                }\n                output = generic_utils.singletonOrArray(outputListCopy);\n                if (this.activityRegularizer != null) {\n                    throw new NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                // TODO(michaelterry): Call addInboundNode()?\n                return output;\n            }\n            else {\n                const inputShape = collectInputShape(inputs);\n                const outputShape = this.computeOutputShape(inputShape);\n                let output;\n                const outputDType = guessOutputDType(inputs);\n                this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] :\n                    inputShape);\n                if (outputShape != null && outputShape.length > 0 &&\n                    Array.isArray(outputShape[0])) {\n                    // We have multiple output shapes. Create multiple output tensors.\n                    output = outputShape\n                        .map((shape, index) => new SymbolicTensor(outputDType, shape, this, generic_utils.toList(inputs), kwargs, this.name, index));\n                }\n                else {\n                    output = new SymbolicTensor(outputDType, outputShape, this, generic_utils.toList(inputs), kwargs, this.name);\n                }\n                /*\n                  Add an inbound node to the layer, so that it keeps track\n                  of the call and of all new variables created during the call.\n                  This also updates the layer history of the output tensor(s).\n                  If the input tensor(s) had no previous history,\n                  this does nothing.\n                */\n                this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n                this._refCount++;\n                if (this.activityRegularizer != null) {\n                    throw new NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n        });\n    }\n    /**\n     * Check compatibility between input shape and this layer's batchInputShape.\n     *\n     * Print warning if any incompatibility is found.\n     *\n     * @param inputShape Input shape to be checked.\n     */\n    warnOnIncompatibleInputShape(inputShape) {\n        if (this.batchInputShape == null) {\n            return;\n        }\n        else if (inputShape.length !== this.batchInputShape.length) {\n            console.warn(`The rank of the input tensor provided (shape: ` +\n                `${JSON.stringify(inputShape)}) does not match that of the ` +\n                `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n                `of the layer ${this.name}`);\n        }\n        else {\n            let dimMismatch = false;\n            this.batchInputShape.forEach((dimension, i) => {\n                if (dimension != null && inputShape[i] != null &&\n                    inputShape[i] !== dimension) {\n                    dimMismatch = true;\n                }\n            });\n            if (dimMismatch) {\n                console.warn(`The shape of the input tensor ` +\n                    `(${JSON.stringify(inputShape)}) does not ` +\n                    `match the expectation of layer ${this.name}: ` +\n                    `${JSON.stringify(this.batchInputShape)}`);\n            }\n        }\n    }\n    /**\n     * Retrieves the output shape(s) of a layer.\n     *\n     * Only applicable if the layer has only one inbound node, or if all inbound\n     * nodes have the same output shape.\n     *\n     * @returns Output shape or shapes.\n     * @throws AttributeError: if the layer is connected to more than one incoming\n     *   nodes.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    get outputShape() {\n        if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n            throw new AttributeError(`The layer ${this.name} has never been called and thus has no ` +\n                `defined output shape.`);\n        }\n        const allOutputShapes = [];\n        for (const node of this.inboundNodes) {\n            const shapeString = JSON.stringify(node.outputShapes);\n            if (allOutputShapes.indexOf(shapeString) === -1) {\n                allOutputShapes.push(shapeString);\n            }\n        }\n        if (allOutputShapes.length === 1) {\n            const outputShapes = this.inboundNodes[0].outputShapes;\n            if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n                outputShapes.length === 1) {\n                return outputShapes[0];\n            }\n            else {\n                return outputShapes;\n            }\n        }\n        else {\n            throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different ` +\n                `output shapes. Hence the notion of \"output shape\" is ill-defined ` +\n                `for the layer.`);\n            // TODO(cais): Implement getOutputShapeAt().\n        }\n    }\n    /**\n     * Counts the total number of numbers (e.g., float32, int32) in the\n     * weights.\n     *\n     * @returns An integer count.\n     * @throws RuntimeError: If the layer is not built yet (in which case its\n     *   weights are not defined yet.)\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    countParams() {\n        if (!this.built) {\n            throw new RuntimeError(`You tried to call countParams() on ${this.name}, ` +\n                `but the layer is not built yet. Build it first by calling ` +\n                `build(batchInputShape).`);\n        }\n        return variable_utils.countParamsInWeights(this.weights);\n    }\n    /**\n     * Creates the layer weights.\n     *\n     * Must be implemented on all layers that have weights.\n     *\n     * Called when apply() is called to construct the weights.\n     *\n     * @param inputShape A `Shape` or array of `Shape` (unused).\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    build(inputShape) {\n        this.built = true;\n    }\n    /**\n     * Returns the current values of the weights of the layer.\n     *\n     * @param trainableOnly Whether to get the values of only trainable weights.\n     * @returns Weight values as an `Array` of `tf.Tensor`s.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    getWeights(trainableOnly = false) {\n        return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n    }\n    /**\n     * Sets the weights of the layer, from Tensors.\n     *\n     * @param weights a list of Tensors. The number of arrays and their shape\n     *   must match number of the dimensions of the weights of the layer (i.e.\n     *   it should match the output of `getWeights`).\n     *\n     * @exception ValueError If the provided weights list does not match the\n     *   layer's specifications.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    setWeights(weights) {\n        tidy(() => {\n            const params = this.weights;\n            if (params.length !== weights.length) {\n                // TODO(cais): Restore the following and use `providedWeights`, instead\n                // of `weights` in the error message, once the deeplearn.js bug is\n                // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n                // providedWeights = JSON.stringify(weights).slice(0, 50);\n                throw new ValueError(`You called setWeights(weights) on layer \"${this.name}\" ` +\n                    `with a weight list of length ${weights.length}, ` +\n                    `but the layer was expecting ${params.length} weights. ` +\n                    `Provided weights: ${weights}...`);\n            }\n            if (params.length === 0) {\n                return;\n            }\n            const weightValueTuples = [];\n            const paramValues = batchGetValue(params);\n            for (let i = 0; i < paramValues.length; ++i) {\n                const pv = paramValues[i];\n                const p = params[i];\n                const w = weights[i];\n                if (!util.arraysEqual(pv.shape, w.shape)) {\n                    throw new ValueError(`Layer weight shape ${pv.shape} ` +\n                        `not compatible with provided weight shape ${w.shape}`);\n                }\n                weightValueTuples.push([p, w]);\n            }\n            batchSetValue(weightValueTuples);\n        });\n    }\n    /**\n     * Adds a weight variable to the layer.\n     *\n     * @param name Name of the new weight variable.\n     * @param shape The shape of the weight.\n     * @param dtype The dtype of the weight.\n     * @param initializer An initializer instance.\n     * @param regularizer A regularizer instance.\n     * @param trainable Whether the weight should be trained via backprop or not\n     *   (assuming that the layer itself is also trainable).\n     * @param constraint An optional trainable.\n     * @return The created weight variable.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    addWeight(name, shape, dtype, initializer, regularizer, trainable, constraint, getInitializerFunc) {\n        // Reject duplicate weight names.\n        if (this._addedWeightNames.indexOf(name) !== -1) {\n            throw new ValueError(`Duplicate weight name ${name} for layer ${this.name}`);\n        }\n        this._addedWeightNames.push(name);\n        if (dtype == null) {\n            dtype = 'float32';\n        }\n        if (this.fastWeightInitDuringBuild) {\n            initializer = getInitializerFunc != null ? getInitializerFunc() :\n                getInitializer('zeros');\n        }\n        const initValue = initializer.apply(shape, dtype);\n        const weight = new LayerVariable(initValue, dtype, name, trainable, constraint);\n        initValue.dispose();\n        // Request backend not to dispose the weights of the model on scope() exit.\n        if (regularizer != null) {\n            this.addLoss(() => regularizer.apply(weight.read()));\n        }\n        if (trainable == null) {\n            trainable = true;\n        }\n        if (trainable) {\n            this._trainableWeights.push(weight);\n        }\n        else {\n            this._nonTrainableWeights.push(weight);\n        }\n        return weight;\n    }\n    /**\n     * Set the fast-weight-initialization flag.\n     *\n     * In cases where the initialized weight values will be immediately\n     * overwritten by loaded weight values during model loading, setting\n     * the flag to `true` saves unnecessary calls to potentially expensive\n     * initializers and speeds up the loading process.\n     *\n     * @param value Target value of the flag.\n     */\n    setFastWeightInitDuringBuild(value) {\n        this.fastWeightInitDuringBuild = value;\n    }\n    /**\n     * Add losses to the layer.\n     *\n     * The loss may potentionally be conditional on some inputs tensors,\n     * for instance activity losses are conditional on the layer's inputs.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    addLoss(losses) {\n        if (losses == null || Array.isArray(losses) && losses.length === 0) {\n            return;\n        }\n        // Update this.losses\n        losses = generic_utils.toList(losses);\n        if (this._losses !== undefined && this._losses !== null) {\n            this.losses.push(...losses);\n        }\n    }\n    /**\n     * Computes the output shape of the layer.\n     *\n     * Assumes that the layer will be built to match that input shape provided.\n     *\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\n     *   (one per output tensor of the layer). Shape tuples can include null for\n     *   free dimensions, instead of an integer.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    /**\n     * Computes an output mask tensor.\n     *\n     * @param inputs Tensor or list of tensors.\n     * @param mask Tensor or list of tensors.\n     *\n     * @return null or a tensor (or list of tensors, one per output tensor of the\n     * layer).\n     */\n    computeMask(inputs, mask) {\n        if (!this.supportsMasking) {\n            if (mask != null) {\n                if (Array.isArray(mask)) {\n                    mask.forEach(maskElement => {\n                        if (maskElement != null) {\n                            throw new TypeError(`Layer ${this.name} does not support masking, ` +\n                                'but was passed an inputMask.');\n                        }\n                    });\n                }\n                else {\n                    throw new TypeError(`Layer ${this.name} does not support masking, ` +\n                        'but was passed an inputMask.');\n                }\n            }\n            // masking not explicitly supported: return null as mask\n            return null;\n        }\n        // if masking is explictly supported, by default\n        // carry over the input mask\n        return mask;\n    }\n    /**\n     * Internal method to create an inbound node for the layer.\n     *\n     * @param inputTensors List of input tensors.\n     * @param outputTensors List of output tensors.\n     * @param inputMasks List of input masks (a mask can be a tensor, or null).\n     * @param outputMasks List of output masks (a mask can be a tensor, or null).\n     * @param inputShapes List of input shape tuples.\n     * @param outputShapes List of output shape tuples.\n     * @param kwargs Dictionary of keyword arguments that were passed to the\n     *   `call` method of the layer at the call that created the node.\n     */\n    addInboundNode(inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs = null) {\n        const inputTensorList = generic_utils.toList(inputTensors);\n        outputTensors = generic_utils.toList(outputTensors);\n        inputMasks = generic_utils.toList(inputMasks);\n        outputMasks = generic_utils.toList(outputMasks);\n        inputShapes = types_utils.normalizeShapeList(inputShapes);\n        outputShapes = types_utils.normalizeShapeList(outputShapes);\n        // Collect input tensor(s) coordinates.\n        const inboundLayers = [];\n        const nodeIndices = [];\n        const tensorIndices = [];\n        for (const x of inputTensorList) {\n            /*\n             * TODO(michaelterry): Keras adds this value to tensors; it's not\n             * clear whether we'll use this or not.\n             */\n            inboundLayers.push(x.sourceLayer);\n            nodeIndices.push(x.nodeIndex);\n            tensorIndices.push(x.tensorIndex);\n        }\n        // Create node, add it to inbound nodes.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers,\n            nodeIndices,\n            tensorIndices,\n            inputTensors: inputTensorList,\n            outputTensors,\n            inputMasks,\n            outputMasks,\n            inputShapes,\n            outputShapes\n        }, kwargs);\n        // Update tensor history\n        for (let i = 0; i < outputTensors.length; i++) {\n            // TODO(michaelterry: _uses_learning_phase not tracked.\n            outputTensors[i].sourceLayer = this;\n            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n            outputTensors[i].tensorIndex = i;\n        }\n    }\n    /**\n     * Returns the config of the layer.\n     *\n     * A layer config is a TS dictionary (serializable)\n     * containing the configuration of a layer.\n     * The same layer can be reinstantiated later\n     * (without its trained weights) from this configuration.\n     *\n     * The config of a layer does not include connectivity\n     * information, nor the layer class name.  These are handled\n     * by 'Container' (one layer of abstraction above).\n     *\n     * Porting Note: The TS dictionary follows TS naming standrds for\n     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n     * should use a helper function to convert to the pythonic storage\n     * standard. (see serialization_utils.convertTsToPythonic)\n     *\n     * @returns TS dictionary of configuration.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    getConfig() {\n        const config = { name: this.name, trainable: this.trainable };\n        if (this.batchInputShape != null) {\n            config['batchInputShape'] = this.batchInputShape;\n        }\n        if (this.dtype != null) {\n            config['dtype'] = this.dtype;\n        }\n        return config;\n    }\n    /**\n     * Dispose the weight variables that this Layer instance holds.\n     *\n     * @returns {number} Number of disposed variables.\n     */\n    disposeWeights() {\n        this.weights.forEach(weight => weight.dispose());\n        return this.weights.length;\n    }\n    assertNotDisposed() {\n        if (this._refCount === 0) {\n            throw new Error(`Layer '${this.name}' is already disposed.`);\n        }\n    }\n    /**\n     * Attempt to dispose layer's weights.\n     *\n     * This method decrease the reference count of the Layer object by 1.\n     *\n     * A Layer is reference-counted. Its reference count is incremented by 1\n     * the first item its `apply()` method is called and when it becomes a part\n     * of a new `Node` (through calling the `apply()`) method on a\n     * `tf.SymbolicTensor`).\n     *\n     * If the reference count of a Layer becomes 0, all the weights will be\n     * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n     * will be freed.\n     *\n     * Note: If the reference count is greater than 0 after the decrement, the\n     * weights of the Layer will *not* be disposed.\n     *\n     * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n     * `getWeights()` or `setWeights()` anymore.\n     *\n     * @returns A DisposeResult Object with the following fields:\n     *   - refCountAfterDispose: The reference count of the Container after this\n     *     `dispose()` call.\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n     *     during this `dispose()` call.\n     * @throws {Error} If the layer is not built yet, or if the layer has already\n     *   been disposed.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    dispose() {\n        if (!this.built) {\n            throw new Error(`Cannot dispose Layer ${this.name} because it has not been ` +\n                `built yet.`);\n        }\n        if (this._refCount === null) {\n            throw new Error(`Cannot dispose Layer ${this.name} because it has not been used ` +\n                `yet.`);\n        }\n        this.assertNotDisposed();\n        let numDisposedVariables = 0;\n        if (--this._refCount === 0) {\n            numDisposedVariables = this.disposeWeights();\n        }\n        return { refCountAfterDispose: this._refCount, numDisposedVariables };\n    }\n}\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors) {\n    inputTensors =\n        generic_utils.toList(inputTensors);\n    const shapes = [];\n    for (const x of inputTensors) {\n        shapes.push(x.shape);\n    }\n    return generic_utils.singletonOrArray(shapes);\n}\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors) {\n    return 'float32';\n}\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(tensor, layer, nodeIndex) {\n    if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n        layer = tensor.sourceLayer;\n        nodeIndex = tensor.nodeIndex;\n    }\n    if (layer.inboundNodes.length === 0) {\n        return [tensor];\n    }\n    else {\n        const node = layer.inboundNodes[nodeIndex];\n        if (node.inboundLayers.length === 0) {\n            return node.inputTensors;\n        }\n        else {\n            const sourceTensors = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n                const x = node.inputTensors[i];\n                const layer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const previousSources = getSourceInputs(x, layer, nodeIndex);\n                // Avoid input redundancy.\n                for (const x of previousSources) {\n                    if (sourceTensors.indexOf(x) === -1) {\n                        sourceTensors.push(x);\n                    }\n                }\n            }\n            return sourceTensors;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { ValueError } from '../errors';\nimport { Layer, Node, SymbolicTensor } from './topology';\nexport class InputLayer extends Layer {\n    constructor(args) {\n        super({\n            dtype: args.dtype,\n            name: args.name != null ? args.name : getUid('input').toString()\n        });\n        // Normalize config.batchSize and config.sparse\n        if (args.batchSize == null) {\n            args.batchSize = null;\n        }\n        if (args.sparse == null) {\n            args.sparse = false;\n        }\n        this.trainable = false;\n        this.built = true;\n        this.sparse = args.sparse;\n        if (args.inputShape != null && args.batchInputShape != null) {\n            throw new ValueError('Only provide the inputShape OR ' +\n                'batchInputShape argument to inputLayer, not both at the same time.');\n        }\n        let batchInputShape = args.batchInputShape;\n        if (batchInputShape == null) {\n            if (args.inputShape == null) {\n                throw new ValueError('An InputLayer should be passed either a ' +\n                    '`batchInputShape` or an `inputShape`.');\n            }\n            else {\n                batchInputShape = [args.batchSize].concat(args.inputShape);\n            }\n        }\n        else {\n            // TODO(michaelterry): Backport to PyKeras\n            if (args.batchSize != null) {\n                throw new ValueError('Cannot specify batchSize if batchInputShape is ' +\n                    'specified when creating an InputLayer.');\n            }\n        }\n        const dtype = args.dtype || 'float32';\n        this.batchInputShape = batchInputShape;\n        this.dtype = dtype;\n        // TODO(michaelterry): Backport this to PyKeras?\n        this.inputSpec = [{ shape: batchInputShape }];\n        const inputTensor = new SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);\n        inputTensor.nodeIndex = 0;\n        inputTensor.tensorIndex = 0;\n        // Create an input node to add to this.outboundNode.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: [inputTensor],\n            outputTensors: [inputTensor],\n            inputMasks: [null],\n            outputMasks: [null],\n            inputShapes: [batchInputShape],\n            outputShapes: [batchInputShape]\n        });\n    }\n    apply(inputs, kwargs) {\n        throw new ValueError('Cannot pass any input to an ' +\n            `InputLayer's apply() method. InputLayer name: ${this.name}`);\n    }\n    dispose() {\n        // dispose() for InputLayer is overridden as no-op.\n        return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };\n    }\n    getConfig() {\n        return {\n            batchInputShape: this.batchInputShape,\n            dtype: this.dtype,\n            sparse: this.sparse,\n            name: this.name\n        };\n    }\n}\n/** @nocollapse */\nInputLayer.className = 'InputLayer';\nserialization.registerClass(InputLayer);\nexport function Input(config) {\n    if (config.batchShape == null && config.shape == null) {\n        throw new Error('Please provide to Input either a `shape`' +\n            ' or a `batchShape` argument. Note that ' +\n            '`shape` does not include the batch ' +\n            'dimension.');\n    }\n    if (config.batchShape != null && config.shape != null) {\n        // TODO(michaelterry): Backport to PyKeras.\n        throw new ValueError('Please provide either a `shape` or `batchShape` ' +\n            'argument to Input, but not both.');\n    }\n    let batchShape = config.batchShape;\n    if (config.shape != null && batchShape == null) {\n        batchShape = [null].concat(config.shape);\n    }\n    let dtype = config.dtype;\n    if (dtype == null) {\n        dtype = 'float32';\n    }\n    const inputLayer = new InputLayer({\n        batchInputShape: batchShape,\n        name: config.name,\n        dtype,\n        sparse: config.sparse\n    });\n    const outputs = inputLayer.inboundNodes[0].outputTensors;\n    return outputs[0];\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\nimport { LruCache } from '../utils/executor_utils';\nimport { toList } from '../utils/generic_utils';\nimport { InputLayer } from './input_layer';\nimport { SymbolicTensor } from './topology';\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key, val) {\n    // Check dtype compatibility.\n    if (key.dtype == null || key.dtype === val.dtype) {\n        //  a.  If types match, return val tensor as is.\n        return val;\n    }\n    try {\n        //  b. Attempt to convert to expected type.\n        return cast(val, key.dtype);\n    }\n    catch (err) {\n        //  c. If conversion fails, return helpful error.\n        throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n            `of the key '${key.name}' (${key.dtype}).`);\n    }\n}\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n    /**\n     * Constructor, optionally does copy-construction.\n     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n     *   copy-construction will be performed.\n     */\n    constructor(feeds) {\n        this.id2Value = {};\n        this.id2Mask = {};\n        this.name2Id = {};\n        if (feeds instanceof FeedDict) {\n            for (const id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n                if (id in feeds.id2Mask) {\n                    this.id2Mask[id] = feeds.id2Mask[id];\n                }\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (const feed of feeds) {\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    /**\n     * Add a key-value pair to the FeedDict.\n     *\n     * @param key The key of the feed.\n     * @param value The value of the tensor feed.\n     * @param mask The value of the mask feed (optional).\n     * @returns This `FeedDict`.\n     * @throws ValueError: If the key `SymbolicTensor` already exists in the\n     *   `FeedDict`.\n     */\n    add(key, value, mask) {\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = assertFeedCompatibility(key, value);\n            this.name2Id[key.name] = key.id;\n            if (mask != null) {\n                this.id2Mask[key.id] = mask;\n            }\n        }\n        else {\n            throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n        }\n        return this;\n    }\n    /**\n     * Add a Feed to the FeedDict.\n     * @param feed The new `Feed` to add.\n     * @returns This `FeedDict`.\n     */\n    addFeed(feed) {\n        this.add(feed.key, feed.value);\n    }\n    /**\n     * Probe whether a key already exists in the FeedDict.\n     * @param key\n     */\n    hasKey(key) {\n        return this.id2Value[key.id] != null;\n    }\n    /**\n     * Get all the SymbolicTensor available in this FeedDict.\n     */\n    names() {\n        return Object.keys(this.name2Id);\n    }\n    /**\n     * Get the feed value for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed value.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getValue(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Value[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Value[id];\n        }\n    }\n    /**\n     * Get the feed mask for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed mask.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getMask(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Mask[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Mask[id];\n        }\n    }\n    /** Dispose all mask Tensors held by this object. */\n    disposeMasks() {\n        if (this.id2Mask != null) {\n            dispose(this.id2Mask);\n        }\n    }\n}\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nexport const cachedSorted = new LruCache();\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nexport const cachedRecipientCounts = new LruCache();\nexport function updateCacheMaxEntries(maxEntries) {\n    if (cachedSorted != null) {\n        cachedSorted.setMaxEntries(maxEntries);\n    }\n    if (cachedRecipientCounts != null) {\n        cachedRecipientCounts.setMaxEntries(maxEntries);\n    }\n}\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(fetches, feedDict, kwargs, probe) {\n    const training = kwargs == null ? false : kwargs['training'];\n    const arrayFetches = Array.isArray(fetches);\n    const fetchArray = arrayFetches ? fetches : [fetches];\n    const outputNames = fetchArray.map(t => t.name);\n    const finalOutputs = [];\n    const feedNames = feedDict.names();\n    for (const outputName of outputNames) {\n        if (feedNames.indexOf(outputName) !== -1) {\n            finalOutputs.push(feedDict.getValue(outputName));\n        }\n        else {\n            finalOutputs.push(null);\n        }\n    }\n    if (probe != null) {\n        // For optional probing of memory footprint during execution.\n        probe.maxNumTensors = -Infinity;\n        probe.minNumTensors = Infinity;\n    }\n    // Check cache.\n    const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().sort().join(',');\n    let sorted = cachedSorted.get(fetchAndFeedKey);\n    let recipientCounts;\n    if (sorted == null) {\n        // Cache doesn't contain the desired combination of fetches. Compute\n        // topological sort for the combination for the first time.\n        const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n        sorted = out.sorted;\n        recipientCounts = out.recipientCounts;\n        // Store results in cache for future use.\n        cachedSorted.put(fetchAndFeedKey, sorted);\n        cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);\n    }\n    recipientCounts = {};\n    if (!training) {\n        Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));\n    }\n    const internalFeedDict = new FeedDict(feedDict);\n    // Start iterative execution on the topologically-sorted SymbolicTensors.\n    for (let i = 0; i < sorted.length; ++i) {\n        if (probe != null) {\n            // For optional probing of memory usage during execution.\n            const numTensors = memory().numTensors;\n            if (numTensors > probe.maxNumTensors) {\n                probe.maxNumTensors = numTensors;\n            }\n            if (numTensors < probe.minNumTensors) {\n                probe.minNumTensors = numTensors;\n            }\n        }\n        const symbolic = sorted[i];\n        const srcLayer = symbolic.sourceLayer;\n        if (srcLayer instanceof InputLayer) {\n            continue;\n        }\n        const inputValues = [];\n        const inputMasks = [];\n        const tensorsToDispose = [];\n        let maskExists = false;\n        for (const input of symbolic.inputs) {\n            const value = internalFeedDict.getValue(input);\n            const mask = internalFeedDict.getMask(input);\n            inputValues.push(value);\n            inputMasks.push(mask);\n            if (mask != null) {\n                maskExists = true;\n            }\n            if (!training) {\n                recipientCounts[input.name]--;\n                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n                    outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n                    input.sourceLayer.stateful !== true) {\n                    tensorsToDispose.push(value);\n                }\n            }\n        }\n        if (maskExists) {\n            kwargs = kwargs || {};\n            kwargs['mask'] = inputMasks[0];\n        }\n        const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n        let outputMask = null;\n        if (srcLayer.supportsMasking) {\n            outputMask = srcLayer.computeMask(inputValues, inputMasks);\n        }\n        const layerOutputs = getNodeOutputs(symbolic);\n        const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n        for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n            if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n                internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n            }\n            const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n            if (index !== -1) {\n                finalOutputs[index] = outputTensors[i];\n            }\n        }\n        if (!training) {\n            // Clean up Tensors that are no longer needed.\n            dispose(tensorsToDispose);\n        }\n    }\n    // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n    // tensors as we go, because these tensors are sometimes passed over a\n    // series of mutliple layers, i.e., not obeying the immediate input\n    // relations in the graph. If this becomes a memory-usage concern,\n    // we can improve this in the future.\n    internalFeedDict.disposeMasks();\n    return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n    util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n    let finalSorted = [];\n    let finalRecipientMap = {};\n    if (fetches.length === 1) {\n        // Special-casing 1 fetch for efficiency.\n        const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n        finalSorted = out.sorted;\n        finalRecipientMap = out.recipientMap;\n    }\n    else {\n        const visited = new Set();\n        for (const fetch of fetches) {\n            const { sorted, recipientMap } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n            // Merge sorted SymbolicTensor Arrays.\n            for (const symbolicTensor of sorted) {\n                if (!visited.has(symbolicTensor.name)) {\n                    finalSorted.push(symbolicTensor);\n                    visited.add(symbolicTensor.name);\n                }\n            }\n            // Merge recipient maps.\n            for (const name in recipientMap) {\n                if (finalRecipientMap[name] == null) {\n                    finalRecipientMap[name] = new Set();\n                }\n                recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));\n            }\n        }\n    }\n    return {\n        sorted: finalSorted,\n        recipientCounts: recipientMap2Counts(finalRecipientMap)\n    };\n}\nfunction recipientMap2Counts(recipientMap) {\n    const recipientCounts = {};\n    for (const name in recipientMap) {\n        recipientCounts[name] = recipientMap[name].size;\n    }\n    return recipientCounts;\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n    const visited = new Set();\n    const sorted = [];\n    const recipientMap = {};\n    // Put keys of the feedDict into visited first, so they don't have to be\n    // walked. This is needed in case where there are feeds for intermediate\n    // SymbolicTensors of the graph.\n    for (const key of feedDict.names()) {\n        visited.add(key);\n    }\n    const stack = [];\n    const marks = [];\n    // Initial population of stack and marks.\n    stack.push(fetch);\n    while (stack.length > 0) {\n        const top = stack[stack.length - 1];\n        if (visited.has(top.name)) {\n            stack.pop();\n            continue;\n        }\n        const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n        if (top.inputs.length === 0 || topIsMarked) {\n            // Input SymbolicTensor or all children have been visited.\n            stack.pop();\n            sorted.push(top);\n            visited.add(top.name);\n            if (topIsMarked) {\n                marks.pop();\n            }\n        }\n        else {\n            // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n            // been visited yet. Push them onto the stack.\n            marks.push(stack.length - 1);\n            for (const input of top.inputs) {\n                // Increment the recipient count. Note that this needs to happen\n                // regardless of whether the SymbolicTensor has been visited before.\n                if (recipientMap[input.name] == null) {\n                    recipientMap[input.name] = new Set();\n                }\n                recipientMap[input.name].add(top.name);\n                if (visited.has(input.name)) {\n                    continue; // Avoid repeated visits to the same SymbolicTensor.\n                }\n                stack.push(input);\n            }\n        }\n    }\n    return { sorted, recipientMap };\n}\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch) {\n    let layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        let nodeIndex = null;\n        for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n                .outputTensors) {\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { updateCacheMaxEntries } from './engine/executor';\nexport const ENV = env();\n/** The max number of entries for the caches of layers' topological sort. */\nENV.registerFlag('TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES', () => 100, updateCacheMaxEntries);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3NfbGF5ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2ZsYWdzX2xheWVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFMUMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFeEQsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBRXpCLDRFQUE0RTtBQUM1RSxHQUFHLENBQUMsWUFBWSxDQUNaLG9DQUFvQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2Vudn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHt1cGRhdGVDYWNoZU1heEVudHJpZXN9IGZyb20gJy4vZW5naW5lL2V4ZWN1dG9yJztcblxuZXhwb3J0IGNvbnN0IEVOViA9IGVudigpO1xuXG4vKiogVGhlIG1heCBudW1iZXIgb2YgZW50cmllcyBmb3IgdGhlIGNhY2hlcyBvZiBsYXllcnMnIHRvcG9sb2dpY2FsIHNvcnQuICovXG5FTlYucmVnaXN0ZXJGbGFnKFxuICAgICdUT1BPTE9HSUNBTF9TT1JUX0NBQ0hFX01BWF9FTlRSSUVTJywgKCkgPT4gMTAwLCB1cGRhdGVDYWNoZU1heEVudHJpZXMpO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\nexport class MaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMaxValue = 2;\n        this.defaultAxis = 0;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.clipByValue(norms, 0, this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return { maxValue: this.maxValue, axis: this.axis };\n    }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultAxis = 0;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n    }\n    getConfig() {\n        return { axis: this.axis };\n    }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n    apply(w) {\n        return tfc.relu(w);\n    }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMinValue = 0.0;\n        this.defaultMaxValue = 1.0;\n        this.defaultRate = 1.0;\n        this.defaultAxis = 0;\n        this.minValue =\n            args.minValue != null ? args.minValue : this.defaultMinValue;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.rate = args.rate != null ? args.rate : this.defaultRate;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBUyxNQUFNLHVCQUF1QixDQUFDO0FBV3REOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUFDLElBQW9CO0lBQzdELElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtRQUNoQixPQUFPO0tBQ1I7SUFDRCxNQUFNLFFBQVEsR0FBdUQsRUFBRSxDQUFDO0lBQ3hFLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixNQUFNLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztJQUN0QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztLQUNGO0lBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtRQUNELHVDQUF1QztRQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUMzQjtBQUNILENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUFvQjtJQUN2RCxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDaEIsT0FBTztLQUNSO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNqQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7ZGlzcG9zZSwgU2NhbGFyfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG4vKipcbiAqIExvZ3MgaW4gd2hpY2ggdmFsdWVzIGNhbiBiZSBlaXRoZXIgbnVtYmVycyBvciBUZW5zb3JzIChTY2FsYXJzKS5cbiAqXG4gKiBVc2VkIGludGVybmFsbHkuXG4gKi9cbmV4cG9ydCB0eXBlIFVucmVzb2x2ZWRMb2dzID0ge1xuICBba2V5OiBzdHJpbmddOiBudW1iZXJ8U2NhbGFyO1xufTtcblxuLyoqXG4gKiBUdXJuIGFueSBTY2FsYXIgdmFsdWVzIGluIGEgTG9ncyBvYmplY3QgaW50byBhY3R1YWwgbnVtYmVyIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gbG9ncyBUaGUgYExvZ3NgIG9iamVjdCB0byBiZSByZXNvbHZlZCBpbiBwbGFjZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVTY2FsYXJzSW5Mb2dzKGxvZ3M6IFVucmVzb2x2ZWRMb2dzKSB7XG4gIGlmIChsb2dzID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcHJvbWlzZXM6IEFycmF5PFByb21pc2U8RmxvYXQzMkFycmF5fEludDMyQXJyYXl8VWludDhBcnJheT4+ID0gW107XG4gIGNvbnN0IGtleXM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IHNjYWxhcnNUb0Rpc3Bvc2U6IFNjYWxhcltdID0gW107XG4gIGZvciAoY29uc3Qga2V5IGluIGxvZ3MpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGxvZ3Nba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgdmFsdWVTY2FsYXIgPSB2YWx1ZTtcbiAgICAgIHByb21pc2VzLnB1c2godmFsdWVTY2FsYXIuZGF0YSgpKTtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgc2NhbGFyc1RvRGlzcG9zZS5wdXNoKHZhbHVlU2NhbGFyKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxvZ3Nba2V5c1tpXV0gPSB2YWx1ZXNbaV1bMF07XG4gICAgfVxuICAgIC8vIERpc3Bvc2UgdGhlIG9yaWdpbmFsIHNjYWxhciB0ZW5zb3JzLlxuICAgIGRpc3Bvc2Uoc2NhbGFyc1RvRGlzcG9zZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwb3NlIGFsbCBUZW5zb3JzIGluIGFuIFVucmVzb2x2ZWRMb2dzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbG9ncyBBbiBgVW5yZXNvbHZlZExvZ3NgIG9iamVjdCBwb3RlbnRpYWxseSBjb250YWluaW5nIGB0Zi5UZW5zb3JgcyBpblxuICogICBwbGFjZXMgd2hlcmUgdGhlIHZhbHVlcyBjYW4gYmUgYHRmLlRlbnNvcmAgb3IgYG51bWJlcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlVGVuc29yc0luTG9ncyhsb2dzOiBVbnJlc29sdmVkTG9ncykge1xuICBpZiAobG9ncyA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGxvZ3MpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGxvZ3Nba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIExvZ3MgaW4gd2hpY2ggdmFsdWVzIGNhbiBvbmx5IGJlIG51bWJlcnMuXG4gKlxuICogVXNlZCB3aGVuIGNhbGxpbmcgY2xpZW50LXByb3ZpZGVkIGN1c3RvbSBjYWxsYmFja3MuXG4gKi9cbmV4cG9ydCB0eXBlIExvZ3MgPSB7XG4gIFtrZXk6IHN0cmluZ106IG51bWJlcjtcbn07XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { add, div, keep, mul, nextFrame, tidy, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nimport * as generic_utils from './utils/generic_utils';\n/** Verbosity logging level when fitting a model. */\nexport var ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport class BaseCallback {\n    constructor() {\n        // TODO(michaelterry): This type is a best guess.\n        this.validationData = null;\n    }\n    setParams(params) {\n        this.params = params;\n    }\n    async onEpochBegin(epoch, logs) { }\n    async onEpochEnd(epoch, logs) { }\n    async onBatchBegin(batch, logs) { }\n    async onBatchEnd(batch, logs) { }\n    async onTrainBegin(logs) { }\n    async onTrainEnd(logs) { }\n    // LayersModel needs to call Callback.setModel(), but cannot actually depend\n    // on Callback because that creates a cyclic dependency.  Providing this no-op\n    // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n    // BaseCallback but not on Callback.  The argument is typed as `Container`\n    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n    // overrides this method and enforces that the argument is really a\n    // LayersModel.\n    setModel(model) {\n        // Do nothing. Use Callback instead of BaseCallback to track the model.\n    }\n}\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n    // TODO(cais): When the need arises, uncomment the following lines and\n    // implement the queue for time values.\n    // private deltaTBatch: number;\n    // private deltaTsBatchBegin: Array<number>;\n    // private deltaTsBatchEnd: Array<number>;\n    /**\n     * Constructor of CallbackList.\n     * @param callbacks Array of `Callback` instances.\n     * @param queueLength Queue length for keeping running statistics over\n     *   callback execution time.\n     */\n    constructor(callbacks, queueLength = 10) {\n        // TODO(cais): Make use of queueLength when implementing the queue for time\n        // values.\n        if (callbacks == null) {\n            callbacks = [];\n        }\n        this.callbacks = callbacks;\n        this.queueLength = queueLength;\n    }\n    append(callback) {\n        this.callbacks.push(callback);\n    }\n    setParams(params) {\n        for (const callback of this.callbacks) {\n            callback.setParams(params);\n        }\n    }\n    setModel(model) {\n        for (const callback of this.callbacks) {\n            callback.setModel(model);\n        }\n    }\n    /**\n     * Called at the start of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochBegin(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochBegin(epoch, logs);\n        }\n    }\n    /**\n     * Called at the end of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochEnd(epoch, logs);\n        }\n    }\n    /**\n     * Called  right before processing a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchBegin(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchBegin(batch, logs);\n        }\n    }\n    /**\n     * Called at the end of a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchEnd(batch, logs);\n        }\n    }\n    /**\n     * Called at the beginning of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainBegin(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainBegin(logs);\n        }\n    }\n    /**\n     * Called at the end of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainEnd(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainEnd(logs);\n        }\n    }\n}\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n    constructor() {\n        super();\n    }\n    async onEpochBegin(epoch) {\n        this.seen = 0;\n        this.totals = {};\n    }\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const batchSize = logs['size'] == null ? 0 : logs['size'];\n        this.seen += batchSize;\n        for (const key in logs) {\n            const value = logs[key];\n            if (typeof value === 'number') {\n                if (!this.totals.hasOwnProperty(key)) {\n                    this.totals[key] = 0;\n                }\n                this.totals[key] = this.totals[key] + value * batchSize;\n            }\n            else {\n                let oldTotalsToDispose;\n                if (key in this.totals) {\n                    oldTotalsToDispose = this.totals[key];\n                }\n                else {\n                    this.totals[key] = 0;\n                }\n                const total = tidy(() => add((this.totals[key]), mul(value, batchSize)));\n                this.totals[key] = total;\n                if (oldTotalsToDispose != null) {\n                    oldTotalsToDispose.dispose();\n                }\n            }\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs != null) {\n            for (const key of this.params['metrics']) {\n                if (this.totals[key] == null) {\n                    continue;\n                }\n                if (typeof this.totals[key] === 'number') {\n                    logs[key] = this.totals[key] / this.seen;\n                }\n                else {\n                    tidy(() => {\n                        const log = mul(div(1, this.seen), this.totals[key]);\n                        logs[key] = log;\n                        this.totals[key].dispose();\n                        keep(logs[key]);\n                    });\n                }\n            }\n        }\n    }\n}\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n    async onTrainBegin(logs) {\n        this.epoch = [];\n        this.history = {};\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        this.epoch.push(epoch);\n        for (const key in logs) {\n            if (this.history[key] == null) {\n                this.history[key] = [];\n            }\n            this.history[key].push(logs[key]);\n        }\n    }\n    /**\n     * Await the values of all losses and metrics.\n     */\n    async syncData() {\n        const promises = [];\n        const keys = [];\n        const indices = [];\n        for (const key in this.history) {\n            const valueArray = this.history[key];\n            for (let i = 0; i < valueArray.length; ++i) {\n                if (typeof valueArray[i] !== 'number') {\n                    const valueScalar = valueArray[i];\n                    promises.push(valueScalar.data());\n                    keys.push(key);\n                    indices.push(i);\n                }\n            }\n        }\n        const values = await Promise.all(promises);\n        for (let n = 0; n < values.length; ++n) {\n            const tensorToDispose = this.history[keys[n]][indices[n]];\n            tensorToDispose.dispose();\n            this.history[keys[n]][indices[n]] = values[n][0];\n        }\n    }\n}\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n    constructor(args, yieldEvery) {\n        super();\n        this.currentEpoch = 0;\n        this.nowFunc = args.nowFunc;\n        this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n        this.yieldEvery = yieldEvery || 'auto';\n        if (this.yieldEvery === 'auto') {\n            this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n        }\n        if (this.yieldEvery === 'never' && args.onYield != null) {\n            throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' +\n                'Either change `yieldEvery` or remove the callback');\n        }\n        if (util.isNumber(this.yieldEvery)) {\n            // Decorate `maybeWait` so it will be called at most once every\n            // `yieldEvery` ms.\n            this.maybeWait = generic_utils.debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc);\n        }\n        this.trainBegin = args.onTrainBegin;\n        this.trainEnd = args.onTrainEnd;\n        this.epochBegin = args.onEpochBegin;\n        this.epochEnd = args.onEpochEnd;\n        this.batchBegin = args.onBatchBegin;\n        this.batchEnd = args.onBatchEnd;\n        this.yield = args.onYield;\n    }\n    async maybeWait(epoch, batch, logs) {\n        const ps = [];\n        if (this.yield != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.yield(epoch, batch, logs));\n        }\n        ps.push(this.nextFrameFunc());\n        await Promise.all(ps);\n    }\n    async onEpochBegin(epoch, logs) {\n        this.currentEpoch = epoch;\n        if (this.epochBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.epochBegin(epoch, logs);\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        const ps = [];\n        if (this.epochEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.epochEnd(epoch, logs));\n        }\n        if (this.yieldEvery === 'epoch') {\n            ps.push(this.nextFrameFunc());\n        }\n        await Promise.all(ps);\n    }\n    async onBatchBegin(batch, logs) {\n        if (this.batchBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.batchBegin(batch, logs);\n        }\n    }\n    async onBatchEnd(batch, logs) {\n        const ps = [];\n        if (this.batchEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.batchEnd(batch, logs));\n        }\n        if (this.yieldEvery === 'batch') {\n            ps.push(this.nextFrameFunc());\n        }\n        else if (util.isNumber(this.yieldEvery)) {\n            ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n        }\n        await Promise.all(ps);\n    }\n    async onTrainBegin(logs) {\n        if (this.trainBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainBegin(logs);\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.trainEnd != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainEnd(logs);\n        }\n    }\n}\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(callbacks, yieldEvery) {\n    if (callbacks == null) {\n        callbacks = {};\n    }\n    if (callbacks instanceof BaseCallback) {\n        return [callbacks];\n    }\n    if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n        return callbacks;\n    }\n    // Convert custom callback configs to custom callback objects.\n    const callbackConfigs = generic_utils.toList(callbacks);\n    return callbackConfigs.map(callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nexport class CallbackConstructorRegistry {\n    /**\n     * Blocks public access to constructor.\n     */\n    constructor() { }\n    /**\n     * Register a tf.LayersModel.fit() callback constructor.\n     *\n     * The registered callback constructor will be used to instantiate\n     * callbacks for every tf.LayersModel.fit() call afterwards.\n     *\n     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n     *   is to be reigstered.\n     * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n     * @throws Error, if the same callbackConstructor has been registered before,\n     *   either at the same or a different `verbosityLevel`.\n     */\n    static registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n        util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n        CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n        if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n            CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n        }\n        CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n    }\n    static checkForDuplicate(callbackConstructor) {\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const constructors = CallbackConstructorRegistry.constructors[+levelName];\n            constructors.forEach(ctor => {\n                if (ctor === callbackConstructor) {\n                    throw new ValueError('Duplicate callback constructor.');\n                }\n            });\n        }\n    }\n    /**\n     * Clear all registered callback constructors.\n     */\n    static clear() {\n        CallbackConstructorRegistry.constructors = {};\n    }\n    /**\n     * Create callbacks using the registered callback constructors.\n     *\n     * Given `verbosityLevel`, all constructors registered at that level or above\n     * will be called and the instantiated callbacks will be used.\n     *\n     * @param verbosityLevel: Level of verbosity.\n     */\n    static createCallbacks(verbosityLevel) {\n        const constructors = [];\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const level = +levelName;\n            if (verbosityLevel >= level) {\n                constructors.push(...CallbackConstructorRegistry.constructors[level]);\n            }\n        }\n        return constructors.map(ctor => new ctor());\n    }\n}\nCallbackConstructorRegistry.constructors = {};\nexport function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n    const history = new History();\n    const actualCallbacks = [\n        new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n    ];\n    if (callbacks != null) {\n        actualCallbacks.push(...callbacks);\n    }\n    actualCallbacks.push(history);\n    const callbackList = new CallbackList(actualCallbacks);\n    // TODO(cais): Figure out when this LayersModel instance can have a\n    // dynamically\n    //   set property called 'callback_model' as in PyKeras.\n    callbackList.setParams({\n        epochs,\n        initialEpoch,\n        samples: numTrainSamples,\n        steps: stepsPerEpoch,\n        batchSize,\n        verbose,\n        doValidation,\n        metrics: callbackMetrics,\n    });\n    return { callbackList, history };\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source layers/__init__.py */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { deserializeKerasObject } from '../utils/generic_utils';\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\n */\nexport function deserialize(config, customObjects = {}, fastWeightInit = false) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'layer', fastWeightInit);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sYXllcnMvc2VyaWFsaXphdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVILHdDQUF3QztBQUN4QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQ3ZCLE1BQWdDLEVBQ2hDLGdCQUFnQixFQUE4QixFQUM5QyxjQUFjLEdBQUcsS0FBSztJQUN4QixPQUFPLHNCQUFzQixDQUN6QixNQUFNLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFDNUQsYUFBYSxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLyogT3JpZ2luYWwgU291cmNlIGxheWVycy9fX2luaXRfXy5weSAqL1xuaW1wb3J0IHtzZXJpYWxpemF0aW9ufSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge2Rlc2VyaWFsaXplS2VyYXNPYmplY3R9IGZyb20gJy4uL3V0aWxzL2dlbmVyaWNfdXRpbHMnO1xuXG4vKipcbiAqIEluc3RhbnRpYXRlIGEgbGF5ZXIgZnJvbSBhIGNvbmZpZyBkaWN0aW9uYXJ5LlxuICogQHBhcmFtIGNvbmZpZyBkaWN0IG9mIHRoZSBmb3JtIHtjbGFzc19uYW1lOiBzdHIsIGNvbmZpZzogZGljdH1cbiAqIEBwYXJhbSBjdXN0b21PYmplY3RzIGRpY3QgbWFwcGluZyBjbGFzcyBuYW1lcyAob3IgZnVuY3Rpb24gbmFtZXMpXG4gKiAgIG9mIGN1c3RvbSAobm9uLUtlcmFzKSBvYmplY3RzIHRvIGNsYXNzL2Z1bmN0aW9uc1xuICogQHBhcmFtIGZhc3RXZWlnaHRJbml0IE9wdGlvbmFsIGZsYWcgdG8gdXNlIGZhc3Qgd2VpZ2h0IGluaXRpYWxpemF0aW9uXG4gKiAgIGR1cmluZyBkZXNlcmlhbGl6YXRpb24uIFRoaXMgaXMgYXBwbGljYWJsZSB0byBjYXNlcyBpbiB3aGljaFxuICogICB0aGUgaW5pdGlhbGl6YXRpb24gd2lsbCBiZSBpbW1lZGlhdGVseSBvdmVyd3JpdHRlbiBieSBsb2FkZWQgd2VpZ2h0XG4gKiAgIHZhbHVlcy4gRGVmYXVsdDogYGZhbHNlYC5cbiAqIEByZXR1cm5zIExheWVyIGluc3RhbmNlIChtYXkgYmUgTGF5ZXJzTW9kZWwsIFNlcXVlbnRpYWwsIExheWVyLi4uKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemUoXG4gICAgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QsXG4gICAgY3VzdG9tT2JqZWN0cyA9IHt9IGFzIHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCxcbiAgICBmYXN0V2VpZ2h0SW5pdCA9IGZhbHNlKTogc2VyaWFsaXphdGlvbi5TZXJpYWxpemFibGUge1xuICByZXR1cm4gZGVzZXJpYWxpemVLZXJhc09iamVjdChcbiAgICAgIGNvbmZpZywgc2VyaWFsaXphdGlvbi5TZXJpYWxpemF0aW9uTWFwLmdldE1hcCgpLmNsYXNzTmFtZU1hcCxcbiAgICAgIGN1c3RvbU9iamVjdHMsICdsYXllcicsIGZhc3RXZWlnaHRJbml0KTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport { ValueError } from './errors';\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x, axis) {\n    return tidy(() => {\n        if (x.dtype !== 'float32') {\n            x = tfc.cast(x, 'float32');\n        }\n        const squareSum = tfc.sum(K.square(x), axis, true);\n        const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n        const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n        return tfc.div(x, norm);\n    });\n}\nexport function meanSquaredError(yTrue, yPred) {\n    return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsoluteError(yTrue, yPred) {\n    return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsolutePercentageError(yTrue, yPred) {\n    return tidy(() => {\n        const diff = tfc.sub(yTrue, yPred);\n        const clippedTrue = tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n        const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n        return tfc.mul(100, tfc.mean(absResult, -1));\n    });\n}\nexport function meanSquaredLogarithmicError(yTrue, yPred) {\n    return tidy(() => {\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n        const firstLog = tfc.log(tfc.add(1, clippedPred));\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n        const secondLog = tfc.log(tfc.add(1, clippedTrue));\n        return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n    });\n}\nexport function squaredHinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(K.square(maxResult), -1);\n    });\n}\nexport function hinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(maxResult, -1);\n    });\n}\nexport function categoricalHinge(yTrue, yPred) {\n    return tidy(() => {\n        const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n        const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n        return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n    });\n}\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue, yPred) {\n    return tidy(() => {\n        const log2 = Math.log(2);\n        const predictionDiff = tfc.sub(yPred, yTrue);\n        const logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))), log2);\n        return tfc.mean(logcoshResult, -1);\n    });\n}\nexport function categoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        if (fromLogits) {\n            output = tfc.softmax(output);\n        }\n        else {\n            // scale preds so that the class probabilities of each sample sum to 1.\n            const outputSum = tfc.sum(output, output.shape.length - 1, true);\n            output = tfc.div(output, outputSum);\n        }\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        return tfc.neg(tfc.sum(tfc.mul(tfc.cast(target, 'float32'), tfc.log(output)), output.shape.length - 1));\n    });\n}\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        const flatTarget = tfc.cast(tfc.floor(K.flatten(target)), 'int32');\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        const outputShape = output.shape;\n        const oneHotTarget = tfc.reshape(tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);\n        return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n    });\n}\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(labels, logits) {\n    if (!util.arraysEqual(labels.shape, logits.shape)) {\n        throw new ValueError(`logits and labels must have the same shape, but got shapes ` +\n            `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n    }\n    return tidy(() => {\n        // The logistic loss formula from above is\n        //   x - x * z + log(1 + exp(-x))\n        // For x < 0, a more numerically stable formula is\n        //   -x * z + log(1 + exp(x))\n        // Note that these two expressions can be combined into the following:\n        //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n        const reluLogits = tfc.relu(logits);\n        const negAbsLogits = tfc.neg(tfc.abs(logits));\n        return tfc.add(tfc.sub(reluLogits, tfc.mul(logits, labels)), tfc.log1p(tfc.exp(negAbsLogits)));\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return tidy(() => {\n        let y;\n        y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n        y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n        return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n    });\n}\nexport function kullbackLeiblerDivergence(yTrue, yPred) {\n    return tidy(() => {\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n        return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n    });\n}\nexport function poisson(yTrue, yPred) {\n    return tidy(() => {\n        const logPred = tfc.log(tfc.add(epsilon(), yPred));\n        return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n    });\n}\nexport function cosineProximity(yTrue, yPred) {\n    return tidy(() => {\n        const trueNormalized = l2Normalize(yTrue, -1);\n        const predNormalized = l2Normalize(yPred, -1);\n        const trueXPred = tfc.mul(trueNormalized, predNormalized);\n        return tfc.neg(tfc.sum(trueXPred, -1));\n    });\n}\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n// TODO(michaelterry): Add deserialize() function.\nexport const lossesMap = {\n    meanSquaredError,\n    meanAbsoluteError,\n    meanAbsolutePercentageError,\n    meanSquaredLogarithmicError,\n    squaredHinge,\n    hinge,\n    categoricalHinge,\n    logcosh,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    binaryCrossentropy,\n    kullbackLeiblerDivergence,\n    poisson,\n    cosineProximity\n};\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn) {\n    if (typeof identifierOrFn === 'string') {\n        if (identifierOrFn in lossesMap) {\n            return lossesMap[identifierOrFn];\n        }\n        let errMsg = `Unknown loss ${identifierOrFn}`;\n        if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n            errMsg = `Unknown loss ${identifierOrFn}. ` +\n                'Use \"categoricalCrossentropy\" as the string name for ' +\n                'tf.losses.softmaxCrossEntropy';\n        }\n        throw new ValueError(errMsg);\n    }\n    else {\n        return identifierOrFn;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n    return tidy(() => {\n        const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n    return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 1))), 'float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 0))), 'float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 0), tfc.equal(yPred, 1))), 'float32');\n    });\n}\nexport function precision(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fp = falsePositives(yTrue, yPred);\n        const denominator = tfc.add(tp, fp);\n        return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n    });\n}\nexport function recall(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fn = falseNegatives(yTrue, yPred);\n        const denominator = tfc.add(tp, fn);\n        return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = tfc.squeeze(yTrue, [yTrue.rank - 1]);\n    }\n    yPred = tfc.argMax(yPred, -1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = tfc.cast(yPred, yTrue.dtype);\n    }\n    return tfc.cast(tfc.equal(yTrue, yPred), 'float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine\n};\nexport function get(identifier) {\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new ValueError(`Unknown metric ${identifier}`);\n    }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n    util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        let fnName;\n        for (const key of Object.keys(lossesMap)) {\n            if (lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (const key of Object.keys(metricsMap)) {\n            if (metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Optimizers.\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { ValueError } from './errors';\n// Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier) {\n    const optimizerMap = {\n        'Adagrad': () => train.adagrad(0.01),\n        'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n        'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n        'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n        'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n        'SGD': () => train.sgd(0.01)\n    };\n    optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n    optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n    optimizerMap['adam'] = optimizerMap['Adam'];\n    optimizerMap['adamax'] = optimizerMap['Adamax'];\n    optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n    optimizerMap['sgd'] = optimizerMap['SGD'];\n    if (identifier in optimizerMap) {\n        return optimizerMap[identifier]();\n    }\n    throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW1pemVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9vcHRpbWl6ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUg7O0dBRUc7QUFFSCxPQUFPLEVBQVksS0FBSyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFdkQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRXpDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFcEMsc0JBQXNCO0FBRXRCLDhFQUE4RTtBQUM5RSxrREFBa0Q7QUFDbEQsTUFBTSxVQUFVLFlBQVksQ0FBQyxVQUFrQjtJQUM3QyxNQUFNLFlBQVksR0FBK0M7UUFDL0QsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3BDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDcEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDdEQsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdELFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hELEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztLQUM3QixDQUFDO0lBQ0YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFMUMsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1FBQzlCLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7S0FDbkM7SUFDRCxNQUFNLElBQUksVUFBVSxDQUFDLHFCQUFxQixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vKipcbiAqIE9wdGltaXplcnMuXG4gKi9cblxuaW1wb3J0IHtPcHRpbWl6ZXIsIHRyYWlufSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge2Vwc2lsb259IGZyb20gJy4vYmFja2VuZC9jb21tb24nO1xuXG5pbXBvcnQge1ZhbHVlRXJyb3J9IGZyb20gJy4vZXJyb3JzJztcblxuLy8gQWRkIChkZSlzZXJpYWxpemUoKVxuXG4vLyBQb3J0aW5nIG5vdGU6IFRoaXMgZGl2ZXJnZXMgZnJvbSB0aGUgUHlLZXJhcyBpbXBsZW1lbnRhdGlvbiBhbmQgbWF5IG5lZWQgdG9cbi8vIGNoYW5nZSBiYXNlZCBvbiAoZGUpc2VyaWFsaXphdGlvbiByZXF1aXJlbWVudHMuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW1pemVyKGlkZW50aWZpZXI6IHN0cmluZyk6IE9wdGltaXplciB7XG4gIGNvbnN0IG9wdGltaXplck1hcDoge1tvcHRpbWl6ZXJOYW1lOiBzdHJpbmddOiAoKSA9PiBPcHRpbWl6ZXJ9ID0ge1xuICAgICdBZGFncmFkJzogKCkgPT4gdHJhaW4uYWRhZ3JhZCgwLjAxKSxcbiAgICAnQWRhZGVsdGEnOiAoKSA9PiB0cmFpbi5hZGFkZWx0YSgxLCAwLjk1LCBlcHNpbG9uKCkpLFxuICAgICdBZGFtJzogKCkgPT4gdHJhaW4uYWRhbSgwLjAwMSwgMC45LCAwLjk5OSwgZXBzaWxvbigpKSxcbiAgICAnQWRhbWF4JzogKCkgPT4gdHJhaW4uYWRhbWF4KDAuMDAyLCAwLjksIDAuOTk5LCBlcHNpbG9uKCksIDApLFxuICAgICdSTVNQcm9wJzogKCkgPT4gdHJhaW4ucm1zcHJvcCgwLjAwMSwgMC45LCAwLCBlcHNpbG9uKCkpLFxuICAgICdTR0QnOiAoKSA9PiB0cmFpbi5zZ2QoMC4wMSlcbiAgfTtcbiAgb3B0aW1pemVyTWFwWydhZGFncmFkJ10gPSBvcHRpbWl6ZXJNYXBbJ0FkYWdyYWQnXTtcbiAgb3B0aW1pemVyTWFwWydhZGFkZWx0YSddID0gb3B0aW1pemVyTWFwWydBZGFkZWx0YSddO1xuICBvcHRpbWl6ZXJNYXBbJ2FkYW0nXSA9IG9wdGltaXplck1hcFsnQWRhbSddO1xuICBvcHRpbWl6ZXJNYXBbJ2FkYW1heCddID0gb3B0aW1pemVyTWFwWydBZGFtYXgnXTtcbiAgb3B0aW1pemVyTWFwWydybXNwcm9wJ10gPSBvcHRpbWl6ZXJNYXBbJ1JNU1Byb3AnXTtcbiAgb3B0aW1pemVyTWFwWydzZ2QnXSA9IG9wdGltaXplck1hcFsnU0dEJ107XG5cbiAgaWYgKGlkZW50aWZpZXIgaW4gb3B0aW1pemVyTWFwKSB7XG4gICAgcmV0dXJuIG9wdGltaXplck1hcFtpZGVudGlmaWVyXSgpO1xuICB9XG4gIHRocm93IG5ldyBWYWx1ZUVycm9yKGBVbmtub3duIE9wdGltaXplciAke2lkZW50aWZpZXJ9YCk7XG59XG4iXX0=","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n    if (userDefinedMetadata == null ||\n        typeof userDefinedMetadata !== 'object' ||\n        Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n        !plainObjectCheck(userDefinedMetadata)) {\n        throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n    }\n    if (checkSize) {\n        const out = JSON.stringify(userDefinedMetadata);\n        if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n            console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` +\n                `size (length=${out.length} when serialized). It is not ` +\n                `recommended to store such large objects in user-defined metadata. ` +\n                `Please make sure its serialized length is <= ` +\n                `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n        }\n    }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x) {\n    if (x === null) {\n        // Note: typeof `null` is 'object', and `null` is valid in JSON.\n        return true;\n    }\n    else if (typeof x === 'object') {\n        if (Object.getPrototypeOf(x) === Object.prototype) {\n            // `x` is a JavaScript object and its prototype is Object.\n            const keys = Object.keys(x);\n            for (const key of keys) {\n                if (typeof key !== 'string') {\n                    // JSON keys must be strings.\n                    return false;\n                }\n                if (!plainObjectCheck(x[key])) { // Recursive call.\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            // `x` is a JavaScript object but its prototype is not Object.\n            if (Array.isArray(x)) {\n                // `x` is a JavaScript array.\n                for (const item of x) {\n                    if (!plainObjectCheck(item)) { // Recursive call.\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                // `x` is a JavaScript object and its prototype is not Object,\n                // and it's not an Array. I.e., it's a complex object such as\n                // `Error` and `Date`.\n                return false;\n            }\n        }\n    }\n    else {\n        // `x` is not a JavaScript object or `null`.\n        const xType = typeof x;\n        return xType === 'string' || xType === 'number' || xType === 'boolean';\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcl9kZWZpbmVkX21ldGFkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL3VzZXJfZGVmaW5lZF9tZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVILDBEQUEwRDtBQUUxRCxpRUFBaUU7QUFDakUsZ0ZBQWdGO0FBQ2hGLFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSwyQ0FBMkMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUUzRTs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FDcEMsbUJBQXVCLEVBQUUsU0FBaUIsRUFBRSxTQUFTLEdBQUcsS0FBSztJQUMvRCxJQUFJLG1CQUFtQixJQUFJLElBQUk7UUFDM0IsT0FBTyxtQkFBbUIsS0FBSyxRQUFRO1FBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsS0FBSyxNQUFNLENBQUMsU0FBUztRQUMvRCxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLEVBQUU7UUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FDWCxvRUFBb0UsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBSSxTQUFTLEVBQUU7UUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDaEQsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLDJDQUEyQyxFQUFFO1lBQzVELE9BQU8sQ0FBQyxJQUFJLENBQ1IsbUNBQW1DLFNBQVMsb0JBQW9CO2dCQUNoRSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sK0JBQStCO2dCQUN6RCxvRUFBb0U7Z0JBQ3BFLCtDQUErQztnQkFDL0MsR0FBRywyQ0FBMkMsR0FBRyxDQUFDLENBQUM7U0FDeEQ7S0FDRjtBQUNILENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxrQ0FBa0M7QUFDbEMsTUFBTSxVQUFVLGdCQUFnQixDQUFDLENBQU07SUFDckMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2QsZ0VBQWdFO1FBQ2hFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNoQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNqRCwwREFBMEQ7WUFDMUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7b0JBQzNCLDZCQUE2QjtvQkFDN0IsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUcsa0JBQWtCO29CQUNsRCxPQUFPLEtBQUssQ0FBQztpQkFDZDthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsOERBQThEO1lBQzlELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDcEIsNkJBQTZCO2dCQUM3QixLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRTtvQkFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUcsa0JBQWtCO3dCQUNoRCxPQUFPLEtBQUssQ0FBQztxQkFDZDtpQkFDRjtnQkFDRCxPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLDhEQUE4RDtnQkFDOUQsNkRBQTZEO2dCQUM3RCxzQkFBc0I7Z0JBQ3RCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtLQUNGO1NBQU07UUFDTCw0Q0FBNEM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDdkIsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQztLQUN4RTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vKiogVXRpbGl0eSBmdW5jdGlvbnMgcmVsYXRlZCB0byB1c2VyLWRlZmluZWQgbWV0YWRhdGEuICovXG5cbi8vIE1heGltdW0gcmVjb21tZW5kZWQgc2VyaWFsaXplZCBzaXplIGZvciB1c2VyLWRlZmluZWQgbWV0YWRhdGEuXG4vLyBCZXlvbmQgdGhpcyBsaW1pdCwgYSB3YXJuaW5nIG1lc3NhZ2Ugd2lsbCBiZSBwcmludGVkIGR1cmluZyBtb2RlbCBsb2FkaW5nIGFuZFxuLy8gc2F2aW5nLlxuZXhwb3J0IGNvbnN0IE1BWF9VU0VSX0RFRklORURfTUVUQURBVEFfU0VSSUFMSVpFRF9MRU5HVEggPSAxICogMTAyNCAqIDEwMjQ7XG5cbi8qKlxuICogQ2hlY2sgdmFsaWRpdHkgb2YgdXNlci1kZWZpbmVkIG1ldGFkYXRhLlxuICpcbiAqIEBwYXJhbSB1c2VyRGVmaW5lZE1ldGFkYXRhXG4gKiBAcGFyYW0gbW9kZWxOYW1lIE5hbWUgb2YgdGhlIG1vZGVsIHRoYXQgdGhlIHVzZXItZGVmaW5lZCBtZXRhZGF0YSBiZWxvbmdzIHRvLlxuICogICBVc2VkIGR1cmluZyBjb25zdHJ1Y3Rpb24gb2YgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gY2hlY2tTaXplIFdoZXRoZXIgdG8gY2hlY2sgdGhlIHNpemUgb2YgdGhlIG1ldGFkYXRhIGlzIHVuZGVyXG4gKiAgIHJlY29tbWVuZGVkIGxpbWl0LiBEZWZhdWx0OiBgZmFsc2VgLiBJZiBgdHJ1ZWAsIHdpbGwgdHJ5IHN0cmluZ2lmeSB0aGVcbiAqICAgSlNPTiBvYmplY3QgYW5kIHByaW50IGEgY29uc29sZSB3YXJuaW5nIGlmIHRoZSBzZXJpYWx6aWVkIHNpemUgaXMgYWJvdmUgdGhlXG4gKiAgIGxpbWl0LlxuICogQHRocm93cyBFcnJvciBpZiBgdXNlckRlZmluZWRNZXRhZGF0YWAgaXMgbm90IGEgcGxhaW4gSlNPTiBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1VzZXJEZWZpbmVkTWV0YWRhdGEoXG4gICAgdXNlckRlZmluZWRNZXRhZGF0YToge30sIG1vZGVsTmFtZTogc3RyaW5nLCBjaGVja1NpemUgPSBmYWxzZSk6IHZvaWQge1xuICBpZiAodXNlckRlZmluZWRNZXRhZGF0YSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdXNlckRlZmluZWRNZXRhZGF0YSAhPT0gJ29iamVjdCcgfHxcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih1c2VyRGVmaW5lZE1ldGFkYXRhKSAhPT0gT2JqZWN0LnByb3RvdHlwZSB8fFxuICAgICAgIXBsYWluT2JqZWN0Q2hlY2sodXNlckRlZmluZWRNZXRhZGF0YSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdVc2VyLWRlZmluZWQgbWV0YWRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgYSBKU09OIG9iamVjdCwgYnV0IGlzIG5vdC4nKTtcbiAgfVxuXG4gIGlmIChjaGVja1NpemUpIHtcbiAgICBjb25zdCBvdXQgPSBKU09OLnN0cmluZ2lmeSh1c2VyRGVmaW5lZE1ldGFkYXRhKTtcbiAgICBpZiAob3V0Lmxlbmd0aCA+IE1BWF9VU0VSX0RFRklORURfTUVUQURBVEFfU0VSSUFMSVpFRF9MRU5HVEgpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgVXNlci1kZWZpbmVkIG1ldGFkYXRhIG9mIG1vZGVsIFwiJHttb2RlbE5hbWV9XCIgaXMgdG9vIGxhcmdlIGluIGAgK1xuICAgICAgICAgIGBzaXplIChsZW5ndGg9JHtvdXQubGVuZ3RofSB3aGVuIHNlcmlhbGl6ZWQpLiBJdCBpcyBub3QgYCArXG4gICAgICAgICAgYHJlY29tbWVuZGVkIHRvIHN0b3JlIHN1Y2ggbGFyZ2Ugb2JqZWN0cyBpbiB1c2VyLWRlZmluZWQgbWV0YWRhdGEuIGAgK1xuICAgICAgICAgIGBQbGVhc2UgbWFrZSBzdXJlIGl0cyBzZXJpYWxpemVkIGxlbmd0aCBpcyA8PSBgICtcbiAgICAgICAgICBgJHtNQVhfVVNFUl9ERUZJTkVEX01FVEFEQVRBX1NFUklBTElaRURfTEVOR1RIfS5gKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhbiBpbnB1dCBpcyBwbGFpbiBKU09OIG9iamVjdCBvciBhbnkgdmFsaWQgc3ViZmllbGQgb2YgaXQuXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRvIGJlIGNoZWNrZWQuXG4gKiBAcGFyYW0gYXNzZXJ0T2JqZWN0IFdoZXRoZXIgdG8gYXNzZXJ0IGB4YCBpcyBhIEpTT04gb2JqZWN0LCBpLmUuLCByZWplY3RcbiAqICAgY2FzZXMgb2YgYXJyYXlzIGFuZCBwcmltaXRpdmVzLlxuICogQHJldHVybiBSZXR1cm5zIGB0cnVlYCBpZiBhbmQgb25seSBpZiBgeGAgaXMgYSBwbGFpbiBKU09OIG9iamVjdCxcbiAqICAgYSBKU09OLXZhbGlkIHByaW1pdGl2ZSBpbmNsdWRpbmcgc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4gYW5kIG51bGwsXG4gKiAgIG9yIGFuIGFycmF5IG9mIHRoZSBzYWlkIHR5cGVzLlxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gcGxhaW5PYmplY3RDaGVjayh4OiBhbnkpOiBib29sZWFuIHtcbiAgaWYgKHggPT09IG51bGwpIHtcbiAgICAvLyBOb3RlOiB0eXBlb2YgYG51bGxgIGlzICdvYmplY3QnLCBhbmQgYG51bGxgIGlzIHZhbGlkIGluIEpTT04uXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgICAgLy8gYHhgIGlzIGEgSmF2YVNjcmlwdCBvYmplY3QgYW5kIGl0cyBwcm90b3R5cGUgaXMgT2JqZWN0LlxuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHgpO1xuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBKU09OIGtleXMgbXVzdCBiZSBzdHJpbmdzLlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBsYWluT2JqZWN0Q2hlY2soeFtrZXldKSkgeyAgLy8gUmVjdXJzaXZlIGNhbGwuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYHhgIGlzIGEgSmF2YVNjcmlwdCBvYmplY3QgYnV0IGl0cyBwcm90b3R5cGUgaXMgbm90IE9iamVjdC5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICAgIC8vIGB4YCBpcyBhIEphdmFTY3JpcHQgYXJyYXkuXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB4KSB7XG4gICAgICAgICAgaWYgKCFwbGFpbk9iamVjdENoZWNrKGl0ZW0pKSB7ICAvLyBSZWN1cnNpdmUgY2FsbC5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBgeGAgaXMgYSBKYXZhU2NyaXB0IG9iamVjdCBhbmQgaXRzIHByb3RvdHlwZSBpcyBub3QgT2JqZWN0LFxuICAgICAgICAvLyBhbmQgaXQncyBub3QgYW4gQXJyYXkuIEkuZS4sIGl0J3MgYSBjb21wbGV4IG9iamVjdCBzdWNoIGFzXG4gICAgICAgIC8vIGBFcnJvcmAgYW5kIGBEYXRlYC5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBgeGAgaXMgbm90IGEgSmF2YVNjcmlwdCBvYmplY3Qgb3IgYG51bGxgLlxuICAgIGNvbnN0IHhUeXBlID0gdHlwZW9mIHg7XG4gICAgcmV0dXJuIHhUeXBlID09PSAnc3RyaW5nJyB8fCB4VHlwZSA9PT0gJ251bWJlcicgfHwgeFR5cGUgPT09ICdib29sZWFuJztcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { countParamsInWeights } from './variable_utils';\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(model, lineLength, positions, \n// tslint:disable-next-line:no-any\nprintFn = console.log) {\n    const sequentialLike = isModelSequentialLike(model);\n    // Header names for different log elements.\n    const toDisplay = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n    if (sequentialLike) {\n        lineLength = lineLength || 90;\n        positions = positions || [0.32, 0.61, 0.89, 1];\n    }\n    else {\n        lineLength = lineLength || 115;\n        positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n        // Header names for different log elements.\n    }\n    if (positions[positions.length - 1] <= 1) {\n        // `positions` is relative. Convert it to absolute positioning.\n        positions = positions.map(p => Math.floor(lineLength * p));\n    }\n    let relevantNodes;\n    if (!sequentialLike) {\n        toDisplay.push('Receives inputs');\n        relevantNodes = [];\n        for (const depth in model.nodesByDepth) {\n            relevantNodes.push(...model.nodesByDepth[depth]);\n        }\n    }\n    printFn('_'.repeat(lineLength));\n    printRow(toDisplay, positions, printFn);\n    printFn('='.repeat(lineLength));\n    const layers = model.layers;\n    for (let i = 0; i < layers.length; ++i) {\n        if (sequentialLike) {\n            printLayerSummary(layers[i], positions, printFn);\n        }\n        else {\n            printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n        }\n        printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n    }\n    // tslint:disable-next-line:no-any\n    model.checkTrainableWeightsConsistency();\n    const trainableCount = countTrainableParams(model);\n    const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n    printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n    printFn(`Trainable params: ${trainableCount}`);\n    printFn(`Non-trainable params: ${nonTrainableCount}`);\n    printFn('_'.repeat(lineLength));\n}\nfunction countTrainableParams(model) {\n    let trainableCount;\n    // tslint:disable:no-any\n    if (model.collectedTrainableWeights != null) {\n        trainableCount =\n            countParamsInWeights(model.collectedTrainableWeights);\n    }\n    else {\n        trainableCount = countParamsInWeights(model.trainableWeights);\n    }\n    // tslint:enable:no-any\n    return trainableCount;\n}\nfunction isModelSequentialLike(model) {\n    let sequentialLike = true;\n    const nodesByDepth = [];\n    const nodes = [];\n    for (const depth in model.nodesByDepth) {\n        nodesByDepth.push(model.nodesByDepth[depth]);\n    }\n    for (const depthNodes of nodesByDepth) {\n        if (depthNodes.length > 1 ||\n            depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n            sequentialLike = false;\n            break;\n        }\n        nodes.push(...depthNodes);\n    }\n    if (sequentialLike) {\n        // Search for shared layers.\n        for (const layer of model.layers) {\n            let flag = false;\n            for (const node of layer.inboundNodes) {\n                if (nodes.indexOf(node) !== -1) {\n                    if (flag) {\n                        sequentialLike = false;\n                        break;\n                    }\n                    else {\n                        flag = true;\n                    }\n                }\n            }\n            if (!sequentialLike) {\n                break;\n            }\n        }\n    }\n    return sequentialLike;\n}\nfunction printRow(fields, positions, \n// tslint:disable-next-line:no-any\nprintFn = console.log) {\n    let line = '';\n    for (let i = 0; i < fields.length; ++i) {\n        if (i > 0) {\n            line = line.slice(0, line.length - 1) + ' ';\n        }\n        line += fields[i];\n        line = line.slice(0, positions[i]);\n        line += ' '.repeat(positions[i] - line.length);\n    }\n    printFn(line);\n}\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(layer, positions, \n// tslint:disable-next-line:no-any\nprintFn) {\n    let outputShape;\n    let inputShape;\n    try {\n        inputShape = (layer.inboundNodes.map(x => JSON.stringify(x.inputShapes))).join(',');\n    }\n    catch (err) {\n        inputShape = 'multiple';\n    }\n    try {\n        outputShape = JSON.stringify(layer.outputShape);\n    }\n    catch (err) {\n        outputShape = 'multiple';\n    }\n    const name = layer.name;\n    const className = layer.getClassName();\n    const fields = [`${name} (${className})`, inputShape,\n        outputShape, layer.countParams().toString()];\n    printRow(fields, positions, printFn);\n}\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes, \n// tslint:disable-next-line:no-any\nprintFn) {\n    let outputShape;\n    let inputShape;\n    try {\n        inputShape = (layer.inboundNodes.map(x => JSON.stringify(x.inputShapes))).join(',');\n    }\n    catch (err) {\n        inputShape = 'multiple';\n    }\n    try {\n        outputShape = JSON.stringify(layer.outputShape);\n    }\n    catch (err) {\n        outputShape = 'multiple';\n    }\n    const connections = [];\n    for (const node of layer.inboundNodes) {\n        if (relevantNodes != null && relevantNodes.length > 0 &&\n            relevantNodes.indexOf(node) === -1) {\n            continue;\n        }\n        for (let i = 0; i < node.inboundLayers.length; ++i) {\n            const inboundLayer = node.inboundLayers[i].name;\n            const inboundLayerIndex = node.nodeIndices[i];\n            const inboundTensorIndex = node.tensorIndices[i];\n            connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n        }\n    }\n    const name = layer.name;\n    const className = layer.getClassName();\n    const firstConnection = connections.length === 0 ? '' : connections[0];\n    const fields = [\n        `${name} (${className})`, inputShape,\n        outputShape, layer.countParams().toString(),\n        firstConnection\n    ];\n    printRow(fields, positions, printFn);\n    for (let i = 1; i < connections.length; ++i) {\n        printRow(['', '', '', '', connections[i]], positions, printFn);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName(key, index, value) {\n    return (key === 'inboundNodes' || key === 'outputLayers' ||\n        key === 'inputLayers') &&\n        index === 0 && typeof value === 'string';\n}\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(pythonicConfig, key) {\n    if (pythonicConfig === null) {\n        return null;\n    }\n    else if (typeof pythonicConfig === 'string') {\n        return generic_utils.toCamelCase(pythonicConfig);\n    }\n    else if ((typeof pythonicConfig === 'number') ||\n        (typeof pythonicConfig === 'boolean')) {\n        return pythonicConfig;\n    }\n    else if (pythonicConfig instanceof Array) {\n        const tsArray = [];\n        const arrayLength = pythonicConfig.length;\n        for (let i = 0; i < arrayLength; ++i) {\n            const item = pythonicConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                tsArray.push(item);\n            }\n            else {\n                tsArray.push(convertPythonicToTs(item, key));\n            }\n        }\n        return tsArray;\n    }\n    else {\n        const tsDict = {};\n        for (const pythonicKey of Object.keys(pythonicConfig)) {\n            const pythonicValue = pythonicConfig[pythonicKey];\n            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n                // Special case the 'name' key with a string value. Name values, such as\n                // the names of LayersModel and Layer instances, should not undergo the\n                // camel-case conversion.\n                tsDict[pythonicKey] = pythonicValue;\n            }\n            else {\n                const tsKey = generic_utils.toCamelCase(pythonicKey);\n                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n            }\n        }\n        return tsDict;\n    }\n}\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(tsConfig, key) {\n    if (tsConfig === null || tsConfig === undefined) {\n        return null;\n    }\n    else if (typeof tsConfig === 'string') {\n        return generic_utils.toSnakeCase(tsConfig);\n    }\n    else if ((typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n        return tsConfig;\n    }\n    else if (tsConfig instanceof Array) {\n        const pyArray = [];\n        const arrayLength = tsConfig.length;\n        for (let i = 0; i < arrayLength; ++i) {\n            const item = tsConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                pyArray.push(item);\n            }\n            else {\n                pyArray.push(convertTsToPythonic(item, key));\n            }\n        }\n        return pyArray;\n    }\n    else {\n        const pyDict = {};\n        for (const tsKey of Object.keys(tsConfig)) {\n            const tsValue = tsConfig[tsKey];\n            const pyKey = generic_utils.toSnakeCase(tsKey);\n            if ((tsKey === 'name' || tsKey === 'className') &&\n                typeof tsValue === 'string') {\n                // Special case the 'name' key with a string value. Name values, such as\n                // the names of LayersModel and Layer instances, should not undergo the\n                // snake-case conversion.\n                pyDict[pyKey] = tsValue;\n            }\n            else {\n                pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n            }\n        }\n        return pyDict;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '3.18.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFDQUFxQztBQUVyQyx3REFBd0Q7QUFDeEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLE9BQU8sRUFBQyxPQUFPLEVBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBTZWUgdGhlIExJQ0VOU0UgZmlsZS4gKi9cblxuLy8gVGhpcyBjb2RlIGlzIGF1dG8tZ2VuZXJhdGVkLCBkbyBub3QgbW9kaWZ5IHRoaXMgZmlsZSFcbmNvbnN0IHZlcnNpb24gPSAnMy4xOC4wJztcbmV4cG9ydCB7dmVyc2lvbn07XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/engine/topology.py */\nimport { tidy } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize as deserializeLayer } from '../layers/serialization';\nimport * as generic_utils from '../utils/generic_utils';\nimport { convertTsToPythonic } from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport { batchSetValue } from '../variables';\nimport { version as layersVersion } from '../version';\nimport { execute, FeedDict } from './executor';\nimport { InputLayer } from './input_layer';\nimport { Layer, Node } from './topology';\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A LayersModel\n * is simply a Container with added training routines.\n *\n */\nexport class Container extends Layer {\n    constructor(args) {\n        // No args passed to super's constructor.\n        super({});\n        this.containerNodes = new Set();\n        this.name = args.name;\n        if (this.name == null) {\n            const prefix = this.getClassName().toLowerCase();\n            this.name = getUid(prefix);\n        }\n        this.supportsMasking = false;\n        this.trainable_ = true;\n        // TODO(michaelterry): Initialize perInputLosses/Updates here.\n        // Container-specific properties.\n        if (Array.isArray(args.inputs)) {\n            this.inputs = args.inputs.slice();\n        }\n        else {\n            this.inputs = [args.inputs];\n        }\n        if (Array.isArray(args.outputs)) {\n            this.outputs = args.outputs.slice();\n        }\n        else {\n            this.outputs = [args.outputs];\n        }\n        // Check for redundancy in inputs.\n        if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n            throw new ValueError('The list of inputs passed to the model is ' +\n                'redundant. All inputs should only appear once. Found: ' +\n                `${this.inputs.map(x => x.name)}`);\n        }\n        // Check for redundancy in outputs.\n        if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' +\n                'All outputs should only appear once. Found: ' +\n                `${this.outputs.map(x => x.name)}`);\n        }\n        /*\n          List of initial layers (1 to 1 mapping with this.inputs, hence the same\n          layer might appear twice)\n        */\n        this.inputLayers = [];\n        this.inputLayersNodeIndices = [];\n        this.inputLayersTensorIndices = [];\n        /*\n          List of layers (1 to 1 mapping with this.outputs, hence the same layer\n          might appear twice)\n        */\n        this.outputLayers = [];\n        this.outputLayersNodeIndices = [];\n        this.outputLayersTensorIndices = [];\n        /*\n          All layers in order of horizontal graph traversal. Entries are unique.\n          Includes input and output layers.\n        */\n        this.layers = [];\n        /*\n          References to container layers that were constructed internally. We need\n          these to properly dispose of tensors from nested containers.\n        */\n        this.internalContainerRefs = [];\n        // TODO(michaelterry): Determine if caching still needed with eager\n        // backend.\n        /*\n          This is for performance optimization when calling the Container on new\n          inputs. Every time the Container is called on a set on input tensors,\n          we compute the output tensors, output masks and output shapes in one pass,\n          then cache them here. When one of these outputs is queried later,\n          we retrieve it from there instead of recomputing it.\n        */\n        // this.outputTensorCache = {};\n        // this.outputShapeCache = {};\n        // Build this.outputLayers:\n        for (const x of this.outputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            this.outputLayers.push(layer);\n            this.outputLayersNodeIndices.push(nodeIndex);\n            this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        // TODO(michaelterry): Add output mask cache code.\n        // Build this.inputLayers:\n        for (const x of this.inputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            /*\n              It's supposed to be an input layer, so only one node\n              and one tensor output.\n            */\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            this.inputLayers.push(layer);\n            this.inputLayersNodeIndices.push(nodeIndex);\n            this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        // Build this.inputNames and this.outputNames.\n        this.inputNames = [];\n        this.outputNames = [];\n        this.feedInputShapes = [];\n        this.feedInputNames = [];\n        this.feedOutputNames = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            // Check that layer is an InputLayer.\n            if (!(layer instanceof InputLayer)) {\n                throw new TypeError('Input layers to a LayersModel must be InputLayer objects. ' +\n                    `Received inputs: ${args.inputs}. ` +\n                    `Input ${i} (0-based) originates ` +\n                    `from layer type ${layer.getClassName()}.`);\n            }\n            this.inputNames.push(layer.name);\n            this.feedInputShapes.push(layer.batchInputShape);\n            this.feedInputNames.push(layer.name);\n        }\n        for (const layer of this.outputLayers) {\n            this.outputNames.push(layer.name);\n        }\n        this.internalInputShapes = this.inputs.map(x => x.shape);\n        this.internalOutputShapes = this.outputs.map(x => x.shape);\n        /*\n          Container_nodes: set of nodes included in the graph (not all nodes\n          included in the layers are relevant to the current graph).\n        */\n        // ids of all nodes relevant to the Container:\n        const nodesDepths = {};\n        // To recover nodes from their ID.\n        const nodeIDToNode = {};\n        const layersDepths = {};\n        // To layers from their ID.\n        const layerIDToLayer = {};\n        const layerIndices = {};\n        const nodesInDecreasingDepth = [];\n        /**\n         * Builds a map of the graph of layers.\n         *\n         * This recursively updates the map `layerIndices`,\n         * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n         *\n         * @param tensor Some tensor in a graph.\n         * @param finishedNodes Set of nodes whose subgraphs have been traversed\n         *         completely. Useful to prevent duplicated work.\n         * @param nodesInProgress Set of nodes that are currently active on the\n         *         recursion stack. Useful to detect cycles.\n         * @param layer Layer from which `tensor` comes from. If not provided,\n         *   will be obtained from tensor.sourceLayer.\n         * @param nodeIndex Node index from which `tensor` comes from.\n         * @param tensorIndex TensorIndex from which `tensor` comes from.\n         *\n         * @exception RuntimeError if a cycle is detected.\n         */\n        const buildMapOfGraph = (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) => {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            const node = layer.inboundNodes[nodeIndex];\n            // Prevent cycles.\n            if (nodesInProgress.indexOf(node) !== -1) {\n                throw new RuntimeError(`The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                    'is part of a cycle.');\n            }\n            // Don't repeat work for shared subgraphs\n            if (finishedNodes.indexOf(node) !== -1) {\n                return;\n            }\n            // Update containerNodes.\n            this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            // Store the traversal order for layer sorting.\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = Object.keys(layerIndices).length;\n            }\n            if (nodesInProgress.indexOf(node) === -1) {\n                nodesInProgress.push(node);\n            }\n            // Propagate to all previous tensors connected to this node.\n            const numInboundLayers = node.inboundLayers.length;\n            for (let i = 0; i < numInboundLayers; i++) {\n                const x = node.inputTensors[i];\n                const layer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const tensorIndex = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        const finishedNodes = [];\n        const nodesInProgress = [];\n        for (const x of this.outputs) {\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (const node of reversedNodesInDecreasingDepth) {\n            nodeIDToNode[node.id] = node;\n            // If the depth is not set, the node has no outbound nodes (depth 0).\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            let depth = nodesDepths[node.id];\n            // Update the depth of the corresponding layer\n            const previousDepth = (layersDepths[node.outboundLayer.id] == null ?\n                0 :\n                layersDepths[node.outboundLayer.id]);\n            /*\n              If we've seen this layer before at a higher depth, we should use that\n              depth instead of the node depth.  This is necessary for shared layers\n              that have inputs at different depth levels in the graph.\n            */\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            // Update the depth of inbound nodes.\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n                const inboundLayer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                const previousDepth = (nodesDepths[inboundNode.id] == null ? 0 :\n                    nodesDepths[inboundNode.id]);\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        // Build a dict {depth: list of nodes with this depth}\n        const nodesByDepth = {};\n        for (const nodeID in nodesDepths) {\n            const depth = nodesDepths[nodeID];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        // Build a dict {depth: list of layers with this depth}\n        const layersByDepth = {};\n        for (const layerID in layersDepths) {\n            const depth = layersDepths[layerID];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        // Get sorted list of layer depths.\n        let depthKeys = Object.keys(layersByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Set this.layers and this.layersByDepth.\n        this.layers = [];\n        for (const depth of depthKeys) {\n            const layersForDepth = layersByDepth[depth];\n            // Container.layers needs to have a deterministic order:\n            // here we order them by traversal order.\n            layersForDepth.sort((a, b) => {\n                const aIndex = layerIndices[a.id];\n                const bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (const layer of layersForDepth) {\n                if (layer instanceof Container) {\n                    this.internalContainerRefs.push(layer);\n                }\n                this.layers.push(layer);\n            }\n        }\n        this.layersByDepth = layersByDepth;\n        // Get sorted list of node depths;\n        depthKeys = Object.keys(nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Check that all tensors required are computable.\n        // computable_tensors: all tensors in the graph\n        // that can be computed from the inputs provided.\n        const computableTensors = this.inputs.slice();\n        // To provide a better error msg.\n        const layersWithCompleteInput = [];\n        for (const depth of depthKeys) {\n            for (const node of nodesByDepth[depth]) {\n                const layer = node.outboundLayer;\n                if (layer != null) {\n                    for (const x of node.inputTensors) {\n                        if (computableTensors.indexOf(x) === -1) {\n                            throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${x}` +\n                                ` at layer \"${layer.name}\". ` +\n                                'The following previous layers were accessed without ' +\n                                `issue: ${layersWithCompleteInput}`);\n                        }\n                    }\n                    for (const x of node.outputTensors) {\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        // Set this.containerNodes and this.nodesByDepth.\n        this.nodesByDepth = nodesByDepth;\n        // Ensure name unicity, which will be crucial for serialization\n        // (since serialized nodes refer to layers by their name).\n        const allNames = this.layers.map(x => x.name);\n        for (const name of allNames) {\n            const numOccurrences = allNames.filter(x => x === name).length;\n            if (numOccurrences !== 1) {\n                throw new RuntimeError(`The name \"${name}\" is used ${numOccurrences} times ` +\n                    'in the model. All layer names should be unique. Layer names: ' +\n                    JSON.stringify(allNames));\n            }\n        }\n        // Layer parameters.\n        // The new container starts with a single inbound node\n        // for its inputs, and no outbound nodes.\n        // Will be appended to by future calls to apply().\n        this.outboundNodes = [];\n        // Will be appended to below, and by future calls to apply().\n        this.inboundNodes = [];\n        // Create the node linking internal inputs to internal outputs.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: this.inputs,\n            outputTensors: this.outputs,\n            inputMasks: this.inputs.map(x => null),\n            outputMasks: this.outputs.map(x => null),\n            inputShapes: this.inputs.map(x => x.shape),\n            outputShapes: this.outputs.map(x => x.shape)\n        });\n        this.built = true;\n        this._refCount = 1; // The ref count of a container always start at 1.\n    }\n    assertNotDisposed() {\n        if (this._refCount === 0) {\n            throw new Error(`Container '${this.name}' is already disposed.`);\n        }\n    }\n    /**\n     * Attempt to dispose a LayersModel's weights.\n     *\n     * This method decrease the reference count of the LayersModel object by 1.\n     *\n     * A LayersModel is reference-counted. Its reference count is incremented by 1\n     * when it is first constructed and when it is used as a Layer of another\n     * LayersModel.\n     *\n     * If the reference count of a LayersModel becomes 0, the `dispose` method of\n     * all its constituent `Layer`s will be called.\n     *\n     * Note: If the reference count is greater than 0 after the decrement, the\n     * `dispose` method of its constituent `Layer`s will *not* be called.\n     *\n     * After a LayersModel is disposed, it cannot be used in calls such as\n     * 'predict`, `evaluate` or `fit` anymore.\n     *\n     * @returns A DisposeResult Object with the following fields:\n     *   - refCountAfterDispose: The reference count of the LayersModel after this\n     *     `dispose()` call.\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n     *     during this `dispose()` call.\n     * @throws {Error} If the layer is not built yet, or if the LayersModel has\n     *   already been disposed.\n     */\n    dispose() {\n        this.assertNotDisposed();\n        const result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n        if (--this._refCount === 0) {\n            for (const layer of this.layers) {\n                result.numDisposedVariables += layer.dispose().numDisposedVariables;\n            }\n            // Call dispose on each internally created container layer again to ensure\n            // their refCounts hit zero and their tensors are subsequently deleted.\n            for (const container of this.internalContainerRefs) {\n                result.numDisposedVariables += container.dispose().numDisposedVariables;\n            }\n        }\n        result.refCountAfterDispose = this._refCount;\n        return result;\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this.layers.forEach(layer => {\n            // tslint:disable-next-line:no-any\n            layer._trainableWeights\n                .forEach(w => w.trainable = trainable);\n        });\n        this.trainable_ = trainable;\n    }\n    get trainableWeights() {\n        // Porting Note: This check below is to prevent errors where the\n        //   _trainableWeights inherited from the parent class (Layer) gets\n        //   inadvertently used.\n        if (this._trainableWeights.length > 0) {\n            throw new ValueError('Container instance unexpectedly contains _trainableWeights.' +\n                'The trainable weights of a Container are a union of the ' +\n                'trainable weights of its consituent Layers. Its own ' +\n                '_trainableWeights must remain an empty Array.');\n        }\n        if (!this.trainable) {\n            return [];\n        }\n        let weights = [];\n        for (const layer of this.layers) {\n            weights = weights.concat(layer.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const layer of this.layers) {\n            weights.push(...layer.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const layer of this.layers) {\n                trainableWeights.push(...layer.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    get weights() {\n        return this.trainableWeights.concat(this.nonTrainableWeights);\n    }\n    /**\n     * Loads all layer weights from a JSON object.\n     *\n     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n     *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n     *   to convert them into JSON strings compatible with this method.\n     * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n     *\n     * @param weights A JSON mapping weight names to weight values as nested\n     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n     *   names to `tf.Tensor` objects.\n     * @param strict Require that the provided weights exactly match those\n     *   required by the container.  Default: `true`.  Passing `false` means that\n     *   extra weights and missing weights will be silently ignored.\n     */\n    loadWeights(weights, strict = true) {\n        const nameToWeight = {};\n        let totalWeightsCount = 0;\n        for (const layer of this.layers) {\n            for (const weight of layer.weights) {\n                if (nameToWeight[weight.originalName] != null) {\n                    throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n                }\n                nameToWeight[weight.originalName] = weight;\n                totalWeightsCount++;\n            }\n        }\n        const weightValueTuples = [];\n        for (const name in weights) {\n            // TF 2.2.0 added cell name to the weight name in the format of\n            // layer_name/cell_name/weight_name, we need to remove\n            // the inner cell name.\n            let validatedName = name;\n            if (nameToWeight[name] == null) {\n                const tokens = name.split('/');\n                const shortenNameArray = tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);\n                validatedName = shortenNameArray.join('/');\n            }\n            if (nameToWeight[validatedName] != null) {\n                weightValueTuples.push([nameToWeight[validatedName], weights[name]]);\n            }\n            else if (strict) {\n                throw new ValueError(`Provided weight data has no target variable: ${name}`);\n            }\n            delete nameToWeight[validatedName];\n        }\n        if (strict) {\n            // Check that all weights are set.\n            const unsetNames = [];\n            for (const name in nameToWeight) {\n                unsetNames.push(name);\n            }\n            if (unsetNames.length > 0) {\n                throw new ValueError(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ` +\n                    `${unsetNames}`);\n            }\n        }\n        batchSetValue(weightValueTuples);\n    }\n    /**\n     * Util shared between different serialization methods.\n     * @returns LayersModel config with Keras version information added.\n     */\n    updatedConfig() {\n        const theConfig = this.getConfig();\n        const modelConfig = {};\n        modelConfig['className'] = this.getClassName();\n        modelConfig['config'] = theConfig;\n        modelConfig['kerasVersion'] = `tfjs-layers ${layersVersion}`;\n        // TODO(nielsene): Replace something like K.backend() once\n        // possible.\n        modelConfig['backend'] = 'TensorFlow.js';\n        return modelConfig;\n    }\n    /**\n     * Returns a JSON string containing the network configuration.\n     *\n     * To load a network from a JSON save file, use\n     * models.modelFromJSON(jsonString);\n     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n     * @param returnString Whether the return value should be stringified\n     *    (default: `true`).\n     * @returns a JSON string if `returnString` (default), or a JSON object if\n     *   `!returnString`.\n     */\n    // tslint:disable-next-line:no-any\n    toJSON(unused, returnString = true) {\n        const modelConfig = convertTsToPythonic(this.updatedConfig());\n        return returnString ? JSON.stringify(modelConfig) : modelConfig;\n    }\n    /**\n     * Call the model on new inputs.\n     *\n     * In this case `call` just reapplies all ops in the graph to the new inputs\n     * (e.g. build a new computational graph from the provided inputs).\n     *\n     * @param inputs A tensor or list of tensors.\n     * @param mask A mask or list of masks. A mask can be either a tensor or null\n     *   (no mask).\n     *\n     * @return A tensor if there is a single output, or a list of tensors if there\n     *   are more than one outputs.\n     */\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            const feedDict = new FeedDict();\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n            return execute(this.outputs, feedDict, kwargs);\n        });\n    }\n    /**\n     * Computes an output mask tensor.\n     *\n     * @param inputs Tensor or list of tensors.\n     * @param mask Tensor or list of tensors.\n     *\n     * @return null or a tensor (or list of tensors, one per output tensor of the\n     * layer).\n     */\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            let masks;\n            if (mask == null) {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            else {\n                masks = generic_utils.toList(mask);\n            }\n            // TODO(michaelterry): Add support for mask caching.\n            return this.runInternalGraph(inputs, masks)[1];\n        });\n    }\n    /**\n     * Computes the output shape of the layer.\n     *\n     * Assumes that the layer will be built to match that input shape provided.\n     *\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\n     *   (one per output tensor of the layer). Shape tuples can include null for\n     *   free dimensions, instead of an integer.\n     */\n    computeOutputShape(inputShape) {\n        const inputShapes = types_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new ValueError(`Invalid inputShape argument ${inputShape}: ` +\n                `model has ${this.inputLayers.length} tensor inputs.`);\n        }\n        // TODO(michaelterry): Add caching\n        const layersToOutputShapes = {};\n        for (let i = 0; i < inputShapes.length; i++) {\n            const layer = this.inputLayers[i];\n            const inputShape = inputShapes[i];\n            // It's an input layer: computeOutputShape is identity,\n            // and there is only one node and one tensor output.\n            const shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape;\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Iterate over nodes, by depth level.\n        if (depthKeys.length > 1) {\n            for (const depth of depthKeys) {\n                const nodes = this.nodesByDepth[depth];\n                for (const node of nodes) {\n                    // This is always a single layer, never a list.\n                    const layer = node.outboundLayer;\n                    if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n                        // We've already covered the input layers a few lines above.\n                        continue;\n                    }\n                    // Potentially redundant list, same size of node.inputTensors.\n                    const inputShapes = [];\n                    for (let j = 0; j < node.inboundLayers.length; j++) {\n                        const inboundLayer = node.inboundLayers[j];\n                        const nodeIndex = node.nodeIndices[j];\n                        const tensorIndex = node.tensorIndices[j];\n                        const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n                        const inputShape = layersToOutputShapes[shapeKey];\n                        inputShapes.push(inputShape);\n                    }\n                    const outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes));\n                    const outputShapes = types_utils.normalizeShapeList(outputShape);\n                    const nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (let j = 0; j < outputShapes.length; j++) {\n                        const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n                        layersToOutputShapes[shapeKey] = outputShapes[j];\n                    }\n                }\n            }\n        }\n        // Read final output shapes from layersToOutputShapes.\n        const outputShapes = [];\n        const outputShapeKeys = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (let i = 0; i < outputShapeKeys.length; i++) {\n            const key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        // TODO(michaelterry): Update cache\n        return generic_utils.singletonOrArray(outputShapes);\n    }\n    /**\n     * Computes output tensors for new inputs.\n     *\n     * Note:\n     *   - Expects `inputs` to be a list (potentially with 1 element).\n     *\n     * @param inputs List of tensors\n     * @param masks List of masks (tensors or null).\n     * @return Three lists: outputTensors, outputMasks, outputShapes\n     */\n    runInternalGraph(inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        // Dictionary mapping reference tensors to tuples\n        // (computed tensor, compute mask)\n        // we assume a 1:1 mapping from tensor to mask\n        // TODO: raise exception when a `.computeMask()` call\n        // does not return a list the same size as `call`\n        const tensorMap = {};\n        for (let i = 0; i < this.inputs.length; ++i) {\n            const x = this.inputs[i];\n            const y = inputs[i];\n            const mask = masks[i];\n            tensorMap[x.id] = [y, mask];\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        for (const depth of depthKeys) {\n            const nodes = this.nodesByDepth[depth];\n            for (const node of nodes) {\n                // This is always a single layer, never a list.\n                const layer = node.outboundLayer;\n                const referenceInputTensors = node.inputTensors;\n                const referenceOutputTensors = node.outputTensors;\n                // If all previous input tensors are available in tensorMap,\n                // then call node.inboundLayer on them.\n                // List of tuples [input, mask]:\n                const computedData = new Array();\n                for (const x of referenceInputTensors) {\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    // TODO(michaelterry): Add K.name_scope here, if we need it.\n                    let kwargs = {};\n                    let computedTensors;\n                    let computedMasks;\n                    let outputTensors;\n                    let outputMasks;\n                    // call layer\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        const [computedTensor, computedMask] = computedData[0];\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    }\n                    else {\n                        computedTensors = computedData.map(x => x[0]);\n                        computedMasks = computedData.map(x => x[1]);\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new NotImplementedError('LayersModel invocation with concrete Tensor value(s) in the ' +\n                            'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    // TODO(michaelterry): Add model updates and losses\n                    // Update tensor map.\n                    for (let i = 0; i < referenceOutputTensors.length; ++i) {\n                        const x = referenceOutputTensors[i];\n                        const y = outputTensors[i];\n                        const mask = outputMasks[i];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        const outputTensors = [];\n        const outputMasks = [];\n        const outputShapes = [];\n        for (const x of this.outputs) {\n            generic_utils.assert(x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n            const [tensor, mask] = tensorMap[x.id];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        // TODO(michaelterry): Add support for caches.\n        return [outputTensors, outputMasks, outputShapes];\n    }\n    /**\n     * Builds a map of internal node keys to node ordering.\n     * Used in serializaion a node orderings may change as unused nodes are\n     * dropped. Porting Note:  This helper method was pulled out of getConfig to\n     * improve readability.\n     * @param layers An array of Layers in the model.\n     * @returns Map of Node Keys to index order within the layer.\n     */\n    buildNodeConversionMap(layers) {\n        const nodeConversionMap = {};\n        let keptNodes;\n        for (const layer of this.layers) {\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (this.containerNodes.has(nodeKey)) {\n                    // i.e. we mark it to be saved\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    }\n    /**\n     * Retrieves a layer based on either its name (unique) or index.\n     *\n     * Indices are based on order of horizontal graph traversal (bottom-up).\n     *\n     * If both `name` and `index` are specified, `index` takes precedence.\n     *\n     * @param name Name of layer.\n     * @param index Index of layer.\n     * @returns A Layer instance.\n     * @throws ValueError: In case of invalid layer name or index.\n     *\n     * @doc {\n     *    heading: 'Layers',\n     *    subheading: 'Classes',\n     *    namespace: 'layers',\n     *    subclasses: ['LayersModel']\n     * }\n     */\n    getLayer(name, index) {\n        if (index != null) {\n            if (this.layers.length <= index) {\n                throw new ValueError(`Was asked to retrieve layer at index ${index}, but model only ` +\n                    `has ${this.layers.length} layer(s).`);\n            }\n            else {\n                return this.layers[index];\n            }\n        }\n        else {\n            if (name == null) {\n                throw new ValueError('Provide either a layer name or layer index');\n            }\n        }\n        for (const layer of this.layers) {\n            if (layer.name === name) {\n                return layer;\n            }\n        }\n        throw new ValueError(`No such layer: ${name}`);\n    }\n    /**\n     * Retrieves the Container's current loss values.\n     *\n     * Used for regularizers during training.\n     */\n    calculateLosses() {\n        // Porting Node: This is an augmentation to Container.loss in PyKeras.\n        //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n        //   Tensor (specifically Scalar) values are returned. This is due to the\n        //   imperative backend.\n        return tidy(() => {\n            const losses = [];\n            for (const layer of this.layers) {\n                for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    const nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (this.containerNodes.has(nodeKey)) {\n                        losses.push(...layer.calculateLosses());\n                    }\n                }\n            }\n            // TODO(cais): Add any unconditional model-level losses?\n            return losses;\n        });\n    }\n    getConfig() {\n        const config = { name: this.name };\n        // Build a map from layer unique name (self._node_key)\n        // to the index of the nodes that are saved in the config.\n        // Only nodes in container_nodes are saved.\n        const nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        // Serialize and save the layers in layerConfigs\n        const layerConfigs = [];\n        for (const layer of this.layers) {\n            const layerClassName = layer.getClassName();\n            const layerConfig = layer.getConfig();\n            const filteredInboundNodes = [];\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const node = layer.inboundNodes[originalNodeIndex];\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                let kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    // The node is relevant to the model:\n                    // add to filteredInboundNodes.\n                    if (node.callArgs) {\n                        try {\n                            JSON.stringify(node.callArgs);\n                            kwargs = node.callArgs;\n                        }\n                        catch (err) {\n                            console.warn(`Layer ${layer.name} was passed ` +\n                                `non-serializable keyword arguments: ` +\n                                `${node.callArgs}. They will not be included ` +\n                                `in the serialized model (and thus will be ` +\n                                `missing at deserialization time).`);\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        const nodeData = [];\n                        for (let i = 0; i < node.inboundLayers.length; i++) {\n                            const inboundLayer = node.inboundLayers[i];\n                            const nodeIndex = node.nodeIndices[i];\n                            const tensorIndex = node.tensorIndices[i];\n                            const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n                            let newNodeIndex = nodeConversionMap[nodeKey];\n                            if (newNodeIndex == null) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            const dict = {};\n            dict['name'] = layer.name;\n            dict['className'] = layerClassName;\n            dict['config'] = layerConfig;\n            dict['inboundNodes'] = filteredInboundNodes;\n            layerConfigs.push(dict);\n        }\n        config['layers'] = layerConfigs;\n        // Gather info about inputs and outputs\n        const modelInputs = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            const nodeIndex = this.inputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        const modelOutputs = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    }\n    /**\n     * Instantiates a LayersModel from its config (output of `get_config()`).\n     * @param cls the class to create\n     * @param config LayersModel config dictionary.\n     * @param customObjects An optional dictionary of custom objects.\n     * @param fastWeightInit Optional flag to use fast weight initialization\n     *   during deserialization. This is applicable to cases in which\n     *   the initialization will be immediately overwritten by loaded weight\n     *   values. Default: `false`.\n     * @returns A LayersModel instance.\n     * @throws ValueError: In case of improperly formatted config dict.\n     */\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n        // Layer instances created during\n        // the graph reconstruction process\n        const createdLayers = {};\n        // Dictionary mapping layer instances to\n        // node data that specifies a layer call.\n        // It acts as a queue that maintains any unprocessed\n        // layer call until it becomes possible to process it\n        // (i.e. until the input tensors to the call all exist).\n        const unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            }\n            else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            const inputTensors = [];\n            let kwargs;\n            for (const inputData of nodeData) {\n                const inboundLayerName = inputData[0];\n                const inboundNodeIndex = inputData[1];\n                const inboundTensorIndex = inputData[2];\n                kwargs = inputData[3] == null ?\n                    {} :\n                    inputData[3];\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            // Call layer on its inputs, thus creating the node\n            // and building the layer if needed.\n            // Note: This has Eager vs Graph Implications.\n            if (inputTensors.length > 0) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs); // was ** kwargs\n            }\n        }\n        /**\n         * Deserialize a layer, then call it on appropriate inputs.\n         * @param layerData: layer config dict.\n         * @throws ValueError: In case of improperly formatted `layer_data`\n         * dict.\n         */\n        function processLayer(layerData) {\n            const layerName = layerData['name'];\n            // Instantiate layer.\n            const layer = deserializeLayer(layerData, config['customObjects'] != null ?\n                config['customObjects'] :\n                {});\n            layer.setFastWeightInitDuringBuild(fastWeightInit);\n            createdLayers[layerName] = layer;\n            // Gather layer inputs.\n            const inboundNodesData = layerData['inboundNodes'];\n            inboundNodesData.forEach(nodeData => {\n                if (!(nodeData instanceof Array)) {\n                    throw new ValueError(`Corrupted configuration, expected array for nodeData: ${nodeData}`);\n                }\n                // We don't process nodes (i.e. make layer calls)\n                // on the fly because the inbound node may not yet exist,\n                // in case of layer shared at different topological depths\n                // (e.g.a model such as A(B(A(B(x)))))\n                addUnprocessedNode(layer, nodeData);\n            });\n        }\n        // First, we create all layers and enqueue nodes to be processed.\n        const name = config['name'];\n        const layersFromConfig = config['layers'];\n        for (const layerData of layersFromConfig) {\n            processLayer(layerData);\n        }\n        // Then we process nodes in order of layer depth.\n        // Nodes that cannot yet be processed(if the inbound node\n        // does not yet exist) are re - enqueued, and the process\n        // is repeated until all nodes are processed.\n        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n            for (const layerData of layersFromConfig) {\n                const layer = createdLayers[layerData['name']];\n                if (layer.name in unprocessedNodes) {\n                    const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n                    delete unprocessedNodes[layer.name];\n                    for (const nodeData of currentUnprocessedNodesForLayer) {\n                        processNode(layer, nodeData);\n                    }\n                }\n            }\n        }\n        const inputTensors = [];\n        const outputTensors = [];\n        const inputLayersFromConfig = config['inputLayers'];\n        for (const layerData of inputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        const outputLayersFromConfig = config['outputLayers'];\n        for (const layerData of outputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name });\n    }\n    /**\n     * Determine whether the container is stateful.\n     *\n     * Porting Note: this is the equivalent of the stateful @property of\n     *   the Container class in PyKeras.\n     */\n    get stateful() {\n        // Porting Note: This check is to prevent inadvertent setting of the\n        //   _stateful property of the Container instance.\n        if (this._stateful) {\n            throw new ValueError('Container instance unexpectedly has _stateful = true. The ' +\n                'statefulness of a Container is determined by the Layers it ' +\n                'contains. Its _stateful property must remain the default false.');\n        }\n        for (const layer of this.layers) {\n            if (layer.stateful) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Reset the state of all stateful constituent layers (if any).\n     *\n     * Examples of stateful layers include RNN layers whose `stateful` property\n     * is set as `true`.\n     */\n    resetStates() {\n        tidy(() => {\n            this.layers.forEach(layer => {\n                // tslint:disable:no-any\n                if (layer.stateful) {\n                    layer.resetStates();\n                }\n                // tslint:enable:no-any\n            });\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2VuZ2luZS9jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFFSCwrQ0FBK0M7QUFFL0MsT0FBTyxFQUFnRCxJQUFJLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRixPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFDLG1CQUFtQixFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFJeEUsT0FBTyxFQUFDLFdBQVcsSUFBSSxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRXhFLE9BQU8sS0FBSyxhQUFhLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDakUsT0FBTyxLQUFLLFdBQVcsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsYUFBYSxFQUFnQixNQUFNLGNBQWMsQ0FBQztBQUMxRCxPQUFPLEVBQUMsT0FBTyxJQUFJLGFBQWEsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVwRCxPQUFPLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBZ0IsS0FBSyxFQUFFLElBQUksRUFBaUIsTUFBTSxZQUFZLENBQUM7QUFTdEU7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFnQixTQUFVLFNBQVEsS0FBSztJQW9DM0MsWUFBWSxJQUFtQjtRQUM3Qix5Q0FBeUM7UUFDekMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBcEJaLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQXFCakMsSUFBSSxDQUFDLElB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Z2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLyogT3JpZ2luYWwgc291cmNlOiBrZXJhcy9lbmdpbmUvdG9wb2xvZ3kucHkgKi9cblxuaW1wb3J0IHtOYW1lZFRlbnNvck1hcCwgU2NhbGFyLCBzZXJpYWxpemF0aW9uLCBUZW5zb3IsIHRpZHl9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7Z2V0VWlkfSBmcm9tICcuLi9iYWNrZW5kL3N0YXRlJztcbmltcG9ydCB7Tm90SW1wbGVtZW50ZWRFcnJvciwgUnVudGltZUVycm9yLCBWYWx1ZUVycm9yfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtTaGFwZX0gZnJvbSAnLi4va2VyYXNfZm9ybWF0L2NvbW1vbic7XG5pbXBvcnQge1RlbnNvcktleVdpdGhBcmdzQXJyYXl9IGZyb20gJy4uL2tlcmFzX2Zvcm1hdC9ub2RlX2NvbmZpZyc7XG5pbXBvcnQge1B5SnNvbkRpY3R9IGZyb20gJy4uL2tlcmFzX2Zvcm1hdC90eXBlcyc7XG5pbXBvcnQge2Rlc2VyaWFsaXplIGFzIGRlc2VyaWFsaXplTGF5ZXJ9IGZyb20gJy4uL2xheWVycy9zZXJpYWxpemF0aW9uJztcbmltcG9ydCB7S3dhcmdzfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgKiBhcyBnZW5lcmljX3V0aWxzIGZyb20gJy4uL3V0aWxzL2dlbmVyaWNfdXRpbHMnO1xuaW1wb3J0IHtjb252ZXJ0VHNUb1B5dGhvbmljfSBmcm9tICcuLi91dGlscy9zZXJpYWxpemF0aW9uX3V0aWxzJztcbmltcG9ydCAqIGFzIHR5cGVzX3V0aWxzIGZyb20gJy4uL3V0aWxzL3R5cGVzX3V0aWxzJztcbmltcG9ydCB7YmF0Y2hTZXRWYWx1ZSwgTGF5ZXJWYXJpYWJsZX0gZnJvbSAnLi4vdmFyaWFibGVzJztcbmltcG9ydCB7dmVyc2lvbiBhcyBsYXllcnNWZXJzaW9ufSBmcm9tICcuLi92ZXJzaW9uJztcblxuaW1wb3J0IHtleGVjdXRlLCBGZWVkRGljdH0gZnJvbSAnLi9leGVjdXRvcic7XG5pbXBvcnQge0lucHV0TGF5ZXJ9IGZyb20gJy4vaW5wdXRfbGF5ZXInO1xuaW1wb3J0IHtEaXNwb3NlUmVzdWx0LCBMYXllciwgTm9kZSwgU3ltYm9saWNUZW5zb3J9IGZyb20gJy4vdG9wb2xvZ3knO1xuXG4vKiogQ29uc3RydWN0b3IgY29uZmlnIGZvciBDb250YWluZXIuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckFyZ3Mge1xuICBpbnB1dHM6IFN5bWJvbGljVGVuc29yfFN5bWJvbGljVGVuc29yW107XG4gIG91dHB1dHM6IFN5bWJvbGljVGVuc29yfFN5bWJvbGljVGVuc29yW107XG4gIG5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBDb250YWluZXIgaXMgYSBkaXJlY3RlZCBhY3ljbGljIGdyYXBoIG9mIGxheWVycy5cbiAqXG4gKiBJdCBpcyB0aGUgdG9wb2xvZ2ljYWwgZm9ybSBvZiBhIFwibW9kZWxcIi4gQSBMYXllcnNNb2RlbFxuICogaXMgc2ltcGx5IGEgQ29udGFpbmVyIHdpdGggYWRkZWQgdHJhaW5pbmcgcm91dGluZXMuXG4gKlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29udGFpbmVyIGV4dGVuZHMgTGF5ZXIge1xuICBpbnB1dHM6IFN5bWJvbGljVGVuc29yW107XG4gIG91dHB1dHM6IFN5bWJvbGljVGVuc29yW107XG5cbiAgaW5wdXRMYXllcnM6IExheWVyW107XG4gIGlucHV0TGF5ZXJzTm9kZUluZGljZXM6IG51bWJlcltdO1xuICBpbnB1dExheWVyc1RlbnNvckluZGljZXM6IG51bWJlcltdO1xuXG4gIG91dHB1dExheWVyczogTGF5ZXJbXTtcbiAgb3V0cHV0TGF5ZXJzTm9kZUluZGljZXM6IG51bWJlcltdO1xuICBvdXRwdXRMYXllcnNUZW5zb3JJbmRpY2VzOiBudW1iZXJbXTtcblxuICBsYXllcnM6IExheWVyW107XG4gIGxheWVyc0J5RGVwdGg6IHtbZGVwdGg6IHN0cmluZ106IExheWVyW119O1xuICBub2Rlc0J5RGVwdGg6IHtbZGVwdGg6IHN0cmluZ106IE5vZGVbXX07XG5cbiAgaW50ZXJuYWxDb250YWluZXJSZWZzOiBDb250YWluZXJbXTtcblxuICBjb250YWluZXJOb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogQWRkIGNhY2hlIHN1cHBvcnRcbiAgLy8gcHJpdmF0ZSBvdXRwdXRNYXNrQ2FjaGU6IGFueTtcbiAgLy8gcHJpdmF0ZSBvdXRwdXRUZW5zb3JDYWNoZTogYW55O1xuICAvLyBwcml2YXRlIG91dHB1dFNoYXBlQ2FjaGU6IGFueTtcblxuICBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuICBmZWVkSW5wdXRTaGFwZXM6IFNoYXBlW107XG5cbiAgcHJvdGVjdGVkIGludGVybmFsSW5wdXRTaGFwZXM6IFNoYXBlW107XG4gIHByb3RlY3RlZCBpbnRlcm5hbE91dHB1dFNoYXBlczogU2hhcGVbXTtcbiAgLy8gVE9ETyhjYWlzKTogTWF5YmUgJ2ZlZWQnIHNob3VsZCBub3QgaW4gdGhlIG5hbWVzIG9mIHRoZXNlIHZhcmlhYmxlcyxcbiAgLy8gICBkdWUgdG8gdGhlIGZhY3QgdGhhdCBvdXIgYmFja2VuZCBpcyBub3Qgc3ltYm9saWMuXG4gIHByb3RlY3RlZCBmZWVkSW5wdXROYW1lczogc3RyaW5nW107XG4gIHByb3RlY3RlZCBmZWVkT3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKGFyZ3M6IENvbnRhaW5lckFyZ3MpIHtcbiAgICAvLyBObyBhcmdzIHBhc3NlZCB0byBzdXBlcidzIGNvbnN0cnVjdG9yLlxuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLm5hbWUgPSBhcmdzLm5hbWU7XG4gICAgaWYgKHRoaXMubmFtZSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBwcmVmaXggPSB0aGlzLmdldENsYXNzTmFtZSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLm5hbWUgPSBnZXRVaWQocHJlZml4KTtcbiAgICB9XG5cbiAgICB0aGlzLnN1cHBvcnRzTWFza2luZyA9IGZhbHNlO1xuICAgIHRoaXMudHJhaW5hYmxlXyA9IHRydWU7XG5cbiAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IEluaXRpYWxpemUgcGVySW5wdXRMb3NzZXMvVXBkYXRlcyBoZXJlLlxuXG4gICAgLy8gQ29udGFpbmVyLXNwZWNpZmljIHByb3BlcnRpZXMuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncy5pbnB1dHMpKSB7XG4gICAgICB0aGlzLmlucHV0cyA9IGFyZ3MuaW5wdXRzLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gW2FyZ3MuaW5wdXRzXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncy5vdXRwdXRzKSkge1xuICAgICAgdGhpcy5vdXRwdXRzID0gYXJncy5vdXRwdXRzLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3V0cHV0cyA9IFthcmdzLm91dHB1dHNdO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciByZWR1bmRhbmN5IGluIGlucHV0cy5cbiAgICBpZiAoZ2VuZXJpY191dGlscy51bmlxdWUodGhpcy5pbnB1dHMpLmxlbmd0aCAhPT0gdGhpcy5pbnB1dHMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgICAnVGhlIGxpc3Qgb2YgaW5wdXRzIHBhc3NlZCB0byB0aGUgbW9kZWwgaXMgJyArXG4gICAgICAgICAgJ3JlZHVuZGFudC4gQWxsIGlucHV0cyBzaG91bGQgb25seSBhcHBlYXIgb25jZS4gRm91bmQ6ICcgK1xuICAgICAgICAgIGAke3RoaXMuaW5wdXRzLm1hcCh4ID0+IHgubmFtZSl9YCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHJlZHVuZGFuY3kgaW4gb3V0cHV0cy5cbiAgICBpZiAoZ2VuZXJpY191dGlscy51bmlxdWUodGhpcy5vdXRwdXRzKS5sZW5ndGggIT09IHRoaXMub3V0cHV0cy5sZW5ndGgpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnVGhlIGxpc3Qgb2Ygb3V0cHV0cyBwYXNzZWQgdG8gdGhlIG1vZGVsIGlzIHJlZHVuZGFudC4gJyArXG4gICAgICAgICAgJ0FsbCBvdXRwdXRzIHNob3VsZCBvbmx5IGFwcGVhciBvbmNlLiBGb3VuZDogJyArXG4gICAgICAgICAgYCR7dGhpcy5vdXRwdXRzLm1hcCh4ID0+IHgubmFtZSl9YCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgIExpc3Qgb2YgaW5pdGlhbCBsYXllcnMgKDEgdG8gMSBtYXBwaW5nIHdpdGggdGhpcy5pbnB1dHMsIGhlbmNlIHRoZSBzYW1lXG4gICAgICBsYXllciBtaWdodCBhcHBlYXIgdHdpY2UpXG4gICAgKi9cbiAgICB0aGlzLmlucHV0TGF5ZXJzID0gW107XG4gICAgdGhpcy5pbnB1dExheWVyc05vZGVJbmRpY2VzID0gW107XG4gICAgdGhpcy5pbnB1dExheWVyc1RlbnNvckluZGljZXMgPSBbXTtcbiAgICAvKlxuICAgICAgTGlzdCBvZiBsYXllcnMgKDEgdG8gMSBtYXBwaW5nIHdpdGggdGhpcy5vdXRwdXRzLCBoZW5jZSB0aGUgc2FtZSBsYXllclxuICAgICAgbWlnaHQgYXBwZWFyIHR3aWNlKVxuICAgICovXG4gICAgdGhpcy5vdXRwdXRMYXllcnMgPSBbXTtcbiAgICB0aGlzLm91dHB1dExheWVyc05vZGVJbmRpY2VzID0gW107XG4gICAgdGhpcy5vdXRwdXRMYXllcnNUZW5zb3JJbmRpY2VzID0gW107XG4gICAgLypcbiAgICAgIEFsbCBsYXllcnMgaW4gb3JkZXIgb2YgaG9yaXpvbnRhbCBncmFwaCB0cmF2ZXJzYWwuIEVudHJpZXMgYXJlIHVuaXF1ZS5cbiAgICAgIEluY2x1ZGVzIGlucHV0IGFuZCBvdXRwdXQgbGF5ZXJzLlxuICAgICovXG4gICAgdGhpcy5sYXllcnMgPSBbXTtcblxuICAgIC8qXG4gICAgICBSZWZlcmVuY2VzIHRvIGNvbnRhaW5lciBsYXllcnMgdGhhdCB3ZXJlIGNvbnN0cnVjdGVkIGludGVybmFsbHkuIFdlIG5lZWRcbiAgICAgIHRoZXNlIHRvIHByb3Blcmx5IGRpc3Bvc2Ugb2YgdGVuc29ycyBmcm9tIG5lc3RlZCBjb250YWluZXJzLlxuICAgICovXG4gICAgdGhpcy5pbnRlcm5hbENvbnRhaW5lclJlZnMgPSBbXTtcblxuICAgIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogRGV0ZXJtaW5lIGlmIGNhY2hpbmcgc3RpbGwgbmVlZGVkIHdpdGggZWFnZXJcbiAgICAvLyBiYWNrZW5kLlxuICAgIC8qXG4gICAgICBUaGlzIGlzIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gd2hlbiBjYWxsaW5nIHRoZSBDb250YWluZXIgb24gbmV3XG4gICAgICBpbnB1dHMuIEV2ZXJ5IHRpbWUgdGhlIENvbnRhaW5lciBpcyBjYWxsZWQgb24gYSBzZXQgb24gaW5wdXQgdGVuc29ycyxcbiAgICAgIHdlIGNvbXB1dGUgdGhlIG91dHB1dCB0ZW5zb3JzLCBvdXRwdXQgbWFza3MgYW5kIG91dHB1dCBzaGFwZXMgaW4gb25lIHBhc3MsXG4gICAgICB0aGVuIGNhY2hlIHRoZW0gaGVyZS4gV2hlbiBvbmUgb2YgdGhlc2Ugb3V0cHV0cyBpcyBxdWVyaWVkIGxhdGVyLFxuICAgICAgd2UgcmV0cmlldmUgaXQgZnJvbSB0aGVyZSBpbnN0ZWFkIG9mIHJlY29tcHV0aW5nIGl0LlxuICAgICovXG4gICAgLy8gdGhpcy5vdXRwdXRUZW5zb3JDYWNoZSA9IHt9O1xuICAgIC8vIHRoaXMub3V0cHV0U2hhcGVDYWNoZSA9IHt9O1xuXG4gICAgLy8gQnVpbGQgdGhpcy5vdXRwdXRMYXllcnM6XG4gICAgZm9yIChjb25zdCB4IG9mIHRoaXMub3V0cHV0cykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB4LnNvdXJjZUxheWVyO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0geC5ub2RlSW5kZXg7XG4gICAgICBjb25zdCB0ZW5zb3JJbmRleCA9IHgudGVuc29ySW5kZXg7XG4gICAgICB0aGlzLm91dHB1dExheWVycy5wdXNoKGxheWVyKTtcbiAgICAgIHRoaXMub3V0cHV0TGF5ZXJzTm9kZUluZGljZXMucHVzaChub2RlSW5kZXgpO1xuICAgICAgdGhpcy5vdXRwdXRMYXllcnNUZW5zb3JJbmRpY2VzLnB1c2godGVuc29ySW5kZXgpO1xuICAgIH1cblxuICAgIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogQWRkIG91dHB1dCBtYXNrIGNhY2hlIGNvZGUuXG5cbiAgICAvLyBCdWlsZCB0aGlzLmlucHV0TGF5ZXJzOlxuICAgIGZvciAoY29uc3QgeCBvZiB0aGlzLmlucHV0cykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB4LnNvdXJjZUxheWVyO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0geC5ub2RlSW5kZXg7XG4gICAgICBjb25zdCB0ZW5zb3JJbmRleCA9IHgudGVuc29ySW5kZXg7XG4gICAgICAvKlxuICAgICAgICBJdCdzIHN1cHBvc2VkIHRvIGJlIGFuIGlucHV0IGxheWVyLCBzbyBvbmx5IG9uZSBub2RlXG4gICAgICAgIGFuZCBvbmUgdGVuc29yIG91dHB1dC5cbiAgICAgICovXG4gICAgICBnZW5lcmljX3V0aWxzLmFzc2VydChub2RlSW5kZXggPT09IDAsICdpbnB1dCBsYXllciBoYXMgPjEgbm9kZXMnKTtcbiAgICAgIGdlbmVyaWNfdXRpbHMuYXNzZXJ0KHRlbnNvckluZGV4ID09PSAwLCAnaW5wdXQgbGF5ZXIgaGFzID4xIHRlbnNvcnMnKTtcbiAgICAgIHRoaXMuaW5wdXRMYXllcnMucHVzaChsYXllcik7XG4gICAgICB0aGlzLmlucHV0TGF5ZXJzTm9kZUluZGljZXMucHVzaChub2RlSW5kZXgpO1xuICAgICAgdGhpcy5pbnB1dExheWVyc1RlbnNvckluZGljZXMucHVzaCh0ZW5zb3JJbmRleCk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgdGhpcy5pbnB1dE5hbWVzIGFuZCB0aGlzLm91dHB1dE5hbWVzLlxuICAgIHRoaXMuaW5wdXROYW1lcyA9IFtdO1xuICAgIHRoaXMub3V0cHV0TmFtZXMgPSBbXTtcbiAgICB0aGlzLmZlZWRJbnB1dFNoYXBlcyA9IFtdO1xuICAgIHRoaXMuZmVlZElucHV0TmFtZXMgPSBbXTtcbiAgICB0aGlzLmZlZWRPdXRwdXROYW1lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnB1dExheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmlucHV0TGF5ZXJzW2ldO1xuICAgICAgLy8gQ2hlY2sgdGhhdCBsYXllciBpcyBhbiBJbnB1dExheWVyLlxuICAgICAgaWYgKCEobGF5ZXIgaW5zdGFuY2VvZiBJbnB1dExheWVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0lucHV0IGxheWVycyB0byBhIExheWVyc01vZGVsIG11c3QgYmUgSW5wdXRMYXllciBvYmplY3RzLiAnICtcbiAgICAgICAgICAgIGBSZWNlaXZlZCBpbnB1dHM6ICR7YXJncy5pbnB1dHN9LiBgICtcbiAgICAgICAgICAgIGBJbnB1dCAke2l9ICgwLWJhc2VkKSBvcmlnaW5hdGVzIGAgK1xuICAgICAgICAgICAgYGZyb20gbGF5ZXIgdHlwZSAke2xheWVyLmdldENsYXNzTmFtZSgpfS5gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5wdXROYW1lcy5wdXNoKGxheWVyLm5hbWUpO1xuICAgICAgdGhpcy5mZWVkSW5wdXRTaGFwZXMucHVzaChsYXllci5iYXRjaElucHV0U2hhcGUpO1xuXG4gICAgICB0aGlzLmZlZWRJbnB1dE5hbWVzLnB1c2gobGF5ZXIubmFtZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5vdXRwdXRMYXllcnMpIHtcbiAgICAgIHRoaXMub3V0cHV0TmFtZXMucHVzaChsYXllci5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLmludGVybmFsSW5wdXRTaGFwZXMgPSB0aGlzLmlucHV0cy5tYXAoeCA9PiB4LnNoYXBlKTtcbiAgICB0aGlzLmludGVybmFsT3V0cHV0U2hhcGVzID0gdGhpcy5vdXRwdXRzLm1hcCh4ID0+IHguc2hhcGUpO1xuXG4gICAgLypcbiAgICAgIENvbnRhaW5lcl9ub2Rlczogc2V0IG9mIG5vZGVzIGluY2x1ZGVkIGluIHRoZSBncmFwaCAobm90IGFsbCBub2Rlc1xuICAgICAgaW5jbHVkZWQgaW4gdGhlIGxheWVycyBhcmUgcmVsZXZhbnQgdG8gdGhlIGN1cnJlbnQgZ3JhcGgpLlxuICAgICovXG4gICAgLy8gaWRzIG9mIGFsbCBub2RlcyByZWxldmFudCB0byB0aGUgQ29udGFpbmVyOlxuICAgIGNvbnN0IG5vZGVzRGVwdGhzOiB7W25vZGVJRDogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xuICAgIC8vIFRvIHJlY292ZXIgbm9kZXMgZnJvbSB0aGVpciBJRC5cbiAgICBjb25zdCBub2RlSURUb05vZGU6IHtbbm9kZUlEOiBzdHJpbmddOiBOb2RlfSA9IHt9O1xuICAgIGNvbnN0IGxheWVyc0RlcHRoczoge1tsYXllcklEOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gICAgLy8gVG8gbGF5ZXJzIGZyb20gdGhlaXIgSUQuXG4gICAgY29uc3QgbGF5ZXJJRFRvTGF5ZXI6IHtbbGF5ZXJJRDogc3RyaW5nXTogTGF5ZXJ9ID0ge307XG4gICAgY29uc3QgbGF5ZXJJbmRpY2VzOiB7W2xheWVySUQ6IHN0cmluZ106IG51bWJlcn0gPSB7fTtcbiAgICBjb25zdCBub2Rlc0luRGVjcmVhc2luZ0RlcHRoOiBOb2RlW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyBhIG1hcCBvZiB0aGUgZ3JhcGggb2YgbGF5ZXJzLlxuICAgICAqXG4gICAgICogVGhpcyByZWN1cnNpdmVseSB1cGRhdGVzIHRoZSBtYXAgYGxheWVySW5kaWNlc2AsXG4gICAgICogdGhlIGxpc3QgYG5vZGVzSW5EZWNyZWFzaW5nRGVwdGhgIGFuZCB0aGUgc2V0IGBjb250YWluZXJOb2Rlc2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVuc29yIFNvbWUgdGVuc29yIGluIGEgZ3JhcGguXG4gICAgICogQHBhcmFtIGZpbmlzaGVkTm9kZXMgU2V0IG9mIG5vZGVzIHdob3NlIHN1YmdyYXBocyBoYXZlIGJlZW4gdHJhdmVyc2VkXG4gICAgICogICAgICAgICBjb21wbGV0ZWx5LiBVc2VmdWwgdG8gcHJldmVudCBkdXBsaWNhdGVkIHdvcmsuXG4gICAgICogQHBhcmFtIG5vZGVzSW5Qcm9ncmVzcyBTZXQgb2Ygbm9kZXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZSBvbiB0aGVcbiAgICAgKiAgICAgICAgIHJlY3Vyc2lvbiBzdGFjay4gVXNlZnVsIHRvIGRldGVjdCBjeWNsZXMuXG4gICAgICogQHBhcmFtIGxheWVyIExheWVyIGZyb20gd2hpY2ggYHRlbnNvcmAgY29tZXMgZnJvbS4gSWYgbm90IHByb3ZpZGVkLFxuICAgICAqICAgd2lsbCBiZSBvYnRhaW5lZCBmcm9tIHRlbnNvci5zb3VyY2VMYXllci5cbiAgICAgKiBAcGFyYW0gbm9kZUluZGV4IE5vZGUgaW5kZXggZnJvbSB3aGljaCBgdGVuc29yYCBjb21lcyBmcm9tLlxuICAgICAqIEBwYXJhbSB0ZW5zb3JJbmRleCBUZW5zb3JJbmRleCBmcm9tIHdoaWNoIGB0ZW5zb3JgIGNvbWVzIGZyb20uXG4gICAgICpcbiAgICAgKiBAZXhjZXB0aW9uIFJ1bnRpbWVFcnJvciBpZiBhIGN5Y2xlIGlzIGRldGVjdGVkLlxuICAgICAqL1xuICAgIGNvbnN0IGJ1aWxkTWFwT2ZHcmFwaCA9XG4gICAgICAgICh0ZW5zb3I6IFN5bWJvbGljVGVuc29yLCBmaW5pc2hlZE5vZGVzOiBOb2RlW10sIG5vZGVzSW5Qcm9ncmVzczogTm9kZVtdLFxuICAgICAgICAgbGF5ZXI/OiBMYXllciwgbm9kZUluZGV4PzogbnVtYmVyLCB0ZW5zb3JJbmRleD86IG51bWJlcikgPT4ge1xuICAgICAgICAgIGlmIChsYXllciA9PSBudWxsIHx8IG5vZGVJbmRleCA9PSBudWxsIHx8IHRlbnNvckluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgIGxheWVyID0gdGVuc29yLnNvdXJjZUxheWVyO1xuICAgICAgICAgICAgbm9kZUluZGV4ID0gdGVuc29yLm5vZGVJbmRleDtcbiAgICAgICAgICAgIHRlbnNvckluZGV4ID0gdGVuc29yLnRlbnNvckluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBub2RlID0gbGF5ZXIuaW5ib3VuZE5vZGVzW25vZGVJbmRleF07XG5cbiAgICAgICAgICAvLyBQcmV2ZW50IGN5Y2xlcy5cbiAgICAgICAgICBpZiAobm9kZXNJblByb2dyZXNzLmluZGV4T2Yobm9kZSkgIT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgdGVuc29yICR7dGVuc29yLm5hbWV9IGF0IGxheWVyIFwiJHtsYXllci5uYW1lfVwiIGAgK1xuICAgICAgICAgICAgICAgICdpcyBwYXJ0IG9mIGEgY3ljbGUuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRG9uJ3QgcmVwZWF0IHdvcmsgZm9yIHNoYXJlZCBzdWJncmFwaHNcbiAgICAgICAgICBpZiAoZmluaXNoZWROb2Rlcy5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFVwZGF0ZSBjb250YWluZXJOb2Rlcy5cbiAgICAgICAgICB0aGlzLmNvbnRhaW5lck5vZGVzLmFkZChDb250YWluZXIubm9kZUtleShsYXllciwgbm9kZUluZGV4KSk7XG5cbiAgICAgICAgICAvLyBTdG9yZSB0aGUgdHJhdmVyc2FsIG9yZGVyIGZvciBsYXllciBzb3J0aW5nLlxuICAgICAgICAgIGlmICghKGxheWVyLmlkIGluIGxheWVySW5kaWNlcykpIHtcbiAgICAgICAgICAgIGxheWVySW5kaWNlc1tsYXllci5pZF0gPSBPYmplY3Qua2V5cyhsYXllckluZGljZXMpLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobm9kZXNJblByb2dyZXNzLmluZGV4T2Yobm9kZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBub2Rlc0luUHJvZ3Jlc3MucHVzaChub2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBQcm9wYWdhdGUgdG8gYWxsIHByZXZpb3VzIHRlbnNvcnMgY29ubmVjdGVkIHRvIHRoaXMgbm9kZS5cbiAgICAgICAgICBjb25zdCBudW1JbmJvdW5kTGF5ZXJzID0gbm9kZS5pbmJvdW5kTGF5ZXJzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUluYm91bmRMYXllcnM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgeCA9IG5vZGUuaW5wdXRUZW5zb3JzW2ldO1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBub2RlLmluYm91bmRMYXllcnNbaV07XG4gICAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSBub2RlLm5vZGVJbmRpY2VzW2ldO1xuICAgICAgICAgICAgY29uc3QgdGVuc29ySW5kZXggPSBub2RlLnRlbnNvckluZGljZXNbaV07XG4gICAgICAgICAgICBidWlsZE1hcE9mR3JhcGgoXG4gICAgICAgICAgICAgICAgeCwgZmluaXNoZWROb2Rlcywgbm9kZXNJblByb2dyZXNzLCBsYXllciwgbm9kZUluZGV4LFxuICAgICAgICAgICAgICAgIHRlbnNvckluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmluaXNoZWROb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIHdoaWxlIChub2Rlc0luUHJvZ3Jlc3MuaW5kZXhPZihub2RlKSA+PSAwKSB7XG4gICAgICAgICAgICBub2Rlc0luUHJvZ3Jlc3Muc3BsaWNlKG5vZGVzSW5Qcm9ncmVzcy5pbmRleE9mKG5vZGUpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXNJbkRlY3JlYXNpbmdEZXB0aC5wdXNoKG5vZGUpO1xuICAgICAgICB9O1xuXG4gICAgY29uc3QgZmluaXNoZWROb2RlczogTm9kZVtdID0gW107XG4gICAgY29uc3Qgbm9kZXNJblByb2dyZXNzOiBOb2RlW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5vdXRwdXRzKSB7XG4gICAgICBidWlsZE1hcE9mR3JhcGgoeCwgZmluaXNoZWROb2Rlcywgbm9kZXNJblByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXZlcnNlZE5vZGVzSW5EZWNyZWFzaW5nRGVwdGggPVxuICAgICAgICBub2Rlc0luRGVjcmVhc2luZ0RlcHRoLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiByZXZlcnNlZE5vZGVzSW5EZWNyZWFzaW5nRGVwdGgpIHtcbiAgICAgIG5vZGVJRFRvTm9kZVtub2RlLmlkXSA9IG5vZGU7XG4gICAgICAvLyBJZiB0aGUgZGVwdGggaXMgbm90IHNldCwgdGhlIG5vZGUgaGFzIG5vIG91dGJvdW5kIG5vZGVzIChkZXB0aCAwKS5cbiAgICAgIGlmICghKG5vZGUuaWQgaW4gbm9kZXNEZXB0aHMpKSB7XG4gICAgICAgIG5vZGVzRGVwdGhzW25vZGUuaWRdID0gMDtcbiAgICAgIH1cbiAgICAgIGxldCBkZXB0aCA9IG5vZGVzRGVwdGhzW25vZGUuaWRdO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGRlcHRoIG9mIHRoZSBjb3JyZXNwb25kaW5nIGxheWVyXG4gICAgICBjb25zdCBwcmV2aW91c0RlcHRoID1cbiAgICAgICAgICAobGF5ZXJzRGVwdGhzW25vZGUub3V0Ym91bmRMYXllci5pZF0gPT0gbnVsbCA/XG4gICAgICAgICAgICAgICAwIDpcbiAgICAgICAgICAgICAgIGxheWVyc0RlcHRoc1tub2RlLm91dGJvdW5kTGF5ZXIuaWRdKTtcblxuICAgICAgLypcbiAgICAgICAgSWYgd2UndmUgc2VlbiB0aGlzIGxheWVyIGJlZm9yZSBhdCBhIGhpZ2hlciBkZXB0aCwgd2Ugc2hvdWxkIHVzZSB0aGF0XG4gICAgICAgIGRlcHRoIGluc3RlYWQgb2YgdGhlIG5vZGUgZGVwdGguICBUaGlzIGlzIG5lY2Vzc2FyeSBmb3Igc2hhcmVkIGxheWVyc1xuICAgICAgICB0aGF0IGhhdmUgaW5wdXRzIGF0IGRpZmZlcmVudCBkZXB0aCBsZXZlbHMgaW4gdGhlIGdyYXBoLlxuICAgICAgKi9cbiAgICAgIGRlcHRoID0gTWF0aC5tYXgoZGVwdGgsIHByZXZpb3VzRGVwdGgpO1xuICAgICAgbGF5ZXJzRGVwdGhzW25vZGUub3V0Ym91bmRMYXllci5pZF0gPSBkZXB0aDtcbiAgICAgIGxheWVySURUb0xheWVyW25vZGUub3V0Ym91bmRMYXllci5pZF0gPSBub2RlLm91dGJvdW5kTGF5ZXI7XG4gICAgICBub2Rlc0RlcHRoc1tub2RlLmlkXSA9IGRlcHRoO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGRlcHRoIG9mIGluYm91bmQgbm9kZXMuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuaW5ib3VuZExheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpbmJvdW5kTGF5ZXIgPSBub2RlLmluYm91bmRMYXllcnNbaV07XG4gICAgICAgIGNvbnN0IG5vZGVJbmRleCA9IG5vZGUubm9kZUluZGljZXNbaV07XG4gICAgICAgIGNvbnN0IGluYm91bmROb2RlID0gaW5ib3VuZExheWVyLmluYm91bmROb2Rlc1tub2RlSW5kZXhdO1xuICAgICAgICBjb25zdCBwcmV2aW91c0RlcHRoID1cbiAgICAgICAgICAgIChub2Rlc0RlcHRoc1tpbmJvdW5kTm9kZS5pZF0gPT0gbnVsbCA/IDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNEZXB0aHNbaW5ib3VuZE5vZGUuaWRdKTtcbiAgICAgICAgbm9kZXNEZXB0aHNbaW5ib3VuZE5vZGUuaWRdID0gTWF0aC5tYXgoZGVwdGggKyAxLCBwcmV2aW91c0RlcHRoKTtcbiAgICAgICAgbm9kZUlEVG9Ob2RlW2luYm91bmROb2RlLmlkXSA9IGluYm91bmROb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIGEgZGljdCB7ZGVwdGg6IGxpc3Qgb2Ygbm9kZXMgd2l0aCB0aGlzIGRlcHRofVxuICAgIGNvbnN0IG5vZGVzQnlEZXB0aDoge1tkZXB0aDogc3RyaW5nXTogTm9kZVtdfSA9IHt9O1xuICAgIGZvciAoY29uc3Qgbm9kZUlEIGluIG5vZGVzRGVwdGhzKSB7XG4gICAgICBjb25zdCBkZXB0aCA9IG5vZGVzRGVwdGhzW25vZGVJRF07XG4gICAgICBpZiAoIShkZXB0aCBpbiBub2Rlc0J5RGVwdGgpKSB7XG4gICAgICAgIG5vZGVzQnlEZXB0aFtkZXB0aF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIG5vZGVzQnlEZXB0aFtkZXB0aF0ucHVzaChub2RlSURUb05vZGVbbm9kZUlEXSk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgYSBkaWN0IHtkZXB0aDogbGlzdCBvZiBsYXllcnMgd2l0aCB0aGlzIGRlcHRofVxuICAgIGNvbnN0IGxheWVyc0J5RGVwdGg6IHtbZGVwdGg6IHN0cmluZ106IExheWVyW119ID0ge307XG4gICAgZm9yIChjb25zdCBsYXllcklEIGluIGxheWVyc0RlcHRocykge1xuICAgICAgY29uc3QgZGVwdGggPSBsYXllcnNEZXB0aHNbbGF5ZXJJRF07XG4gICAgICBpZiAoIShkZXB0aCBpbiBsYXllcnNCeURlcHRoKSkge1xuICAgICAgICBsYXllcnNCeURlcHRoW2RlcHRoXSA9IFtdO1xuICAgICAgfVxuICAgICAgbGF5ZXJzQnlEZXB0aFtkZXB0aF0ucHVzaChsYXllcklEVG9MYXllcltsYXllcklEXSk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHNvcnRlZCBsaXN0IG9mIGxheWVyIGRlcHRocy5cbiAgICBsZXQgZGVwdGhLZXlzID0gT2JqZWN0LmtleXMobGF5ZXJzQnlEZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoeCA9PiBwYXJzZUludCh4LCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc29ydChnZW5lcmljX3V0aWxzLnJldmVyc2VOdW1iZXJDb21wYXJlKTtcblxuICAgIC8vIFNldCB0aGlzLmxheWVycyBhbmQgdGhpcy5sYXllcnNCeURlcHRoLlxuICAgIHRoaXMubGF5ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBkZXB0aCBvZiBkZXB0aEtleXMpIHtcbiAgICAgIGNvbnN0IGxheWVyc0ZvckRlcHRoID0gbGF5ZXJzQnlEZXB0aFtkZXB0aF07XG4gICAgICAvLyBDb250YWluZXIubGF5ZXJzIG5lZWRzIHRvIGhhdmUgYSBkZXRlcm1pbmlzdGljIG9yZGVyOlxuICAgICAgLy8gaGVyZSB3ZSBvcmRlciB0aGVtIGJ5IHRyYXZlcnNhbCBvcmRlci5cbiAgICAgIGxheWVyc0ZvckRlcHRoLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgYUluZGV4ID0gbGF5ZXJJbmRpY2VzW2EuaWRdO1xuICAgICAgICBjb25zdCBiSW5kZXggPSBsYXllckluZGljZXNbYi5pZF07XG4gICAgICAgIGlmIChhSW5kZXggPCBiSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFJbmRleCA+IGJJbmRleCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVyc0ZvckRlcHRoKSB7XG4gICAgICAgIGlmIChsYXllciBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgICAgIHRoaXMuaW50ZXJuYWxDb250YWluZXJSZWZzLnB1c2gobGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxheWVyc0J5RGVwdGggPSBsYXllcnNCeURlcHRoO1xuXG4gICAgLy8gR2V0IHNvcnRlZCBsaXN0IG9mIG5vZGUgZGVwdGhzO1xuICAgIGRlcHRoS2V5cyA9IE9iamVjdC5rZXlzKG5vZGVzQnlEZXB0aClcbiAgICAgICAgICAgICAgICAgICAgLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoZ2VuZXJpY191dGlscy5yZXZlcnNlTnVtYmVyQ29tcGFyZSk7XG5cbiAgICAvLyBDaGVjayB0aGF0IGFsbCB0ZW5zb3JzIHJlcXVpcmVkIGFyZSBjb21wdXRhYmxlLlxuICAgIC8vIGNvbXB1dGFibGVfdGVuc29yczogYWxsIHRlbnNvcnMgaW4gdGhlIGdyYXBoXG4gICAgLy8gdGhhdCBjYW4gYmUgY29tcHV0ZWQgZnJvbSB0aGUgaW5wdXRzIHByb3ZpZGVkLlxuICAgIGNvbnN0IGNvbXB1dGFibGVUZW5zb3JzID0gdGhpcy5pbnB1dHMuc2xpY2UoKTtcblxuICAgIC8vIFRvIHByb3ZpZGUgYSBiZXR0ZXIgZXJyb3IgbXNnLlxuICAgIGNvbnN0IGxheWVyc1dpdGhDb21wbGV0ZUlucHV0OiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgZGVwdGggb2YgZGVwdGhLZXlzKSB7XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXNCeURlcHRoW2RlcHRoXSkge1xuICAgICAgICBjb25zdCBsYXllciA9IG5vZGUub3V0Ym91bmRMYXllcjtcbiAgICAgICAgaWYgKGxheWVyICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHggb2Ygbm9kZS5pbnB1dFRlbnNvcnMpIHtcbiAgICAgICAgICAgIGlmIChjb21wdXRhYmxlVGVuc29ycy5pbmRleE9mKHgpID09PSAtMSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICAgICAgICAgICAgYEdyYXBoIGRpc2Nvbm5lY3RlZDogY2Fubm90IG9idGFpbiB2YWx1ZSBmb3IgdGVuc29yICR7eH1gICtcbiAgICAgICAgICAgICAgICAgIGAgYXQgbGF5ZXIgXCIke2xheWVyLm5hbWV9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgJ1RoZSBmb2xsb3dpbmcgcHJldmlvdXMgbGF5ZXJzIHdlcmUgYWNjZXNzZWQgd2l0aG91dCAnICtcbiAgICAgICAgICAgICAgICAgIGBpc3N1ZTogJHtsYXllcnNXaXRoQ29tcGxldGVJbnB1dH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCB4IG9mIG5vZGUub3V0cHV0VGVuc29ycykge1xuICAgICAgICAgICAgY29tcHV0YWJsZVRlbnNvcnMucHVzaCh4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGF5ZXJzV2l0aENvbXBsZXRlSW5wdXQucHVzaChsYXllci5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB0aGlzLmNvbnRhaW5lck5vZGVzIGFuZCB0aGlzLm5vZGVzQnlEZXB0aC5cbiAgICB0aGlzLm5vZGVzQnlEZXB0aCA9IG5vZGVzQnlEZXB0aDtcblxuICAgIC8vIEVuc3VyZSBuYW1lIHVuaWNpdHksIHdoaWNoIHdpbGwgYmUgY3J1Y2lhbCBmb3Igc2VyaWFsaXphdGlvblxuICAgIC8vIChzaW5jZSBzZXJpYWxpemVkIG5vZGVzIHJlZmVyIHRvIGxheWVycyBieSB0aGVpciBuYW1lKS5cbiAgICBjb25zdCBhbGxOYW1lcyA9IHRoaXMubGF5ZXJzLm1hcCh4ID0+IHgubmFtZSk7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGFsbE5hbWVzKSB7XG4gICAgICBjb25zdCBudW1PY2N1cnJlbmNlcyA9IGFsbE5hbWVzLmZpbHRlcih4ID0+IHggPT09IG5hbWUpLmxlbmd0aDtcbiAgICAgIGlmIChudW1PY2N1cnJlbmNlcyAhPT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICAgICAgYFRoZSBuYW1lIFwiJHtuYW1lfVwiIGlzIHVzZWQgJHtudW1PY2N1cnJlbmNlc30gdGltZXMgYCArXG4gICAgICAgICAgICAnaW4gdGhlIG1vZGVsLiBBbGwgbGF5ZXIgbmFtZXMgc2hvdWxkIGJlIHVuaXF1ZS4gTGF5ZXIgbmFtZXM6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoYWxsTmFtZXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMYXllciBwYXJhbWV0ZXJzLlxuICAgIC8vIFRoZSBuZXcgY29udGFpbmVyIHN0YXJ0cyB3aXRoIGEgc2luZ2xlIGluYm91bmQgbm9kZVxuICAgIC8vIGZvciBpdHMgaW5wdXRzLCBhbmQgbm8gb3V0Ym91bmQgbm9kZXMuXG4gICAgLy8gV2lsbCBiZSBhcHBlbmRlZCB0byBieSBmdXR1cmUgY2FsbHMgdG8gYXBwbHkoKS5cbiAgICB0aGlzLm91dGJvdW5kTm9kZXMgPSBbXTtcbiAgICAvLyBXaWxsIGJlIGFwcGVuZGVkIHRvIGJlbG93LCBhbmQgYnkgZnV0dXJlIGNhbGxzIHRvIGFwcGx5KCkuXG4gICAgdGhpcy5pbmJvdW5kTm9kZXMgPSBbXTtcblxuICAgIC8vIENyZWF0ZSB0aGUgbm9kZSBsaW5raW5nIGludGVybmFsIGlucHV0cyB0byBpbnRlcm5hbCBvdXRwdXRzLlxuICAgIC8vIChUaGlzIGNhbGwgaGFzIHNpZGUgZWZmZWN0cy4pXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXG4gICAgbmV3IE5vZGUoe1xuICAgICAgb3V0Ym91bmRMYXllcjogdGhpcyxcbiAgICAgIGluYm91bmRMYXllcnM6IFtdLFxuICAgICAgbm9kZUluZGljZXM6IFtdLFxuICAgICAgdGVuc29ySW5kaWNlczogW10sXG4gICAgICBpbnB1dFRlbnNvcnM6IHRoaXMuaW5wdXRzLFxuICAgICAgb3V0cHV0VGVuc29yczogdGhpcy5vdXRwdXRzLFxuICAgICAgaW5wdXRNYXNrczogdGhpcy5pbnB1dHMubWFwKHggPT4gbnVsbCksXG4gICAgICBvdXRwdXRNYXNrczogdGhpcy5vdXRwdXRzLm1hcCh4ID0+IG51bGwpLFxuICAgICAgaW5wdXRTaGFwZXM6IHRoaXMuaW5wdXRzLm1hcCh4ID0+IHguc2hhcGUpLFxuICAgICAgb3V0cHV0U2hhcGVzOiB0aGlzLm91dHB1dHMubWFwKHggPT4geC5zaGFwZSlcbiAgICB9KTtcbiAgICB0aGlzLmJ1aWx0ID0gdHJ1ZTtcbiAgICB0aGlzLl9yZWZDb3VudCA9IDE7ICAvLyBUaGUgcmVmIGNvdW50IG9mIGEgY29udGFpbmVyIGFsd2F5cyBzdGFydCBhdCAxLlxuICB9XG5cbiAgcHJvdGVjdGVkIGFzc2VydE5vdERpc3Bvc2VkKCkge1xuICAgIGlmICh0aGlzLl9yZWZDb3VudCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb250YWluZXIgJyR7dGhpcy5uYW1lfScgaXMgYWxyZWFkeSBkaXNwb3NlZC5gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBkaXNwb3NlIGEgTGF5ZXJzTW9kZWwncyB3ZWlnaHRzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkZWNyZWFzZSB0aGUgcmVmZXJlbmNlIGNvdW50IG9mIHRoZSBMYXllcnNNb2RlbCBvYmplY3QgYnkgMS5cbiAgICpcbiAgICogQSBMYXllcnNNb2RlbCBpcyByZWZlcmVuY2UtY291bnRlZC4gSXRzIHJlZmVyZW5jZSBjb3VudCBpcyBpbmNyZW1lbnRlZCBieSAxXG4gICAqIHdoZW4gaXQgaXMgZmlyc3QgY29uc3RydWN0ZWQgYW5kIHdoZW4gaXQgaXMgdXNlZCBhcyBhIExheWVyIG9mIGFub3RoZXJcbiAgICogTGF5ZXJzTW9kZWwuXG4gICAqXG4gICAqIElmIHRoZSByZWZlcmVuY2UgY291bnQgb2YgYSBMYXllcnNNb2RlbCBiZWNvbWVzIDAsIHRoZSBgZGlzcG9zZWAgbWV0aG9kIG9mXG4gICAqIGFsbCBpdHMgY29uc3RpdHVlbnQgYExheWVyYHMgd2lsbCBiZSBjYWxsZWQuXG4gICAqXG4gICAqIE5vdGU6IElmIHRoZSByZWZlcmVuY2UgY291bnQgaXMgZ3JlYXRlciB0aGFuIDAgYWZ0ZXIgdGhlIGRlY3JlbWVudCwgdGhlXG4gICAqIGBkaXNwb3NlYCBtZXRob2Qgb2YgaXRzIGNvbnN0aXR1ZW50IGBMYXllcmBzIHdpbGwgKm5vdCogYmUgY2FsbGVkLlxuICAgKlxuICAgKiBBZnRlciBhIExheWVyc01vZGVsIGlzIGRpc3Bvc2VkLCBpdCBjYW5ub3QgYmUgdXNlZCBpbiBjYWxscyBzdWNoIGFzXG4gICAqICdwcmVkaWN0YCwgYGV2YWx1YXRlYCBvciBgZml0YCBhbnltb3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIERpc3Bvc2VSZXN1bHQgT2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAqICAgLSByZWZDb3VudEFmdGVyRGlzcG9zZTogVGhlIHJlZmVyZW5jZSBjb3VudCBvZiB0aGUgTGF5ZXJzTW9kZWwgYWZ0ZXIgdGhpc1xuICAgKiAgICAgYGRpc3Bvc2UoKWAgY2FsbC5cbiAgICogICAtIG51bURpc3Bvc2VkVmFyaWFibGVzOiBOdW1iZXIgb2YgYHRmLlZhcmlhYmxlYHMgKGkuZS4sIHdlaWdodHMpIGRpc3Bvc2VkXG4gICAqICAgICBkdXJpbmcgdGhpcyBgZGlzcG9zZSgpYCBjYWxsLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGxheWVyIGlzIG5vdCBidWlsdCB5ZXQsIG9yIGlmIHRoZSBMYXllcnNNb2RlbCBoYXNcbiAgICogICBhbHJlYWR5IGJlZW4gZGlzcG9zZWQuXG4gICAqL1xuICBkaXNwb3NlKCk6IERpc3Bvc2VSZXN1bHQge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGlzcG9zZWQoKTtcbiAgICBjb25zdCByZXN1bHQ6XG4gICAgICAgIERpc3Bvc2VSZXN1bHQgPSB7cmVmQ291bnRBZnRlckRpc3Bvc2U6IG51bGwsIG51bURpc3Bvc2VkVmFyaWFibGVzOiAwfTtcbiAgICBpZiAoLS10aGlzLl9yZWZDb3VudCA9PT0gMCkge1xuICAgICAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLmxheWVycykge1xuICAgICAgICByZXN1bHQubnVtRGlzcG9zZWRWYXJpYWJsZXMgKz0gbGF5ZXIuZGlzcG9zZSgpLm51bURpc3Bvc2VkVmFyaWFibGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsIGRpc3Bvc2Ugb24gZWFjaCBpbnRlcm5hbGx5IGNyZWF0ZWQgY29udGFpbmVyIGxheWVyIGFnYWluIHRvIGVuc3VyZVxuICAgICAgLy8gdGhlaXIgcmVmQ291bnRzIGhpdCB6ZXJvIGFuZCB0aGVpciB0ZW5zb3JzIGFyZSBzdWJzZXF1ZW50bHkgZGVsZXRlZC5cbiAgICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHRoaXMuaW50ZXJuYWxDb250YWluZXJSZWZzKSB7XG4gICAgICAgIHJlc3VsdC5udW1EaXNwb3NlZFZhcmlhYmxlcyArPSBjb250YWluZXIuZGlzcG9zZSgpLm51bURpc3Bvc2VkVmFyaWFibGVzO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQucmVmQ291bnRBZnRlckRpc3Bvc2UgPSB0aGlzLl9yZWZDb3VudDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0IHRyYWluYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFpbmFibGVfO1xuICB9XG5cbiAgc2V0IHRyYWluYWJsZSh0cmFpbmFibGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICgobGF5ZXIgYXMgYW55KS5fdHJhaW5hYmxlV2VpZ2h0cyBhcyBMYXllclZhcmlhYmxlW10pXG4gICAgICAgICAgLmZvckVhY2godyA9PiB3LnRyYWluYWJsZSA9IHRyYWluYWJsZSk7XG4gICAgfSk7XG4gICAgdGhpcy50cmFpbmFibGVfID0gdHJhaW5hYmxlO1xuICB9XG5cbiAgZ2V0IHRyYWluYWJsZVdlaWdodHMoKTogTGF5ZXJWYXJpYWJsZVtdIHtcbiAgICAvLyBQb3J0aW5nIE5vdGU6IFRoaXMgY2hlY2sgYmVsb3cgaXMgdG8gcHJldmVudCBlcnJvcnMgd2hlcmUgdGhlXG4gICAgLy8gICBfdHJhaW5hYmxlV2VpZ2h0cyBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IGNsYXNzIChMYXllcikgZ2V0c1xuICAgIC8vICAgaW5hZHZlcnRlbnRseSB1c2VkLlxuICAgIGlmICh0aGlzLl90cmFpbmFibGVXZWlnaHRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICdDb250YWluZXIgaW5zdGFuY2UgdW5leHBlY3RlZGx5IGNvbnRhaW5zIF90cmFpbmFibGVXZWlnaHRzLicgK1xuICAgICAgICAgICdUaGUgdHJhaW5hYmxlIHdlaWdodHMgb2YgYSBDb250YWluZXIgYXJlIGEgdW5pb24gb2YgdGhlICcgK1xuICAgICAgICAgICd0cmFpbmFibGUgd2VpZ2h0cyBvZiBpdHMgY29uc2l0dWVudCBMYXllcnMuIEl0cyBvd24gJyArXG4gICAgICAgICAgJ190cmFpbmFibGVXZWlnaHRzIG11c3QgcmVtYWluIGFuIGVtcHR5IEFycmF5LicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50cmFpbmFibGUpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IHdlaWdodHM6IExheWVyVmFyaWFibGVbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgIHdlaWdodHMgPSB3ZWlnaHRzLmNvbmNhdChsYXllci50cmFpbmFibGVXZWlnaHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHdlaWdodHM7XG4gIH1cblxuICBnZXQgbm9uVHJhaW5hYmxlV2VpZ2h0cygpOiBMYXllclZhcmlhYmxlW10ge1xuICAgIGNvbnN0IHdlaWdodHM6IExheWVyVmFyaWFibGVbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgIHdlaWdodHMucHVzaCguLi5sYXllci5ub25UcmFpbmFibGVXZWlnaHRzKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnRyYWluYWJsZSkge1xuICAgICAgY29uc3QgdHJhaW5hYmxlV2VpZ2h0czogTGF5ZXJWYXJpYWJsZVtdID0gW107XG4gICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIHRoaXMubGF5ZXJzKSB7XG4gICAgICAgIHRyYWluYWJsZVdlaWdodHMucHVzaCguLi5sYXllci50cmFpbmFibGVXZWlnaHRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmFpbmFibGVXZWlnaHRzLmNvbmNhdCh3ZWlnaHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHdlaWdodHM7XG4gIH1cblxuICBnZXQgd2VpZ2h0cygpOiBMYXllclZhcmlhYmxlW10ge1xuICAgIHJldHVybiB0aGlzLnRyYWluYWJsZVdlaWdodHMuY29uY2F0KHRoaXMubm9uVHJhaW5hYmxlV2VpZ2h0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYWxsIGxheWVyIHdlaWdodHMgZnJvbSBhIEpTT04gb2JqZWN0LlxuICAgKlxuICAgKiBQb3J0aW5nIE5vdGU6IEhERjUgd2VpZ2h0IGZpbGVzIGNhbm5vdCBiZSBkaXJlY3RseSBsb2FkZWQgaW4gSmF2YVNjcmlwdCAvXG4gICAqICAgVHlwZVNjcmlwdC4gVGhlIHV0aWxpdHkgc2NyaXB0IGF0IGBzY3JpcHRzL3B5a2VyYXMucHlgIG9mZmVycyBtZWFuc1xuICAgKiAgIHRvIGNvbnZlcnQgdGhlbSBpbnRvIEpTT04gc3RyaW5ncyBjb21wYXRpYmxlIHdpdGggdGhpcyBtZXRob2QuXG4gICAqIFBvcnRpbmcgTm90ZTogVGVuc29yRmxvdy5qcyBMYXllcnMgc3VwcG9ydHMgb25seSBsb2FkaW5nIGJ5IG5hbWUgY3VycmVudGx5LlxuICAgKlxuICAgKiBAcGFyYW0gd2VpZ2h0cyBBIEpTT04gbWFwcGluZyB3ZWlnaHQgbmFtZXMgdG8gd2VpZ2h0IHZhbHVlcyBhcyBuZXN0ZWRcbiAgICogICBhcnJheXMgb2YgbnVtYmVycywgb3IgYSBgTmFtZWRUZW5zb3JNYXBgLCBpLmUuLCBhIEpTT04gbWFwcGluZyB3ZWlnaHRcbiAgICogICBuYW1lcyB0byBgdGYuVGVuc29yYCBvYmplY3RzLlxuICAgKiBAcGFyYW0gc3RyaWN0IFJlcXVpcmUgdGhhdCB0aGUgcHJvdmlkZWQgd2VpZ2h0cyBleGFjdGx5IG1hdGNoIHRob3NlXG4gICAqICAgcmVxdWlyZWQgYnkgdGhlIGNvbnRhaW5lci4gIERlZmF1bHQ6IGB0cnVlYC4gIFBhc3NpbmcgYGZhbHNlYCBtZWFucyB0aGF0XG4gICAqICAgZXh0cmEgd2VpZ2h0cyBhbmQgbWlzc2luZyB3ZWlnaHRzIHdpbGwgYmUgc2lsZW50bHkgaWdub3JlZC5cbiAgICovXG4gIGxvYWRXZWlnaHRzKHdlaWdodHM6IE5hbWVkVGVuc29yTWFwLCBzdHJpY3QgPSB0cnVlKSB7XG4gICAgY29uc3QgbmFtZVRvV2VpZ2h0OiB7W25hbWU6IHN0cmluZ106IExheWVyVmFyaWFibGV9ID0ge307XG4gICAgbGV0IHRvdGFsV2VpZ2h0c0NvdW50ID0gMDtcbiAgICBmb3IgKGNvbnN0IGxheWVyIG9mIHRoaXMubGF5ZXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IHdlaWdodCBvZiBsYXllci53ZWlnaHRzKSB7XG4gICAgICAgIGlmIChuYW1lVG9XZWlnaHRbd2VpZ2h0Lm9yaWdpbmFsTmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKGBEdXBsaWNhdGUgd2VpZ2h0IG5hbWU6ICR7d2VpZ2h0Lm9yaWdpbmFsTmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lVG9XZWlnaHRbd2VpZ2h0Lm9yaWdpbmFsTmFtZV0gPSB3ZWlnaHQ7XG4gICAgICAgIHRvdGFsV2VpZ2h0c0NvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgd2VpZ2h0VmFsdWVUdXBsZXM6IEFycmF5PFtMYXllclZhcmlhYmxlLCBUZW5zb3JdPiA9IFtdO1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiB3ZWlnaHRzKSB7XG4gICAgICAvLyBURiAyLjIuMCBhZGRlZCBjZWxsIG5hbWUgdG8gdGhlIHdlaWdodCBuYW1lIGluIHRoZSBmb3JtYXQgb2ZcbiAgICAgIC8vIGxheWVyX25hbWUvY2VsbF9uYW1lL3dlaWdodF9uYW1lLCB3ZSBuZWVkIHRvIHJlbW92ZVxuICAgICAgLy8gdGhlIGlubmVyIGNlbGwgbmFtZS5cbiAgICAgIGxldCB2YWxpZGF0ZWROYW1lID0gbmFtZTtcbiAgICAgIGlmIChuYW1lVG9XZWlnaHRbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0b2tlbnMgPSBuYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgIGNvbnN0IHNob3J0ZW5OYW1lQXJyYXkgPVxuICAgICAgICAgICAgdG9rZW5zLnNsaWNlKDAsIC0yKS5jb25jYXQoW3Rva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV1dKTtcbiAgICAgICAgdmFsaWRhdGVkTmFtZSA9IHNob3J0ZW5OYW1lQXJyYXkuam9pbignLycpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWVUb1dlaWdodFt2YWxpZGF0ZWROYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIHdlaWdodFZhbHVlVHVwbGVzLnB1c2goW25hbWVUb1dlaWdodFt2YWxpZGF0ZWROYW1lXSwgd2VpZ2h0c1tuYW1lXV0pO1xuICAgICAgfSBlbHNlIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgICBgUHJvdmlkZWQgd2VpZ2h0IGRhdGEgaGFzIG5vIHRhcmdldCB2YXJpYWJsZTogJHtuYW1lfWApO1xuICAgICAgfVxuICAgICAgZGVsZXRlIG5hbWVUb1dlaWdodFt2YWxpZGF0ZWROYW1lXTtcbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAvLyBDaGVjayB0aGF0IGFsbCB3ZWlnaHRzIGFyZSBzZXQuXG4gICAgICBjb25zdCB1bnNldE5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgZm9yIChjb25zdCBuYW1lIGluIG5hbWVUb1dlaWdodCkge1xuICAgICAgICB1bnNldE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAodW5zZXROYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgYCR7dW5zZXROYW1lcy5sZW5ndGh9IG9mICR7XG4gICAgICAgICAgICAgICAgdG90YWxXZWlnaHRzQ291bnR9IHdlaWdodHMgYXJlIG5vdCBzZXQ6IGAgK1xuICAgICAgICAgICAgYCR7dW5zZXROYW1lc31gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiYXRjaFNldFZhbHVlKHdlaWdodFZhbHVlVHVwbGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsIHNoYXJlZCBiZXR3ZWVuIGRpZmZlcmVudCBzZXJpYWxpemF0aW9uIG1ldGhvZHMuXG4gICAqIEByZXR1cm5zIExheWVyc01vZGVsIGNvbmZpZyB3aXRoIEtlcmFzIHZlcnNpb24gaW5mb3JtYXRpb24gYWRkZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlZENvbmZpZygpOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3Qge1xuICAgIGNvbnN0IHRoZUNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgY29uc3QgbW9kZWxDb25maWc6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCA9IHt9O1xuICAgIG1vZGVsQ29uZmlnWydjbGFzc05hbWUnXSA9IHRoaXMuZ2V0Q2xhc3NOYW1lKCk7XG4gICAgbW9kZWxDb25maWdbJ2NvbmZpZyddID0gdGhlQ29uZmlnO1xuICAgIG1vZGVsQ29uZmlnWydrZXJhc1ZlcnNpb24nXSA9IGB0ZmpzLWxheWVycyAke2xheWVyc1ZlcnNpb259YDtcbiAgICAvLyBUT0RPKG5pZWxzZW5lKTogUmVwbGFjZSBzb21ldGhpbmcgbGlrZSBLLmJhY2tlbmQoKSBvbmNlXG4gICAgLy8gcG9zc2libGUuXG4gICAgbW9kZWxDb25maWdbJ2JhY2tlbmQnXSA9ICdUZW5zb3JGbG93LmpzJztcbiAgICByZXR1cm4gbW9kZWxDb25maWc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEpTT04gc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5ldHdvcmsgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogVG8gbG9hZCBhIG5ldHdvcmsgZnJvbSBhIEpTT04gc2F2ZSBmaWxlLCB1c2VcbiAgICogbW9kZWxzLm1vZGVsRnJvbUpTT04oanNvblN0cmluZyk7XG4gICAqIEBwYXJhbSBleHRyYUpzb25BcmdzIFVudXNlZCBpbiB0ZmpzLWxheWVycywgbWFpbnRhaW5lZCBmb3IgUHlLZXJhc1xuICAgKiBAcGFyYW0gcmV0dXJuU3RyaW5nIFdoZXRoZXIgdGhlIHJldHVybiB2YWx1ZSBzaG91bGQgYmUgc3RyaW5naWZpZWRcbiAgICogICAgKGRlZmF1bHQ6IGB0cnVlYCkuXG4gICAqIEByZXR1cm5zIGEgSlNPTiBzdHJpbmcgaWYgYHJldHVyblN0cmluZ2AgKGRlZmF1bHQpLCBvciBhIEpTT04gb2JqZWN0IGlmXG4gICAqICAgYCFyZXR1cm5TdHJpbmdgLlxuICAgKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB0b0pTT04odW51c2VkPzogYW55LCByZXR1cm5TdHJpbmcgPSB0cnVlKTogc3RyaW5nfFB5SnNvbkRpY3Qge1xuICAgIGNvbnN0IG1vZGVsQ29uZmlnID0gY29udmVydFRzVG9QeXRob25pYyh0aGlzLnVwZGF0ZWRDb25maWcoKSkgYXMgUHlKc29uRGljdDtcbiAgICByZXR1cm4gcmV0dXJuU3RyaW5nID8gSlNPTi5zdHJpbmdpZnkobW9kZWxDb25maWcpIDogbW9kZWxDb25maWc7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGUgbW9kZWwgb24gbmV3IGlucHV0cy5cbiAgICpcbiAgICogSW4gdGhpcyBjYXNlIGBjYWxsYCBqdXN0IHJlYXBwbGllcyBhbGwgb3BzIGluIHRoZSBncmFwaCB0byB0aGUgbmV3IGlucHV0c1xuICAgKiAoZS5nLiBidWlsZCBhIG5ldyBjb21wdXRhdGlvbmFsIGdyYXBoIGZyb20gdGhlIHByb3ZpZGVkIGlucHV0cykuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dHMgQSB0ZW5zb3Igb3IgbGlzdCBvZiB0ZW5zb3JzLlxuICAgKiBAcGFyYW0gbWFzayBBIG1hc2sgb3IgbGlzdCBvZiBtYXNrcy4gQSBtYXNrIGNhbiBiZSBlaXRoZXIgYSB0ZW5zb3Igb3IgbnVsbFxuICAgKiAgIChubyBtYXNrKS5cbiAgICpcbiAgICogQHJldHVybiBBIHRlbnNvciBpZiB0aGVyZSBpcyBhIHNpbmdsZSBvdXRwdXQsIG9yIGEgbGlzdCBvZiB0ZW5zb3JzIGlmIHRoZXJlXG4gICAqICAgYXJlIG1vcmUgdGhhbiBvbmUgb3V0cHV0cy5cbiAgICovXG4gIGNhbGwoaW5wdXRzOiBUZW5zb3J8VGVuc29yW10sIGt3YXJnczogS3dhcmdzKTogVGVuc29yfFRlbnNvcltdIHtcbiAgICByZXR1cm4gdGlkeSgoKSA9PiB7XG4gICAgICBpbnB1dHMgPSBnZW5lcmljX3V0aWxzLnRvTGlzdChpbnB1dHMpO1xuICAgICAgY29uc3QgZmVlZERpY3QgPSBuZXcgRmVlZERpY3QoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnB1dHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZmVlZERpY3QuYWRkKHRoaXMuaW5wdXRzW2ldLCBpbnB1dHNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4ZWN1dGUodGhpcy5vdXRwdXRzLCBmZWVkRGljdCwga3dhcmdzKSBhcyBUZW5zb3IgfCBUZW5zb3JbXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBhbiBvdXRwdXQgbWFzayB0ZW5zb3IuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dHMgVGVuc29yIG9yIGxpc3Qgb2YgdGVuc29ycy5cbiAgICogQHBhcmFtIG1hc2sgVGVuc29yIG9yIGxpc3Qgb2YgdGVuc29ycy5cbiAgICpcbiAgICogQHJldHVybiBudWxsIG9yIGEgdGVuc29yIChvciBsaXN0IG9mIHRlbnNvcnMsIG9uZSBwZXIgb3V0cHV0IHRlbnNvciBvZiB0aGVcbiAgICogbGF5ZXIpLlxuICAgKi9cbiAgY29tcHV0ZU1hc2soaW5wdXRzOiBUZW5zb3J8VGVuc29yW10sIG1hc2s/OiBUZW5zb3J8VGVuc29yW10pOiBUZW5zb3JcbiAgICAgIHxUZW5zb3JbXSB7XG4gICAgcmV0dXJuIHRpZHkoKCkgPT4ge1xuICAgICAgaW5wdXRzID0gZ2VuZXJpY191dGlscy50b0xpc3QoaW5wdXRzKTtcbiAgICAgIGxldCBtYXNrczogVGVuc29yW107XG4gICAgICBpZiAobWFzayA9PSBudWxsKSB7XG4gICAgICAgIG1hc2tzID0gZ2VuZXJpY191dGlscy5weUxpc3RSZXBlYXQobnVsbCwgaW5wdXRzLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXNrcyA9IGdlbmVyaWNfdXRpbHMudG9MaXN0KG1hc2spO1xuICAgICAgfVxuICAgICAgLy8gVE9ETyhtaWNoYWVsdGVycnkpOiBBZGQgc3VwcG9ydCBmb3IgbWFzayBjYWNoaW5nLlxuICAgICAgcmV0dXJuIHRoaXMucnVuSW50ZXJuYWxHcmFwaChpbnB1dHMsIG1hc2tzKVsxXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgb3V0cHV0IHNoYXBlIG9mIHRoZSBsYXllci5cbiAgICpcbiAgICogQXNzdW1lcyB0aGF0IHRoZSBsYXllciB3aWxsIGJlIGJ1aWx0IHRvIG1hdGNoIHRoYXQgaW5wdXQgc2hhcGUgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dFNoYXBlIEEgc2hhcGUgKHR1cGxlIG9mIGludGVnZXJzKSBvciBhIGxpc3Qgb2Ygc2hhcGUgdHVwbGVzXG4gICAqICAgKG9uZSBwZXIgb3V0cHV0IHRlbnNvciBvZiB0aGUgbGF5ZXIpLiBTaGFwZSB0dXBsZXMgY2FuIGluY2x1ZGUgbnVsbCBmb3JcbiAgICogICBmcmVlIGRpbWVuc2lvbnMsIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICovXG4gIGNvbXB1dGVPdXRwdXRTaGFwZShpbnB1dFNoYXBlOiBTaGFwZXxTaGFwZVtdKTogU2hhcGV8U2hhcGVbXSB7XG4gICAgY29uc3QgaW5wdXRTaGFwZXMgPSB0eXBlc191dGlscy5ub3JtYWxpemVTaGFwZUxpc3QoaW5wdXRTaGFwZSk7XG4gICAgaWYgKGlucHV0U2hhcGVzLmxlbmd0aCAhPT0gdGhpcy5pbnB1dExheWVycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIGlucHV0U2hhcGUgYXJndW1lbnQgJHtpbnB1dFNoYXBlfTogYCArXG4gICAgICAgICAgYG1vZGVsIGhhcyAke3RoaXMuaW5wdXRMYXllcnMubGVuZ3RofSB0ZW5zb3IgaW5wdXRzLmApO1xuICAgIH1cblxuICAgIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogQWRkIGNhY2hpbmdcbiAgICBjb25zdCBsYXllcnNUb091dHB1dFNoYXBlczoge1tzaGFwZUtleTogc3RyaW5nXTogU2hhcGV9ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFNoYXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmlucHV0TGF5ZXJzW2ldO1xuICAgICAgY29uc3QgaW5wdXRTaGFwZSA9IGlucHV0U2hhcGVzW2ldO1xuICAgICAgLy8gSXQncyBhbiBpbnB1dCBsYXllcjogY29tcHV0ZU91dHB1dFNoYXBlIGlzIGlkZW50aXR5LFxuICAgICAgLy8gYW5kIHRoZXJlIGlzIG9ubHkgb25lIG5vZGUgYW5kIG9uZSB0ZW5zb3Igb3V0cHV0LlxuICAgICAgY29uc3Qgc2hhcGVLZXkgPSBsYXllci5uYW1lICsgJ18wXzAnO1xuICAgICAgbGF5ZXJzVG9PdXRwdXRTaGFwZXNbc2hhcGVLZXldID0gaW5wdXRTaGFwZTtcbiAgICB9XG5cbiAgICBjb25zdCBkZXB0aEtleXMgPSBPYmplY3Qua2V5cyh0aGlzLm5vZGVzQnlEZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoZ2VuZXJpY191dGlscy5yZXZlcnNlTnVtYmVyQ29tcGFyZSk7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG5vZGVzLCBieSBkZXB0aCBsZXZlbC5cbiAgICBpZiAoZGVwdGhLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAoY29uc3QgZGVwdGggb2YgZGVwdGhLZXlzKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5ub2Rlc0J5RGVwdGhbZGVwdGhdO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGFsd2F5cyBhIHNpbmdsZSBsYXllciwgbmV2ZXIgYSBsaXN0LlxuICAgICAgICAgIGNvbnN0IGxheWVyID0gbm9kZS5vdXRib3VuZExheWVyO1xuICAgICAgICAgIGlmICh0aGlzLmlucHV0TGF5ZXJzLm1hcCh4ID0+IHguaWQpLmluZGV4T2YobGF5ZXIuaWQpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gV2UndmUgYWxyZWFkeSBjb3ZlcmVkIHRoZSBpbnB1dCBsYXllcnMgYSBmZXcgbGluZXMgYWJvdmUuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUG90ZW50aWFsbHkgcmVkdW5kYW50IGxpc3QsIHNhbWUgc2l6ZSBvZiBub2RlLmlucHV0VGVuc29ycy5cbiAgICAgICAgICBjb25zdCBpbnB1dFNoYXBlczogU2hhcGVbXSA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5pbmJvdW5kTGF5ZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBpbmJvdW5kTGF5ZXIgPSBub2RlLmluYm91bmRMYXllcnNbal07XG4gICAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSBub2RlLm5vZGVJbmRpY2VzW2pdO1xuICAgICAgICAgICAgY29uc3QgdGVuc29ySW5kZXggPSBub2RlLnRlbnNvckluZGljZXNbal07XG4gICAgICAgICAgICBjb25zdCBzaGFwZUtleSA9IGAke2luYm91bmRMYXllci5uYW1lfV8ke25vZGVJbmRleH1fJHt0ZW5zb3JJbmRleH1gO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRTaGFwZSA9IGxheWVyc1RvT3V0cHV0U2hhcGVzW3NoYXBlS2V5XTtcbiAgICAgICAgICAgIGlucHV0U2hhcGVzLnB1c2goaW5wdXRTaGFwZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgb3V0cHV0U2hhcGUgPSBsYXllci5jb21wdXRlT3V0cHV0U2hhcGUoXG4gICAgICAgICAgICAgIGdlbmVyaWNfdXRpbHMuc2luZ2xldG9uT3JBcnJheShpbnB1dFNoYXBlcykpO1xuXG4gICAgICAgICAgY29uc3Qgb3V0cHV0U2hhcGVzID0gdHlwZXNfdXRpbHMubm9ybWFsaXplU2hhcGVMaXN0KG91dHB1dFNoYXBlKTtcbiAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSBsYXllci5pbmJvdW5kTm9kZXMuaW5kZXhPZihub2RlKTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG91dHB1dFNoYXBlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcGVLZXkgPSBgJHtsYXllci5uYW1lfV8ke25vZGVJbmRleH1fJHtqfWA7XG4gICAgICAgICAgICBsYXllcnNUb091dHB1dFNoYXBlc1tzaGFwZUtleV0gPSBvdXRwdXRTaGFwZXNbal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVhZCBmaW5hbCBvdXRwdXQgc2hhcGVzIGZyb20gbGF5ZXJzVG9PdXRwdXRTaGFwZXMuXG4gICAgY29uc3Qgb3V0cHV0U2hhcGVzOiBTaGFwZVtdID0gW107XG4gICAgY29uc3Qgb3V0cHV0U2hhcGVLZXlzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vdXRwdXRMYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5vdXRwdXRMYXllcnNbaV07XG4gICAgICBjb25zdCBub2RlSW5kZXggPSB0aGlzLm91dHB1dExheWVyc05vZGVJbmRpY2VzW2ldO1xuICAgICAgY29uc3QgdGVuc29ySW5kZXggPSB0aGlzLm91dHB1dExheWVyc1RlbnNvckluZGljZXNbaV07XG4gICAgICBjb25zdCBzaGFwZUtleSA9IGAke2xheWVyLm5hbWV9XyR7bm9kZUluZGV4fV8ke3RlbnNvckluZGV4fWA7XG4gICAgICBvdXRwdXRTaGFwZUtleXMucHVzaChzaGFwZUtleSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRTaGFwZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IG91dHB1dFNoYXBlS2V5c1tpXTtcbiAgICAgIGdlbmVyaWNfdXRpbHMuYXNzZXJ0KGtleSBpbiBsYXllcnNUb091dHB1dFNoYXBlcyk7XG4gICAgICBvdXRwdXRTaGFwZXMucHVzaChsYXllcnNUb091dHB1dFNoYXBlc1trZXldKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IFVwZGF0ZSBjYWNoZVxuICAgIHJldHVybiBnZW5lcmljX3V0aWxzLnNpbmdsZXRvbk9yQXJyYXkob3V0cHV0U2hhcGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBvdXRwdXQgdGVuc29ycyBmb3IgbmV3IGlucHV0cy5cbiAgICpcbiAgICogTm90ZTpcbiAgICogICAtIEV4cGVjdHMgYGlucHV0c2AgdG8gYmUgYSBsaXN0IChwb3RlbnRpYWxseSB3aXRoIDEgZWxlbWVudCkuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dHMgTGlzdCBvZiB0ZW5zb3JzXG4gICAqIEBwYXJhbSBtYXNrcyBMaXN0IG9mIG1hc2tzICh0ZW5zb3JzIG9yIG51bGwpLlxuICAgKiBAcmV0dXJuIFRocmVlIGxpc3RzOiBvdXRwdXRUZW5zb3JzLCBvdXRwdXRNYXNrcywgb3V0cHV0U2hhcGVzXG4gICAqL1xuICBwcm90ZWN0ZWQgcnVuSW50ZXJuYWxHcmFwaChpbnB1dHM6IFRlbnNvcltdLCBtYXNrcz86IFRlbnNvcltdKTpcbiAgICAgIFtUZW5zb3JbXSwgVGVuc29yW10sIFNoYXBlW11dIHtcbiAgICBpZiAobWFza3MgPT0gbnVsbCkge1xuICAgICAgbWFza3MgPSBnZW5lcmljX3V0aWxzLnB5TGlzdFJlcGVhdChudWxsLCBpbnB1dHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBEaWN0aW9uYXJ5IG1hcHBpbmcgcmVmZXJlbmNlIHRlbnNvcnMgdG8gdHVwbGVzXG4gICAgLy8gKGNvbXB1dGVkIHRlbnNvciwgY29tcHV0ZSBtYXNrKVxuICAgIC8vIHdlIGFzc3VtZSBhIDE6MSBtYXBwaW5nIGZyb20gdGVuc29yIHRvIG1hc2tcbiAgICAvLyBUT0RPOiByYWlzZSBleGNlcHRpb24gd2hlbiBhIGAuY29tcHV0ZU1hc2soKWAgY2FsbFxuICAgIC8vIGRvZXMgbm90IHJldHVybiBhIGxpc3QgdGhlIHNhbWUgc2l6ZSBhcyBgY2FsbGBcbiAgICBjb25zdCB0ZW5zb3JNYXA6IHtbdGVuc29ySUQ6IHN0cmluZ106IFtUZW5zb3IsIFRlbnNvcl19ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmlucHV0cy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgeCA9IHRoaXMuaW5wdXRzW2ldO1xuICAgICAgY29uc3QgeSA9IGlucHV0c1tpXTtcbiAgICAgIGNvbnN0IG1hc2sgPSBtYXNrc1tpXTtcbiAgICAgIHRlbnNvck1hcFt4LmlkXSA9IFt5LCBtYXNrXTtcbiAgICB9XG5cbiAgICBjb25zdCBkZXB0aEtleXMgPSBPYmplY3Qua2V5cyh0aGlzLm5vZGVzQnlEZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoZ2VuZXJpY191dGlscy5yZXZlcnNlTnVtYmVyQ29tcGFyZSk7XG4gICAgZm9yIChjb25zdCBkZXB0aCBvZiBkZXB0aEtleXMpIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5ub2Rlc0J5RGVwdGhbZGVwdGhdO1xuICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYWx3YXlzIGEgc2luZ2xlIGxheWVyLCBuZXZlciBhIGxpc3QuXG4gICAgICAgIGNvbnN0IGxheWVyID0gbm9kZS5vdXRib3VuZExheWVyO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VJbnB1dFRlbnNvcnMgPSBub2RlLmlucHV0VGVuc29ycztcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlT3V0cHV0VGVuc29ycyA9IG5vZGUub3V0cHV0VGVuc29ycztcblxuICAgICAgICAvLyBJZiBhbGwgcHJldmlvdXMgaW5wdXQgdGVuc29ycyBhcmUgYXZhaWxhYmxlIGluIHRlbnNvck1hcCxcbiAgICAgICAgLy8gdGhlbiBjYWxsIG5vZGUuaW5ib3VuZExheWVyIG9uIHRoZW0uXG4gICAgICAgIC8vIExpc3Qgb2YgdHVwbGVzIFtpbnB1dCwgbWFza106XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkRGF0YSA9IG5ldyBBcnJheTxbVGVuc29yLCBUZW5zb3JdPigpO1xuICAgICAgICBmb3IgKGNvbnN0IHggb2YgcmVmZXJlbmNlSW5wdXRUZW5zb3JzKSB7XG4gICAgICAgICAgaWYgKHguaWQgaW4gdGVuc29yTWFwKSB7XG4gICAgICAgICAgICBjb21wdXRlZERhdGEucHVzaCh0ZW5zb3JNYXBbeC5pZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcHV0ZWREYXRhLmxlbmd0aCA9PT0gcmVmZXJlbmNlSW5wdXRUZW5zb3JzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogQWRkIEsubmFtZV9zY29wZSBoZXJlLCBpZiB3ZSBuZWVkIGl0LlxuICAgICAgICAgIGxldCBrd2FyZ3M6IEt3YXJncyA9IHt9O1xuICAgICAgICAgIGxldCBjb21wdXRlZFRlbnNvcnM6IFRlbnNvcltdO1xuICAgICAgICAgIGxldCBjb21wdXRlZE1hc2tzOiBUZW5zb3JbXTtcbiAgICAgICAgICBsZXQgb3V0cHV0VGVuc29yczogVGVuc29yW107XG4gICAgICAgICAgbGV0IG91dHB1dE1hc2tzOiBUZW5zb3JbXTtcbiAgICAgICAgICAvLyBjYWxsIGxheWVyXG4gICAgICAgICAgaWYgKG5vZGUuY2FsbEFyZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAga3dhcmdzID0gbm9kZS5jYWxsQXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbXB1dGVkRGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IFtjb21wdXRlZFRlbnNvciwgY29tcHV0ZWRNYXNrXSA9IGNvbXB1dGVkRGF0YVswXTtcbiAgICAgICAgICAgIGlmIChrd2FyZ3NbJ21hc2snXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGt3YXJnc1snbWFzayddID0gY29tcHV0ZWRNYXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0VGVuc29ycyA9XG4gICAgICAgICAgICAgICAgZ2VuZXJpY191dGlscy50b0xpc3QobGF5ZXIuY2FsbChjb21wdXRlZFRlbnNvciwga3dhcmdzKSk7XG4gICAgICAgICAgICBvdXRwdXRNYXNrcyA9IGdlbmVyaWNfdXRpbHMudG9MaXN0KFxuICAgICAgICAgICAgICAgIGxheWVyLmNvbXB1dGVNYXNrKGNvbXB1dGVkVGVuc29yLCBjb21wdXRlZE1hc2spKTtcbiAgICAgICAgICAgIGNvbXB1dGVkVGVuc29ycyA9IFtjb21wdXRlZFRlbnNvcl07XG4gICAgICAgICAgICBjb21wdXRlZE1hc2tzID0gW2NvbXB1dGVkTWFza107XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB1dGVkVGVuc29ycyA9IGNvbXB1dGVkRGF0YS5tYXAoeCA9PiB4WzBdKTtcbiAgICAgICAgICAgIGNvbXB1dGVkTWFza3MgPSBjb21wdXRlZERhdGEubWFwKHggPT4geFsxXSk7XG4gICAgICAgICAgICBpZiAoa3dhcmdzWydtYXNrJ10gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBrd2FyZ3NbJ21hc2snXSA9IGNvbXB1dGVkTWFza3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXRUZW5zb3JzID1cbiAgICAgICAgICAgICAgICBnZW5lcmljX3V0aWxzLnRvTGlzdChsYXllci5jYWxsKGNvbXB1dGVkVGVuc29ycywga3dhcmdzKSk7XG4gICAgICAgICAgICBvdXRwdXRNYXNrcyA9IGdlbmVyaWNfdXRpbHMudG9MaXN0KFxuICAgICAgICAgICAgICAgIGxheWVyLmNvbXB1dGVNYXNrKGNvbXB1dGVkVGVuc29ycywgY29tcHV0ZWRNYXNrcykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsYXllci5hY3Rpdml0eVJlZ3VsYXJpemVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgICAgICAgICAnTGF5ZXJzTW9kZWwgaW52b2NhdGlvbiB3aXRoIGNvbmNyZXRlIFRlbnNvciB2YWx1ZShzKSBpbiB0aGUgJyArXG4gICAgICAgICAgICAgICAgJ3ByZXNlbmNlIG9mIGFjdGl2aXR5IHJlZ3VsYXJpemVyKHMpIGlzIG5vdCBzdXBwb3J0ZWQgeWV0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IEFkZCBtb2RlbCB1cGRhdGVzIGFuZCBsb3NzZXNcblxuICAgICAgICAgIC8vIFVwZGF0ZSB0ZW5zb3IgbWFwLlxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVmZXJlbmNlT3V0cHV0VGVuc29ycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IHJlZmVyZW5jZU91dHB1dFRlbnNvcnNbaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gb3V0cHV0VGVuc29yc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG1hc2sgPSBvdXRwdXRNYXNrc1tpXTtcbiAgICAgICAgICAgIHRlbnNvck1hcFt4LmlkXSA9IFt5LCBtYXNrXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXRUZW5zb3JzOiBUZW5zb3JbXSA9IFtdO1xuICAgIGNvbnN0IG91dHB1dE1hc2tzOiBUZW5zb3JbXSA9IFtdO1xuICAgIGNvbnN0IG91dHB1dFNoYXBlczogU2hhcGVbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgeCBvZiB0aGlzLm91dHB1dHMpIHtcbiAgICAgIGdlbmVyaWNfdXRpbHMuYXNzZXJ0KFxuICAgICAgICAgIHguaWQgaW4gdGVuc29yTWFwLCBgQ291bGQgbm90IGNvbXB1dGUgb3V0cHV0ICR7eC5uYW1lfSA6ICR7eC5pZH1gKTtcbiAgICAgIGNvbnN0IFt0ZW5zb3IsIG1hc2tdID0gdGVuc29yTWFwW3guaWRdO1xuICAgICAgb3V0cHV0U2hhcGVzLnB1c2godGVuc29yLnNoYXBlKTtcbiAgICAgIG91dHB1dFRlbnNvcnMucHVzaCh0ZW5zb3IpO1xuICAgICAgb3V0cHV0TWFza3MucHVzaChtYXNrKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IEFkZCBzdXBwb3J0IGZvciBjYWNoZXMuXG4gICAgcmV0dXJuIFtvdXRwdXRUZW5zb3JzLCBvdXRwdXRNYXNrcywgb3V0cHV0U2hhcGVzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBtYXAgb2YgaW50ZXJuYWwgbm9kZSBrZXlzIHRvIG5vZGUgb3JkZXJpbmcuXG4gICAqIFVzZWQgaW4gc2VyaWFsaXphaW9uIGEgbm9kZSBvcmRlcmluZ3MgbWF5IGNoYW5nZSBhcyB1bnVzZWQgbm9kZXMgYXJlXG4gICAqIGRyb3BwZWQuIFBvcnRpbmcgTm90ZTogIFRoaXMgaGVscGVyIG1ldGhvZCB3YXMgcHVsbGVkIG91dCBvZiBnZXRDb25maWcgdG9cbiAgICogaW1wcm92ZSByZWFkYWJpbGl0eS5cbiAgICogQHBhcmFtIGxheWVycyBBbiBhcnJheSBvZiBMYXllcnMgaW4gdGhlIG1vZGVsLlxuICAgKiBAcmV0dXJucyBNYXAgb2YgTm9kZSBLZXlzIHRvIGluZGV4IG9yZGVyIHdpdGhpbiB0aGUgbGF5ZXIuXG4gICAqL1xuICBwcml2YXRlIGJ1aWxkTm9kZUNvbnZlcnNpb25NYXAobGF5ZXJzOiBMYXllcltdKToge1tub2RlS2V5OiBzdHJpbmddOiBudW1iZXJ9IHtcbiAgICBjb25zdCBub2RlQ29udmVyc2lvbk1hcDoge1tub2RlS2V5OiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gICAgbGV0IGtlcHROb2RlczogbnVtYmVyO1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgIGtlcHROb2RlcyA9IGxheWVyIGluc3RhbmNlb2YgQ29udGFpbmVyID8gMSA6IDA7XG4gICAgICBmb3IgKGxldCBvcmlnaW5hbE5vZGVJbmRleCA9IDA7XG4gICAgICAgICAgIG9yaWdpbmFsTm9kZUluZGV4IDwgbGF5ZXIuaW5ib3VuZE5vZGVzLmxlbmd0aDsgb3JpZ2luYWxOb2RlSW5kZXgrKykge1xuICAgICAgICBjb25zdCBub2RlS2V5ID0gQ29udGFpbmVyLm5vZGVLZXkobGF5ZXIsIG9yaWdpbmFsTm9kZUluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyTm9kZXMuaGFzKG5vZGVLZXkpKSB7XG4gICAgICAgICAgLy8gaS5lLiB3ZSBtYXJrIGl0IHRvIGJlIHNhdmVkXG4gICAgICAgICAgbm9kZUNvbnZlcnNpb25NYXBbbm9kZUtleV0gPSBrZXB0Tm9kZXM7XG4gICAgICAgICAga2VwdE5vZGVzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVDb252ZXJzaW9uTWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIGxheWVyIGJhc2VkIG9uIGVpdGhlciBpdHMgbmFtZSAodW5pcXVlKSBvciBpbmRleC5cbiAgICpcbiAgICogSW5kaWNlcyBhcmUgYmFzZWQgb24gb3JkZXIgb2YgaG9yaXpvbnRhbCBncmFwaCB0cmF2ZXJzYWwgKGJvdHRvbS11cCkuXG4gICAqXG4gICAqIElmIGJvdGggYG5hbWVgIGFuZCBgaW5kZXhgIGFyZSBzcGVjaWZpZWQsIGBpbmRleGAgdGFrZXMgcHJlY2VkZW5jZS5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiBsYXllci5cbiAgICogQHBhcmFtIGluZGV4IEluZGV4IG9mIGxheWVyLlxuICAgKiBAcmV0dXJucyBBIExheWVyIGluc3RhbmNlLlxuICAgKiBAdGhyb3dzIFZhbHVlRXJyb3I6IEluIGNhc2Ugb2YgaW52YWxpZCBsYXllciBuYW1lIG9yIGluZGV4LlxuICAgKlxuICAgKiBAZG9jIHtcbiAgICogICAgaGVhZGluZzogJ0xheWVycycsXG4gICAqICAgIHN1YmhlYWRpbmc6ICdDbGFzc2VzJyxcbiAgICogICAgbmFtZXNwYWNlOiAnbGF5ZXJzJyxcbiAgICogICAgc3ViY2xhc3NlczogWydMYXllcnNNb2RlbCddXG4gICAqIH1cbiAgICovXG4gIGdldExheWVyKG5hbWU/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogTGF5ZXIge1xuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5sYXllcnMubGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgYFdhcyBhc2tlZCB0byByZXRyaWV2ZSBsYXllciBhdCBpbmRleCAke2luZGV4fSwgYnV0IG1vZGVsIG9ubHkgYCArXG4gICAgICAgICAgICBgaGFzICR7dGhpcy5sYXllcnMubGVuZ3RofSBsYXllcihzKS5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheWVyc1tpbmRleF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoJ1Byb3ZpZGUgZWl0aGVyIGEgbGF5ZXIgbmFtZSBvciBsYXllciBpbmRleCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgIGlmIChsYXllci5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBsYXllcjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoYE5vIHN1Y2ggbGF5ZXI6ICR7bmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIENvbnRhaW5lcidzIGN1cnJlbnQgbG9zcyB2YWx1ZXMuXG4gICAqXG4gICAqIFVzZWQgZm9yIHJlZ3VsYXJpemVycyBkdXJpbmcgdHJhaW5pbmcuXG4gICAqL1xuICBjYWxjdWxhdGVMb3NzZXMoKTogU2NhbGFyW10ge1xuICAgIC8vIFBvcnRpbmcgTm9kZTogVGhpcyBpcyBhbiBhdWdtZW50YXRpb24gdG8gQ29udGFpbmVyLmxvc3MgaW4gUHlLZXJhcy5cbiAgICAvLyAgIEluIFB5S2VyYXMsIENvbnRhaW5lci5sb3NzIHJldHVybnMgc3ltYm9saWMgdGVuc29ycy4gSGVyZSBhIGNvbmNyZXRlXG4gICAgLy8gICBUZW5zb3IgKHNwZWNpZmljYWxseSBTY2FsYXIpIHZhbHVlcyBhcmUgcmV0dXJuZWQuIFRoaXMgaXMgZHVlIHRvIHRoZVxuICAgIC8vICAgaW1wZXJhdGl2ZSBiYWNrZW5kLlxuICAgIHJldHVybiB0aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IGxvc3NlczogU2NhbGFyW10gPSBbXTtcbiAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZUluZGV4ID0gMDsgbm9kZUluZGV4IDwgbGF5ZXIuaW5ib3VuZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICArK25vZGVJbmRleCkge1xuICAgICAgICAgIGNvbnN0IG5vZGVLZXkgPSBDb250YWluZXIubm9kZUtleShsYXllciwgbm9kZUluZGV4KTtcbiAgICAgICAgICBpZiAodGhpcy5jb250YWluZXJOb2Rlcy5oYXMobm9kZUtleSkpIHtcbiAgICAgICAgICAgIGxvc3Nlcy5wdXNoKC4uLmxheWVyLmNhbGN1bGF0ZUxvc3NlcygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFRPRE8oY2Fpcyk6IEFkZCBhbnkgdW5jb25kaXRpb25hbCBtb2RlbC1sZXZlbCBsb3NzZXM/XG4gICAgICByZXR1cm4gbG9zc2VzO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29uZmlnKCk6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCB7XG4gICAgY29uc3QgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgPSB7bmFtZTogdGhpcy5uYW1lfTtcblxuICAgIC8vIEJ1aWxkIGEgbWFwIGZyb20gbGF5ZXIgdW5pcXVlIG5hbWUgKHNlbGYuX25vZGVfa2V5KVxuICAgIC8vIHRvIHRoZSBpbmRleCBvZiB0aGUgbm9kZXMgdGhhdCBhcmUgc2F2ZWQgaW4gdGhlIGNvbmZpZy5cbiAgICAvLyBPbmx5IG5vZGVzIGluIGNvbnRhaW5lcl9ub2RlcyBhcmUgc2F2ZWQuXG4gICAgY29uc3Qgbm9kZUNvbnZlcnNpb25NYXA6IHtbbm9kZUtleTogc3RyaW5nXTogbnVtYmVyfSA9XG4gICAgICAgIHRoaXMuYnVpbGROb2RlQ29udmVyc2lvbk1hcCh0aGlzLmxheWVycyk7XG5cbiAgICAvLyBTZXJpYWxpemUgYW5kIHNhdmUgdGhlIGxheWVycyBpbiBsYXllckNvbmZpZ3NcbiAgICBjb25zdCBsYXllckNvbmZpZ3MgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGxheWVyIG9mIHRoaXMubGF5ZXJzKSB7XG4gICAgICBjb25zdCBsYXllckNsYXNzTmFtZSA9IGxheWVyLmdldENsYXNzTmFtZSgpO1xuICAgICAgY29uc3QgbGF5ZXJDb25maWcgPSBsYXllci5nZXRDb25maWcoKTtcbiAgICAgIGNvbnN0IGZpbHRlcmVkSW5ib3VuZE5vZGVzID0gW107XG4gICAgICBmb3IgKGxldCBvcmlnaW5hbE5vZGVJbmRleCA9IDA7XG4gICAgICAgICAgIG9yaWdpbmFsTm9kZUluZGV4IDwgbGF5ZXIuaW5ib3VuZE5vZGVzLmxlbmd0aDsgb3JpZ2luYWxOb2RlSW5kZXgrKykge1xuICAgICAgICBjb25zdCBub2RlID0gbGF5ZXIuaW5ib3VuZE5vZGVzW29yaWdpbmFsTm9kZUluZGV4XTtcbiAgICAgICAgY29uc3Qgbm9kZUtleSA9IENvbnRhaW5lci5ub2RlS2V5KGxheWVyLCBvcmlnaW5hbE5vZGVJbmRleCk7XG4gICAgICAgIGxldCBrd2FyZ3MgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyTm9kZXMuaGFzKG5vZGVLZXkpKSB7XG4gICAgICAgICAgLy8gVGhlIG5vZGUgaXMgcmVsZXZhbnQgdG8gdGhlIG1vZGVsOlxuICAgICAgICAgIC8vIGFkZCB0byBmaWx0ZXJlZEluYm91bmROb2Rlcy5cbiAgICAgICAgICBpZiAobm9kZS5jYWxsQXJncykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobm9kZS5jYWxsQXJncyk7XG4gICAgICAgICAgICAgIGt3YXJncyA9IG5vZGUuY2FsbEFyZ3M7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgYExheWVyICR7bGF5ZXIubmFtZX0gd2FzIHBhc3NlZCBgICtcbiAgICAgICAgICAgICAgICAgIGBub24tc2VyaWFsaXphYmxlIGtleXdvcmQgYXJndW1lbnRzOiBgICtcbiAgICAgICAgICAgICAgICAgIGAke25vZGUuY2FsbEFyZ3N9LiBUaGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkIGAgK1xuICAgICAgICAgICAgICAgICAgYGluIHRoZSBzZXJpYWxpemVkIG1vZGVsIChhbmQgdGh1cyB3aWxsIGJlIGAgK1xuICAgICAgICAgICAgICAgICAgYG1pc3NpbmcgYXQgZGVzZXJpYWxpemF0aW9uIHRpbWUpLmApO1xuICAgICAgICAgICAgICBrd2FyZ3MgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUuaW5ib3VuZExheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlRGF0YSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmluYm91bmRMYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgaW5ib3VuZExheWVyID0gbm9kZS5pbmJvdW5kTGF5ZXJzW2ldO1xuICAgICAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSBub2RlLm5vZGVJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICBjb25zdCB0ZW5zb3JJbmRleCA9IG5vZGUudGVuc29ySW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgY29uc3Qgbm9kZUtleSA9IENvbnRhaW5lci5ub2RlS2V5KGluYm91bmRMYXllciwgbm9kZUluZGV4KTtcbiAgICAgICAgICAgICAgbGV0IG5ld05vZGVJbmRleCA9IG5vZGVDb252ZXJzaW9uTWFwW25vZGVLZXldO1xuICAgICAgICAgICAgICBpZiAobmV3Tm9kZUluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXdOb2RlSW5kZXggPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5vZGVEYXRhLnB1c2goXG4gICAgICAgICAgICAgICAgICBbaW5ib3VuZExheWVyLm5hbWUsIG5ld05vZGVJbmRleCwgdGVuc29ySW5kZXgsIGt3YXJnc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVyZWRJbmJvdW5kTm9kZXMucHVzaChub2RlRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBkaWN0OiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgPSB7fTtcbiAgICAgIGRpY3RbJ25hbWUnXSA9IGxheWVyLm5hbWU7XG4gICAgICBkaWN0WydjbGFzc05hbWUnXSA9IGxheWVyQ2xhc3NOYW1lO1xuICAgICAgZGljdFsnY29uZmlnJ10gPSBsYXllckNvbmZpZztcbiAgICAgIGRpY3RbJ2luYm91bmROb2RlcyddID0gZmlsdGVyZWRJbmJvdW5kTm9kZXM7XG4gICAgICBsYXllckNvbmZpZ3MucHVzaChkaWN0KTtcbiAgICB9XG4gICAgY29uZmlnWydsYXllcnMnXSA9IGxheWVyQ29uZmlncztcbiAgICAvLyBHYXRoZXIgaW5mbyBhYm91dCBpbnB1dHMgYW5kIG91dHB1dHNcbiAgICBjb25zdCBtb2RlbElucHV0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnB1dExheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmlucHV0TGF5ZXJzW2ldO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0gdGhpcy5pbnB1dExheWVyc05vZGVJbmRpY2VzW2ldO1xuXG4gICAgICBjb25zdCBub2RlS2V5ID0gQ29udGFpbmVyLm5vZGVLZXkobGF5ZXIsIG5vZGVJbmRleCk7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbmVyTm9kZXMuaGFzKG5vZGVLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IG5ld05vZGVJbmRleCA9IG5vZGVDb252ZXJzaW9uTWFwW25vZGVLZXldO1xuICAgICAgaWYgKG5ld05vZGVJbmRleCA9PT0gbnVsbCB8fCBuZXdOb2RlSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdOb2RlSW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgdGVuc29ySW5kZXggPSB0aGlzLmlucHV0TGF5ZXJzVGVuc29ySW5kaWNlc1tpXTtcbiAgICAgIG1vZGVsSW5wdXRzLnB1c2goW2xheWVyLm5hbWUsIG5ld05vZGVJbmRleCwgdGVuc29ySW5kZXhdKTtcbiAgICB9XG4gICAgY29uZmlnWydpbnB1dExheWVycyddID0gbW9kZWxJbnB1dHM7XG5cbiAgICBjb25zdCBtb2RlbE91dHB1dHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3V0cHV0TGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsYXllciA9IHRoaXMub3V0cHV0TGF5ZXJzW2ldO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0gdGhpcy5vdXRwdXRMYXllcnNOb2RlSW5kaWNlc1tpXTtcblxuICAgICAgY29uc3Qgbm9kZUtleSA9IENvbnRhaW5lci5ub2RlS2V5KGxheWVyLCBub2RlSW5kZXgpO1xuICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lck5vZGVzLmhhcyhub2RlS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBuZXdOb2RlSW5kZXggPSBub2RlQ29udmVyc2lvbk1hcFtub2RlS2V5XTtcbiAgICAgIGlmIChuZXdOb2RlSW5kZXggPT09IG51bGwgfHwgbmV3Tm9kZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Tm9kZUluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRlbnNvckluZGV4ID0gdGhpcy5vdXRwdXRMYXllcnNUZW5zb3JJbmRpY2VzW2ldO1xuICAgICAgbW9kZWxPdXRwdXRzLnB1c2goW2xheWVyLm5hbWUsIG5ld05vZGVJbmRleCwgdGVuc29ySW5kZXhdKTtcbiAgICB9XG4gICAgY29uZmlnWydvdXRwdXRMYXllcnMnXSA9IG1vZGVsT3V0cHV0cztcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIExheWVyc01vZGVsIGZyb20gaXRzIGNvbmZpZyAob3V0cHV0IG9mIGBnZXRfY29uZmlnKClgKS5cbiAgICogQHBhcmFtIGNscyB0aGUgY2xhc3MgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSBjb25maWcgTGF5ZXJzTW9kZWwgY29uZmlnIGRpY3Rpb25hcnkuXG4gICAqIEBwYXJhbSBjdXN0b21PYmplY3RzIEFuIG9wdGlvbmFsIGRpY3Rpb25hcnkgb2YgY3VzdG9tIG9iamVjdHMuXG4gICAqIEBwYXJhbSBmYXN0V2VpZ2h0SW5pdCBPcHRpb25hbCBmbGFnIHRvIHVzZSBmYXN0IHdlaWdodCBpbml0aWFsaXphdGlvblxuICAgKiAgIGR1cmluZyBkZXNlcmlhbGl6YXRpb24uIFRoaXMgaXMgYXBwbGljYWJsZSB0byBjYXNlcyBpbiB3aGljaFxuICAgKiAgIHRoZSBpbml0aWFsaXphdGlvbiB3aWxsIGJlIGltbWVkaWF0ZWx5IG92ZXJ3cml0dGVuIGJ5IGxvYWRlZCB3ZWlnaHRcbiAgICogICB2YWx1ZXMuIERlZmF1bHQ6IGBmYWxzZWAuXG4gICAqIEByZXR1cm5zIEEgTGF5ZXJzTW9kZWwgaW5zdGFuY2UuXG4gICAqIEB0aHJvd3MgVmFsdWVFcnJvcjogSW4gY2FzZSBvZiBpbXByb3Blcmx5IGZvcm1hdHRlZCBjb25maWcgZGljdC5cbiAgICovXG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgZnJvbUNvbmZpZzxUIGV4dGVuZHMgc2VyaWFsaXphdGlvbi5TZXJpYWxpemFibGU+KFxuICAgICAgY2xzOiBzZXJpYWxpemF0aW9uLlNlcmlhbGl6YWJsZUNvbnN0cnVjdG9yPFQ+LFxuICAgICAgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QsXG4gICAgICBjdXN0b21PYmplY3RzID0ge30gYXMgc2VyaWFsaXphdGlvbi5Db25maWdEaWN0LFxuICAgICAgZmFzdFdlaWdodEluaXQgPSBmYWxzZSk6IFQge1xuICAgIC8vIExheWVyIGluc3RhbmNlcyBjcmVhdGVkIGR1cmluZ1xuICAgIC8vIHRoZSBncmFwaCByZWNvbnN0cnVjdGlvbiBwcm9jZXNzXG4gICAgY29uc3QgY3JlYXRlZExheWVyczoge1tsYXllck5hbWU6IHN0cmluZ106IExheWVyfSA9IHt9O1xuXG4gICAgLy8gRGljdGlvbmFyeSBtYXBwaW5nIGxheWVyIGluc3RhbmNlcyB0b1xuICAgIC8vIG5vZGUgZGF0YSB0aGF0IHNwZWNpZmllcyBhIGxheWVyIGNhbGwuXG4gICAgLy8gSXQgYWN0cyBhcyBhIHF1ZXVlIHRoYXQgbWFpbnRhaW5zIGFueSB1bnByb2Nlc3NlZFxuICAgIC8vIGxheWVyIGNhbGwgdW50aWwgaXQgYmVjb21lcyBwb3NzaWJsZSB0byBwcm9jZXNzIGl0XG4gICAgLy8gKGkuZS4gdW50aWwgdGhlIGlucHV0IHRlbnNvcnMgdG8gdGhlIGNhbGwgYWxsIGV4aXN0KS5cbiAgICBjb25zdCB1bnByb2Nlc3NlZE5vZGVzOiB7W2xheWVyOiBzdHJpbmddOiBUZW5zb3JLZXlXaXRoQXJnc0FycmF5W11bXX0gPSB7fTtcbiAgICBmdW5jdGlvbiBhZGRVbnByb2Nlc3NlZE5vZGUoXG4gICAgICAgIGxheWVyOiBMYXllciwgbm9kZURhdGE6IFRlbnNvcktleVdpdGhBcmdzQXJyYXlbXSkge1xuICAgICAgaWYgKCEobGF5ZXIubmFtZSBpbiB1bnByb2Nlc3NlZE5vZGVzKSkge1xuICAgICAgICB1bnByb2Nlc3NlZE5vZGVzW2xheWVyLm5hbWVdID0gW25vZGVEYXRhXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVucHJvY2Vzc2VkTm9kZXNbbGF5ZXIubmFtZV0ucHVzaChub2RlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc05vZGUobGF5ZXI6IExheWVyLCBub2RlRGF0YTogVGVuc29yS2V5V2l0aEFyZ3NBcnJheVtdKSB7XG4gICAgICBjb25zdCBpbnB1dFRlbnNvcnM6IFN5bWJvbGljVGVuc29yW10gPSBbXTtcbiAgICAgIGxldCBrd2FyZ3M7XG4gICAgICBmb3IgKGNvbnN0IGlucHV0RGF0YSBvZiBub2RlRGF0YSkge1xuICAgICAgICBjb25zdCBpbmJvdW5kTGF5ZXJOYW1lID0gaW5wdXREYXRhWzBdO1xuICAgICAgICBjb25zdCBpbmJvdW5kTm9kZUluZGV4ID0gaW5wdXREYXRhWzFdO1xuICAgICAgICBjb25zdCBpbmJvdW5kVGVuc29ySW5kZXggPSBpbnB1dERhdGFbMl07XG5cbiAgICAgICAga3dhcmdzID0gaW5wdXREYXRhWzNdID09IG51bGwgP1xuICAgICAgICAgICAge30gOlxuICAgICAgICAgICAgaW5wdXREYXRhWzNdIGFzIHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdDtcbiAgICAgICAgaWYgKCEoaW5ib3VuZExheWVyTmFtZSBpbiBjcmVhdGVkTGF5ZXJzKSkge1xuICAgICAgICAgIGFkZFVucHJvY2Vzc2VkTm9kZShsYXllciwgbm9kZURhdGEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmJvdW5kTGF5ZXIgPSBjcmVhdGVkTGF5ZXJzW2luYm91bmRMYXllck5hbWVdO1xuICAgICAgICBpZiAoaW5ib3VuZExheWVyLmluYm91bmROb2Rlcy5sZW5ndGggPD0gaW5ib3VuZE5vZGVJbmRleCkge1xuICAgICAgICAgIGFkZFVucHJvY2Vzc2VkTm9kZShsYXllciwgbm9kZURhdGEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmJvdW5kTm9kZSA9IGluYm91bmRMYXllci5pbmJvdW5kTm9kZXNbaW5ib3VuZE5vZGVJbmRleF07XG4gICAgICAgIGlucHV0VGVuc29ycy5wdXNoKGluYm91bmROb2RlLm91dHB1dFRlbnNvcnNbaW5ib3VuZFRlbnNvckluZGV4XSk7XG4gICAgICB9XG4gICAgICAvLyBDYWxsIGxheWVyIG9uIGl0cyBpbnB1dHMsIHRodXMgY3JlYXRpbmcgdGhlIG5vZGVcbiAgICAgIC8vIGFuZCBidWlsZGluZyB0aGUgbGF5ZXIgaWYgbmVlZGVkLlxuICAgICAgLy8gTm90ZTogVGhpcyBoYXMgRWFnZXIgdnMgR3JhcGggSW1wbGljYXRpb25zLlxuICAgICAgaWYgKGlucHV0VGVuc29ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxheWVyLmFwcGx5KFxuICAgICAgICAgICAgZ2VuZXJpY191dGlscy5zaW5nbGV0b25PckFycmF5KGlucHV0VGVuc29ycyksXG4gICAgICAgICAgICBrd2FyZ3MpOyAgLy8gd2FzICoqIGt3YXJnc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIGEgbGF5ZXIsIHRoZW4gY2FsbCBpdCBvbiBhcHByb3ByaWF0ZSBpbnB1dHMuXG4gICAgICogQHBhcmFtIGxheWVyRGF0YTogbGF5ZXIgY29uZmlnIGRpY3QuXG4gICAgICogQHRocm93cyBWYWx1ZUVycm9yOiBJbiBjYXNlIG9mIGltcHJvcGVybHkgZm9ybWF0dGVkIGBsYXllcl9kYXRhYFxuICAgICAqIGRpY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0xheWVyKGxheWVyRGF0YTogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0fG51bGwpIHtcbiAgICAgIGNvbnN0IGxheWVyTmFtZSA9IGxheWVyRGF0YVsnbmFtZSddIGFzIHN0cmluZztcbiAgICAgIC8vIEluc3RhbnRpYXRlIGxheWVyLlxuICAgICAgY29uc3QgbGF5ZXIgPVxuICAgICAgICAgIGRlc2VyaWFsaXplTGF5ZXIoXG4gICAgICAgICAgICAgIGxheWVyRGF0YSxcbiAgICAgICAgICAgICAgY29uZmlnWydjdXN0b21PYmplY3RzJ10gIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICBjb25maWdbJ2N1c3RvbU9iamVjdHMnXSBhcyBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgOlxuICAgICAgICAgICAgICAgICAge30pIGFzIExheWVyO1xuICAgICAgbGF5ZXIuc2V0RmFzdFdlaWdodEluaXREdXJpbmdCdWlsZChmYXN0V2VpZ2h0SW5pdCk7XG4gICAgICBjcmVhdGVkTGF5ZXJzW2xheWVyTmFtZV0gPSBsYXllcjtcbiAgICAgIC8vIEdhdGhlciBsYXllciBpbnB1dHMuXG4gICAgICBjb25zdCBpbmJvdW5kTm9kZXNEYXRhID1cbiAgICAgICAgICBsYXllckRhdGFbJ2luYm91bmROb2RlcyddIGFzIFRlbnNvcktleVdpdGhBcmdzQXJyYXlbXVtdO1xuICAgICAgaW5ib3VuZE5vZGVzRGF0YS5mb3JFYWNoKG5vZGVEYXRhID0+IHtcbiAgICAgICAgaWYgKCEobm9kZURhdGEgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgICAgICAgYENvcnJ1cHRlZCBjb25maWd1cmF0aW9uLCBleHBlY3RlZCBhcnJheSBmb3Igbm9kZURhdGE6ICR7XG4gICAgICAgICAgICAgICAgICBub2RlRGF0YX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBkb24ndCBwcm9jZXNzIG5vZGVzIChpLmUuIG1ha2UgbGF5ZXIgY2FsbHMpXG4gICAgICAgIC8vIG9uIHRoZSBmbHkgYmVjYXVzZSB0aGUgaW5ib3VuZCBub2RlIG1heSBub3QgeWV0IGV4aXN0LFxuICAgICAgICAvLyBpbiBjYXNlIG9mIGxheWVyIHNoYXJlZCBhdCBkaWZmZXJlbnQgdG9wb2xvZ2ljYWwgZGVwdGhzXG4gICAgICAgIC8vIChlLmcuYSBtb2RlbCBzdWNoIGFzIEEoQihBKEIoeCkpKSkpXG4gICAgICAgIGFkZFVucHJvY2Vzc2VkTm9kZShsYXllciwgbm9kZURhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRmlyc3QsIHdlIGNyZWF0ZSBhbGwgbGF5ZXJzIGFuZCBlbnF1ZXVlIG5vZGVzIHRvIGJlIHByb2Nlc3NlZC5cbiAgICBjb25zdCBuYW1lID0gY29uZmlnWyduYW1lJ107XG4gICAgY29uc3QgbGF5ZXJzRnJvbUNvbmZpZyA9IGNvbmZpZ1snbGF5ZXJzJ10gYXMgc2VyaWFsaXphdGlvbi5Db25maWdEaWN0W107XG4gICAgZm9yIChjb25zdCBsYXllckRhdGEgb2YgbGF5ZXJzRnJvbUNvbmZpZykge1xuICAgICAgcHJvY2Vzc0xheWVyKGxheWVyRGF0YSk7XG4gICAgfVxuXG4gICAgLy8gVGhlbiB3ZSBwcm9jZXNzIG5vZGVzIGluIG9yZGVyIG9mIGxheWVyIGRlcHRoLlxuICAgIC8vIE5vZGVzIHRoYXQgY2Fubm90IHlldCBiZSBwcm9jZXNzZWQoaWYgdGhlIGluYm91bmQgbm9kZVxuICAgIC8vIGRvZXMgbm90IHlldCBleGlzdCkgYXJlIHJlIC0gZW5xdWV1ZWQsIGFuZCB0aGUgcHJvY2Vzc1xuICAgIC8vIGlzIHJlcGVhdGVkIHVudGlsIGFsbCBub2RlcyBhcmUgcHJvY2Vzc2VkLlxuICAgIHdoaWxlICghZ2VuZXJpY191dGlscy5pc09iamVjdEVtcHR5KHVucHJvY2Vzc2VkTm9kZXMpKSB7XG4gICAgICBmb3IgKGNvbnN0IGxheWVyRGF0YSBvZiBsYXllcnNGcm9tQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gY3JlYXRlZExheWVyc1tsYXllckRhdGFbJ25hbWUnXSBhcyBzdHJpbmddO1xuICAgICAgICBpZiAobGF5ZXIubmFtZSBpbiB1bnByb2Nlc3NlZE5vZGVzKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFVucHJvY2Vzc2VkTm9kZXNGb3JMYXllciA9IHVucHJvY2Vzc2VkTm9kZXNbbGF5ZXIubmFtZV07XG4gICAgICAgICAgZGVsZXRlIHVucHJvY2Vzc2VkTm9kZXNbbGF5ZXIubmFtZV07XG4gICAgICAgICAgZm9yIChjb25zdCBub2RlRGF0YSBvZiBjdXJyZW50VW5wcm9jZXNzZWROb2Rlc0ZvckxheWVyKSB7XG4gICAgICAgICAgICBwcm9jZXNzTm9kZShsYXllciwgbm9kZURhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGlucHV0VGVuc29yczogU3ltYm9saWNUZW5zb3JbXSA9IFtdO1xuICAgIGNvbnN0IG91dHB1dFRlbnNvcnM6IFN5bWJvbGljVGVuc29yW10gPSBbXTtcbiAgICBjb25zdCBpbnB1dExheWVyc0Zyb21Db25maWcgPVxuICAgICAgICBjb25maWdbJ2lucHV0TGF5ZXJzJ10gYXMgc2VyaWFsaXphdGlvbi5Db25maWdEaWN0W107XG4gICAgZm9yIChjb25zdCBsYXllckRhdGEgb2YgaW5wdXRMYXllcnNGcm9tQ29uZmlnKSB7XG4gICAgICBjb25zdCBsYXllck5hbWUgPSBsYXllckRhdGFbMF0gYXMgc3RyaW5nO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0gbGF5ZXJEYXRhWzFdIGFzIG51bWJlcjtcbiAgICAgIGNvbnN0IHRlbnNvckluZGV4ID0gbGF5ZXJEYXRhWzJdIGFzIG51bWJlcjtcbiAgICAgIGdlbmVyaWNfdXRpbHMuYXNzZXJ0KGxheWVyTmFtZSBpbiBjcmVhdGVkTGF5ZXJzKTtcbiAgICAgIGNvbnN0IGxheWVyID0gY3JlYXRlZExheWVyc1tsYXllck5hbWVdO1xuICAgICAgY29uc3QgbGF5ZXJPdXRwdXRUZW5zb3JzID0gbGF5ZXIuaW5ib3VuZE5vZGVzW25vZGVJbmRleF0ub3V0cHV0VGVuc29ycztcbiAgICAgIGlucHV0VGVuc29ycy5wdXNoKGxheWVyT3V0cHV0VGVuc29yc1t0ZW5zb3JJbmRleF0pO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXRMYXllcnNGcm9tQ29uZmlnID1cbiAgICAgICAgY29uZmlnWydvdXRwdXRMYXllcnMnXSBhcyBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3RbXTtcbiAgICBmb3IgKGNvbnN0IGxheWVyRGF0YSBvZiBvdXRwdXRMYXllcnNGcm9tQ29uZmlnKSB7XG4gICAgICBjb25zdCBsYXllck5hbWUgPSBsYXllckRhdGFbMF0gYXMgc3RyaW5nO1xuICAgICAgY29uc3Qgbm9kZUluZGV4ID0gbGF5ZXJEYXRhWzFdIGFzIG51bWJlcjtcbiAgICAgIGNvbnN0IHRlbnNvckluZGV4ID0gbGF5ZXJEYXRhWzJdIGFzIG51bWJlcjtcbiAgICAgIGdlbmVyaWNfdXRpbHMuYXNzZXJ0KGxheWVyTmFtZSBpbiBjcmVhdGVkTGF5ZXJzKTtcbiAgICAgIGNvbnN0IGxheWVyID0gY3JlYXRlZExheWVyc1tsYXllck5hbWVdO1xuICAgICAgY29uc3QgbGF5ZXJPdXRwdXRUZW5zb3JzID0gbGF5ZXIuaW5ib3VuZE5vZGVzW25vZGVJbmRleF0ub3V0cHV0VGVuc29ycztcbiAgICAgIG91dHB1dFRlbnNvcnMucHVzaChsYXllck91dHB1dFRlbnNvcnNbdGVuc29ySW5kZXhdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBjbHMoe2lucHV0czogaW5wdXRUZW5zb3JzLCBvdXRwdXRzOiBvdXRwdXRUZW5zb3JzLCBuYW1lfSk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGNvbnRhaW5lciBpcyBzdGF0ZWZ1bC5cbiAgICpcbiAgICogUG9ydGluZyBOb3RlOiB0aGlzIGlzIHRoZSBlcXVpdmFsZW50IG9mIHRoZSBzdGF0ZWZ1bCBAcHJvcGVydHkgb2ZcbiAgICogICB0aGUgQ29udGFpbmVyIGNsYXNzIGluIFB5S2VyYXMuXG4gICAqL1xuICBnZXQgc3RhdGVmdWwoKTogYm9vbGVhbiB7XG4gICAgLy8gUG9ydGluZyBOb3RlOiBUaGlzIGNoZWNrIGlzIHRvIHByZXZlbnQgaW5hZHZlcnRlbnQgc2V0dGluZyBvZiB0aGVcbiAgICAvLyAgIF9zdGF0ZWZ1bCBwcm9wZXJ0eSBvZiB0aGUgQ29udGFpbmVyIGluc3RhbmNlLlxuICAgIGlmICh0aGlzLl9zdGF0ZWZ1bCkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgJ0NvbnRhaW5lciBpbnN0YW5jZSB1bmV4cGVjdGVkbHkgaGFzIF9zdGF0ZWZ1bCA9IHRydWUuIFRoZSAnICtcbiAgICAgICAgICAnc3RhdGVmdWxuZXNzIG9mIGEgQ29udGFpbmVyIGlzIGRldGVybWluZWQgYnkgdGhlIExheWVycyBpdCAnICtcbiAgICAgICAgICAnY29udGFpbnMuIEl0cyBfc3RhdGVmdWwgcHJvcGVydHkgbXVzdCByZW1haW4gdGhlIGRlZmF1bHQgZmFsc2UuJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgIGlmIChsYXllci5zdGF0ZWZ1bCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBzdGF0ZSBvZiBhbGwgc3RhdGVmdWwgY29uc3RpdHVlbnQgbGF5ZXJzIChpZiBhbnkpLlxuICAgKlxuICAgKiBFeGFtcGxlcyBvZiBzdGF0ZWZ1bCBsYXllcnMgaW5jbHVkZSBSTk4gbGF5ZXJzIHdob3NlIGBzdGF0ZWZ1bGAgcHJvcGVydHlcbiAgICogaXMgc2V0IGFzIGB0cnVlYC5cbiAgICovXG4gIHJlc2V0U3RhdGVzKCkge1xuICAgIHRpZHkoKCkgPT4ge1xuICAgICAgdGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxuICAgICAgICBpZiAobGF5ZXIuc3RhdGVmdWwpIHtcbiAgICAgICAgICBsYXllci5yZXNldFN0YXRlcygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6bm8tYW55XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { argMax, clone, dispose, mul, reshape, tensor1d, tidy } from '@tensorflow/tfjs-core';\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n    const numOutputs = outputNames.length;\n    if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n        return outputNames.map(name => null);\n    }\n    if (numOutputs === 1) {\n        if (Array.isArray(xWeight) && xWeight.length === 1) {\n            return xWeight;\n        }\n        else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n            return [xWeight[outputNames[0]]];\n        }\n        else {\n            return [xWeight];\n        }\n    }\n    if (Array.isArray(xWeight)) {\n        if (xWeight.length !== numOutputs) {\n            throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` +\n                `element(s), but the model has ${numOutputs} outputs. ` +\n                `Make sure a set of weights is provided for each model output.`);\n        }\n        return xWeight;\n    }\n    else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n        typeof xWeight[Object.keys(xWeight)[0]] ===\n            'object') {\n        const output = [];\n        outputNames.forEach(outputName => {\n            if (outputName in xWeight) {\n                output.push(xWeight[outputName]);\n            }\n            else {\n                output.push(null);\n            }\n        });\n        return output;\n    }\n    else {\n        throw new Error(`The model has multiple (${numOutputs}) outputs, ` +\n            `so ${weightType} must be either an array with ` +\n            `${numOutputs} elements or an object with ${outputNames} keys. ` +\n            `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n    }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n    if (sampleWeight != null || sampleWeightMode != null) {\n        // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n        // string.\n        throw new Error('Support sampleWeight is not implemented yet');\n    }\n    if (classWeight != null) {\n        // Apply class weights per sample.\n        const yClasses = tidy(() => {\n            if (y.shape.length === 1) {\n                // Assume class indices.\n                return clone(y);\n            }\n            else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                    // Assume one-hot encoding of classes.\n                    const axis = 1;\n                    return argMax(y, axis);\n                }\n                else if (y.shape[1] === 1) {\n                    // Class index.\n                    return reshape(y, [y.shape[0]]);\n                }\n                else {\n                    throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n                        `during handling of class weights. The size is expected to be ` +\n                        `>= 1.`);\n                }\n            }\n            else {\n                throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` +\n                    `handling of class weights. The rank is expected to be 1 or 2.`);\n            }\n        });\n        const yClassIndices = Array.from(await yClasses.data());\n        dispose(yClasses);\n        const classSampleWeight = [];\n        yClassIndices.forEach(classIndex => {\n            if (classWeight[classIndex] == null) {\n                throw new Error(`classWeight must contain all classes in the training data. ` +\n                    `The class ${classIndex} exists in the data but not in ` +\n                    `classWeight`);\n            }\n            else {\n                classSampleWeight.push(classWeight[classIndex]);\n            }\n        });\n        return tensor1d(classSampleWeight, 'float32');\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses, sampleWeights) {\n    return mul(losses, sampleWeights);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { singletonOrArray, toList } from '../utils/generic_utils';\nimport { standardizeClassWeights, standardizeWeights } from './training_utils';\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, iteratorOut) {\n    let xs;\n    let ys;\n    const iteratorOutObj = iteratorOut;\n    xs = iteratorOutObj['xs'];\n    ys = iteratorOutObj['ys'];\n    tfc.util.assert(xs != null && ys != null, () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n        'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n        'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n        'string to Tensor.  The provided Dataset instead generates ' +\n        `${iteratorOut}`);\n    const flattenedXs = flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n    const flattenedYs = flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n    const batchSize = flattenedXs[0].shape[0];\n    tfc.util.assert(flattenedXs.length === model.inputs.length, () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n        `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n        `${JSON.stringify(model.inputNames)})`);\n    tfc.util.assert(flattenedYs.length === model.outputs.length, () => `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n        `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n        `${JSON.stringify(model.outputNames)})`);\n    for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n        tfc.util.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n        tfc.util.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    return { xs: flattenedXs, ys: flattenedYs };\n}\nfunction flattenTensorOrArrayOrMap(inputOrOutput, names, values) {\n    if (values instanceof tfc.Tensor) {\n        return [values];\n    }\n    else if (Array.isArray(values)) {\n        tfc.util.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);\n        return values;\n    }\n    else {\n        const result = [];\n        // Check that all the required keys are available.\n        for (const name of names) {\n            if (values[name] == null) {\n                throw new ValueError(`The feature data generated by the dataset lacks the required ` +\n                    `${inputOrOutput} key '${name}'.`);\n            }\n            result.push(values[name]);\n        }\n        return result;\n    }\n}\nfunction standardizeTensorValidationData(data) {\n    if (data.length === 3) {\n        throw new NotImplementedError('Validation with sample weights is not implemented yet.');\n    }\n    return { xs: data[0], ys: data[1] };\n}\nexport async function fitDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n    tfc.util.assert(model.optimizer != null, () => 'You must compile a model before training/testing. Use ' +\n        'LayersModel.compile(modelCompileConfig).');\n    tfc.util.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, ` +\n        `but it is not provided in this call.`);\n    tfc.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive ` +\n        `integer, but got ${args.epochs}`);\n    tfc.util.assert(!hasBatchesPerEpoch ||\n        (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)), () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n        `positive integer if specified, but got ${args.batchesPerEpoch}`);\n    tfc.util.assert(\n    // tslint:disable-next-line:no-any\n    args['validationSplit'] == null, () => '`validationSplit` is not supported by `fitDataset()`. ' +\n        'Use validationData instead.');\n    if (model.isTraining) {\n        throw new Error('Cannot start training because another fit() call is ongoing.');\n    }\n    model.isTraining = true;\n    try {\n        const doValidation = args.validationData != null;\n        let valXs;\n        let valYs;\n        if (doValidation) {\n            if (isDatasetObject(args.validationData)) {\n                tfc.util.assert(args.validationBatches == null ||\n                    (args.validationBatches > 0 &&\n                        Number.isInteger(args.validationBatches)), () => `For fitDataset() with dataset-based validation, ` +\n                    `config.validationBatches is expected not to be provided, ` +\n                    `or to be a positive integer, ` +\n                    `but got ${args.validationBatches}`);\n            }\n            else {\n                const validationData = standardizeTensorValidationData(args.validationData);\n                valXs = validationData.xs;\n                valYs = validationData.ys;\n            }\n        }\n        const trainFunction = model.makeTrainFunction();\n        const outLabels = model.getDedupedMetricsNames();\n        let callbackMetrics;\n        if (doValidation) {\n            callbackMetrics =\n                outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n        }\n        else {\n            callbackMetrics = outLabels.slice();\n        }\n        const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n        const verbose = args.verbose == null ? 1 : args.verbose;\n        const { callbackList, history } = configureCallbacks(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null, // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n        callbackList.setModel(model);\n        model.history = history;\n        await callbackList.onTrainBegin();\n        model.stopTraining_ = false;\n        let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n        let dataIterator = await dataset.iterator();\n        while (epoch < args.epochs) {\n            const epochLogs = {};\n            await callbackList.onEpochBegin(epoch);\n            let stepsDone = 0;\n            let batchIndex = 0;\n            if (!hasBatchesPerEpoch) {\n                dataIterator = await dataset.iterator();\n            }\n            while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n                const iteratorOut = await dataIterator.next();\n                // If `batchesPerEpoch` is specified, the dataset should not be\n                // exhausted until all epoches are done.\n                if (hasBatchesPerEpoch && iteratorOut.done) {\n                    console.warn('You provided `batchesPerEpoch` as ' +\n                        `${args.batchesPerEpoch}, ` +\n                        'but your dataset iterator ran out of data after ' +\n                        `${stepsDone} batches; ` +\n                        'interrupting training. Make sure that your ' +\n                        'dataset can generate at least `batchesPerEpoch * epochs` ' +\n                        'batches (in this case, ' +\n                        `${args.batchesPerEpoch * args.epochs} batches). ` +\n                        'You may need to use the repeat() function when building ' +\n                        'your dataset.');\n                    break;\n                }\n                if (iteratorOut.value != null) {\n                    const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                    const batchLogs = {};\n                    batchLogs['batch'] = batchIndex;\n                    batchLogs['size'] = xs[0].shape[0];\n                    await callbackList.onBatchBegin(batchIndex, batchLogs);\n                    const sampleWeights = [];\n                    if (args.classWeight != null) {\n                        const standardClassWeights = standardizeClassWeights(args.classWeight, model.outputNames);\n                        for (let i = 0; i < standardClassWeights.length; ++i) {\n                            sampleWeights.push(await standardizeWeights(ys[i], null, standardClassWeights[i]));\n                        }\n                    }\n                    // Train on batch.\n                    const ins = xs.concat(ys).concat(sampleWeights);\n                    const outs = trainFunction(ins);\n                    tfc.dispose(ins);\n                    for (let i = 0; i < outLabels.length; ++i) {\n                        const label = outLabels[i];\n                        const out = outs[i];\n                        batchLogs[label] = out;\n                        tfc.keep(out);\n                    }\n                    await callbackList.onBatchEnd(batchIndex, batchLogs);\n                    disposeTensorsInLogs(batchLogs);\n                    batchIndex++;\n                    stepsDone++;\n                }\n                if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                    iteratorOut.done) {\n                    // Epoch finished. Perform validation.\n                    if (doValidation) {\n                        let valOuts;\n                        if (isDatasetObject(args.validationData)) {\n                            valOuts = toList(await model.evaluateDataset(args.validationData, { batches: args.validationBatches }));\n                        }\n                        else {\n                            valOuts = toList(model.evaluate(valXs, valYs, {\n                                batchSize: args.validationBatchSize == null ?\n                                    DEFAULT_VALIDATION_BATCH_SIZE :\n                                    args.validationBatchSize,\n                                verbose: 0\n                            }));\n                        }\n                        for (let i = 0; i < model.metricsNames.length; ++i) {\n                            epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n                        }\n                    }\n                    // Call `break` to exit one epoch lopp after validation is done. If\n                    // config.batchesPerEpoch is specified, an epoch while loop will\n                    // stop when `stepsDone >= config.batchesPerEpoch`. When\n                    // config.batchesPerEpoch is not provided, the following `break` is\n                    // required to exit the while lopp after dataset is exhausted.\n                    break;\n                }\n                if (model.stopTraining_) {\n                    break;\n                }\n            }\n            await callbackList.onEpochEnd(epoch, epochLogs);\n            epoch++;\n            if (model.stopTraining_) {\n                break;\n            }\n        }\n        await callbackList.onTrainEnd();\n        await model.history.syncData();\n        return model.history;\n    }\n    finally {\n        model.isTraining = false;\n    }\n}\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch(dataset, args) {\n    // Attempt to determine # of batches in an epoch.\n    let stepsPerEpoch = null;\n    if (args.batchesPerEpoch != null) {\n        stepsPerEpoch = args.batchesPerEpoch;\n    }\n    else if (Number.isFinite(dataset.size)) {\n        stepsPerEpoch = dataset.size;\n    }\n    return stepsPerEpoch;\n}\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject(dataset) {\n    return (typeof dataset.iterator === 'function');\n}\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject(iterator) {\n    return (typeof iterator.next === 'function');\n}\nexport async function evaluateDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    args = args || {};\n    const hasBatches = args.batches != null;\n    const f = model.testFunction;\n    let outs = [];\n    if (args.verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n    }\n    tfc.util.assert(!hasBatches || (args.batches > 0 && Number.isInteger(args.batches)), () => 'Test loop expects `batches` to be a positive integer, but ' +\n        `received ${JSON.stringify(args.batches)}`);\n    const dataIterator = isLazyIteratorObject(dataset) ?\n        dataset :\n        await dataset.iterator();\n    // Keeps track of number of examples used in this evaluation.\n    let numExamples = 0;\n    let batch = 0;\n    while (hasBatches ? batch < args.batches : true) {\n        const iteratorOut = await dataIterator.next();\n        outs = tfc.tidy(() => {\n            if (iteratorOut.value) {\n                // TODO(cais): Once real dataset is available, use\n                //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n                const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                const xsAndYs = xs.concat(ys);\n                const batchOuts = tfc.tidy(() => f(xsAndYs));\n                tfc.dispose(xsAndYs);\n                if (batch === 0) {\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        outs.push(scalar(0));\n                    }\n                }\n                const batchSize = xsAndYs[0].shape[0];\n                for (let i = 0; i < batchOuts.length; ++i) {\n                    const batchOut = batchOuts[i];\n                    const oldScalar = outs[i];\n                    outs[i] =\n                        tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n                    if (batch > 0) {\n                        tfc.dispose(oldScalar);\n                    }\n                }\n                tfc.dispose(batchOuts);\n                numExamples += batchSize;\n                ++batch;\n            }\n            return outs;\n        });\n        if (iteratorOut.done) {\n            if (hasBatches) {\n                console.warn('Your dataset iterator ran out of data during evaluateDataset(). ' +\n                    'Interrupting evalution. Make sure that your ' +\n                    'dataset can generate at least `batches` ' +\n                    `batches (in this case, ${args.batches} batches). ` +\n                    'You may need to use the repeat() function when building ' +\n                    'your dataset.');\n            }\n            break;\n        }\n    }\n    for (let i = 0; i < outs.length; ++i) {\n        const oldScalar = outs[i];\n        outs[i] = tfc.div(outs[i], numExamples);\n        tfc.dispose(oldScalar);\n    }\n    return singletonOrArray(outs);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport { expandDims, gather, sliceAlongFirstAxis } from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { range } from '../utils/math_utils';\nexport function checkBatchSize(batchSize) {\n    tfc.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n    }\n    else { // Tensor.\n        return sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(arrays, indices) {\n    return tfc.tidy(() => {\n        if (arrays == null) {\n            return null;\n        }\n        else if (Array.isArray(arrays)) {\n            return arrays.map(array => sliceArraysByIndices(array, indices));\n        }\n        else {\n            // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n            //   tensor1d() calls.\n            return gather(arrays, indices.dtype === 'int32' ? indices : tfc.cast(indices, 'int32'));\n        }\n    });\n}\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(size, batchSize) {\n    const output = [];\n    let batchStart = 0;\n    let batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n    if (batchSize == null) {\n        batchSize = 32;\n    }\n    if (epochs == null) {\n        epochs = 1;\n    }\n    if (shuffle == null) {\n        shuffle = true;\n    }\n    if (initialEpoch == null) {\n        initialEpoch = 0;\n    }\n    // TODO(cais): Change const to let below when implementing validation.\n    let doValidation = false;\n    if (valF != null && valIns != null) {\n        doValidation = true;\n        // TODO(cais): verbose message.\n    }\n    if (validationSteps != null) {\n        doValidation = true;\n        if (stepsPerEpoch == null) {\n            throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' +\n                'i.e., `stepsPerEpoch` must be set.');\n        }\n    }\n    const numTrainSamples = model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n    let indexArray;\n    if (numTrainSamples != null) {\n        indexArray = range(0, numTrainSamples);\n    }\n    if (verbose == null) {\n        verbose = 1;\n    }\n    const { callbackList, history } = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n    // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n    for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n        await callbackList.onEpochBegin(epoch);\n        const epochLogs = {};\n        if (stepsPerEpoch != null) {\n            throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n        }\n        else {\n            if (shuffle === 'batch') {\n                throw new NotImplementedError('batch shuffling is not implemneted yet');\n            }\n            else if (shuffle) {\n                util.shuffle(indexArray);\n            }\n            // Convert the potentially shuffled indices to Tensor1D, to avoid the\n            // cost of repeated creation of Array1Ds later on.\n            const epochIndexArray1D = tensor1d(indexArray);\n            const batches = makeBatches(numTrainSamples, batchSize);\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchLogs = {};\n                await callbackList.onBatchBegin(batchIndex, batchLogs);\n                tfc.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n                    batchLogs['batch'] = batchIndex;\n                    batchLogs['size'] = batchEnd - batchStart;\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = sliceArraysByIndices(ins, batchIds);\n                    const outs = f(insBatch);\n                    for (let i = 0; i < outLabels.length; ++i) {\n                        const label = outLabels[i];\n                        const out = outs[i];\n                        batchLogs[label] = out;\n                        tfc.keep(out);\n                        // TODO(cais): Use scope() to avoid ownership.\n                    }\n                    if (batchIndex === batches.length - 1) { // Last batch.\n                        if (doValidation) {\n                            const valOuts = model.testLoop(valF, valIns, batchSize);\n                            // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                            for (let i = 0; i < outLabels.length; ++i) {\n                                const label = outLabels[i];\n                                const out = valOuts[i];\n                                tfc.keep(out);\n                                // TODO(cais): Use scope() to avoid ownership.\n                                epochLogs['val_' + label] = out;\n                            }\n                        }\n                    }\n                });\n                await callbackList.onBatchEnd(batchIndex, batchLogs);\n                disposeTensorsInLogs(batchLogs);\n                if (model.stopTraining_) {\n                    break;\n                }\n                // TODO(cais): return outs as list of Tensor.\n            }\n            epochIndexArray1D.dispose();\n        }\n        // TODO(cais): Run validation at the end of the epoch.\n        await callbackList.onEpochEnd(epoch, epochLogs);\n        if (model.stopTraining_) {\n            break;\n        }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n}\nexport async function fitTensors(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, x, y, args = {}) {\n    if (model.isTraining) {\n        throw new Error('Cannot start training because another fit() call is ongoing.');\n    }\n    model.isTraining = true;\n    let inputs;\n    let targets;\n    let originalInputs;\n    let originalTargets;\n    let inputValX;\n    let inputValY;\n    let valX;\n    let valY;\n    let sampleWeights;\n    try {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        // Validate user data.\n        // TODO(cais): Support sampleWeight.\n        const checkBatchAxis = false;\n        const standardizedOuts = await model.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n        inputs = standardizedOuts[0];\n        targets = standardizedOuts[1];\n        sampleWeights = standardizedOuts[2];\n        // Prepare validation data.\n        let doValidation = false;\n        let valIns;\n        if (args.validationData != null && args.validationData.length > 0) {\n            doValidation = true;\n            if (args.validationData.length === 2) {\n                // config.validationData consists of valX and valY.\n                inputValX = args.validationData[0];\n                inputValY = args.validationData[1];\n            }\n            else if (args.validationData.length === 3) {\n                throw new NotImplementedError('validationData including sample weights is not supported yet.');\n            }\n            else {\n                throw new ValueError(`When passing validation data, it must contain 2 (valX, valY) ` +\n                    `or 3 (valX, valY, valSampleWeight) items; ` +\n                    `${args.validationData} is invalid.`);\n            }\n            const checkBatchAxis = true;\n            const valStandardized = await model.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */ null, /** Unused class weights. */ checkBatchAxis, batchSize);\n            valX = valStandardized[0];\n            valY = valStandardized[1];\n            valIns = valX.concat(valY);\n            // TODO(cais): Add useLearningPhase data properly.\n        }\n        else if (args.validationSplit != null && args.validationSplit > 0 &&\n            args.validationSplit < 1) {\n            doValidation = true;\n            // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n            const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n            const originalBatchSize = inputs[0].shape[0];\n            valX = sliceArrays(inputs, splitAt, originalBatchSize);\n            originalInputs = inputs;\n            inputs = sliceArrays(inputs, 0, splitAt);\n            valY = sliceArrays(targets, splitAt, originalBatchSize);\n            originalTargets = targets;\n            targets = sliceArrays(targets, 0, splitAt);\n            // TODO(cais): Once sampleWeights becomes available, slice it to get\n            //   valSampleWeights.\n            valIns = valX.concat(valY);\n            // TODO(cais): Add useLearningPhase data properly.\n        }\n        else if (args.validationSteps != null) {\n            doValidation = true;\n            // TODO(cais): Add useLearningPhase.\n        }\n        const ins = inputs.concat(targets).concat(sampleWeights);\n        model.checkTrainableWeightsConsistency();\n        // TODO(cais): Handle use_learning_phase and learning_phase?\n        // Porting Note: Here we see a key deviation of tfjs-layers from\n        // Keras.\n        //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n        //  we do not construct symbolic computation graphs to embody the\n        //  training process. Instead, we define a function that performs the\n        //  training action. In PyKeras, the data (inputs and targets) are fed\n        //  through graph placeholders. In tfjs-layers, the data are fed as\n        //  function arguments. Since the function are defined below in the\n        //  scope, we don't have equivalents of PyKeras's\n        //  `_make_train_funciton`.\n        const trainFunction = model.makeTrainFunction();\n        const outLabels = model.getDedupedMetricsNames();\n        let valFunction;\n        let callbackMetrics;\n        if (doValidation) {\n            model.makeTestFunction();\n            valFunction = model.testFunction;\n            callbackMetrics =\n                outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n        }\n        else {\n            valFunction = null;\n            valIns = [];\n            callbackMetrics = outLabels.slice();\n        }\n        const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n        const out = await fitLoop(model, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n        return out;\n    }\n    finally {\n        model.isTraining = false;\n        // Memory clean up.\n        disposeNewTensors(inputs, x);\n        disposeNewTensors(targets, y);\n        disposeNewTensors(originalInputs, x);\n        disposeNewTensors(originalTargets, y);\n        disposeNewTensors(valX, inputValX);\n        disposeNewTensors(valY, inputValY);\n        if (sampleWeights != null) {\n            tfc.dispose(sampleWeights);\n        }\n    }\n    // TODO(cais): Add value to outLabels.\n}\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors) {\n    const outs = [];\n    if (tensors instanceof Tensor) {\n        tensors = [tensors];\n    }\n    // Make Tensors at least 2D.\n    for (let i = 0; i < tensors.length; ++i) {\n        const tensor = tensors[i];\n        if (tensor.rank === 1) {\n            outs.push(expandDims(tensor, 1));\n        }\n        else if (tensor.rank === 0) {\n            throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' +\n                '(scalar).');\n        }\n        else {\n            outs.push(tensor);\n        }\n    }\n    return outs;\n}\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(tensors, refTensors) {\n    if (tensors == null) {\n        return;\n    }\n    const oldTensorIds = [];\n    if (refTensors instanceof Tensor) {\n        oldTensorIds.push(refTensors.id);\n    }\n    else if (Array.isArray(refTensors)) {\n        refTensors.forEach(t => oldTensorIds.push(t.id));\n    }\n    else if (refTensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in refTensors) {\n            const oldTensor = refTensors[name];\n            oldTensorIds.push(oldTensor.id);\n        }\n    }\n    const tensorsToDispose = [];\n    if (tensors instanceof Tensor) {\n        if (oldTensorIds.indexOf(tensors.id) === -1) {\n            tensorsToDispose.push(tensors);\n        }\n    }\n    else if (Array.isArray(tensors)) {\n        tensors.forEach(t => {\n            if (oldTensorIds.indexOf(t.id) === -1) {\n                tensorsToDispose.push(t);\n            }\n        });\n    }\n    else if (tensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in tensors) {\n            const tensor = tensors[name];\n            if (oldTensorIds.indexOf(tensor.id) === -1) {\n                tensorsToDispose.push(tensor);\n            }\n        }\n    }\n    tensorsToDispose.forEach(t => {\n        if (!t.isDisposed) {\n            t.dispose();\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute, FeedDict } from './executor';\nimport { evaluateDataset, fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x) {\n    return x instanceof Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x) {\n    return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    if (names == null || names.length === 0) {\n        // Check for the case where the model expected no data, but some data got\n        // sent.\n        if (data != null) {\n            let gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (const key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                // `data` is a singleton Tensor in this case.\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` +\n                    `but got ${data}`);\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(name => null);\n    }\n    let arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (const name of names) {\n            if (data[name] == null) {\n                throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ` +\n                    `${names}`);\n            }\n            arrays.push(data[name]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `model expected. Expected to see ${names.length} Tensor(s), but ` +\n                `instead got the following list of Tensor(s): ${data}`);\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n                `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n        }\n        arrays = [data];\n    }\n    arrays = ensureTensorsRank2OrHigher(arrays);\n    // Check shape compatibility.\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s). but got array with ` +\n                    `shape ${array.shape}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    // Skip the first (batch) axis.\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new ValueError(`${exceptionPrefix} expected a batch of elements where each ` +\n                        `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n                        `(i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}])` +\n                        ` but the ${exceptionPrefix} received an input with ${array.shape[0]}` +\n                        ` examples, each with shape [${array.shape.slice(1, array.shape.length)}]` +\n                        ` (tensor shape [${array.shape}])`);\n                }\n            }\n        }\n    }\n    return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(inputs, targets, weights) {\n    const setX = unique(inputs.map(input => input.shape[0]));\n    setX.sort();\n    const setY = unique(targets.map(target => target.shape[0]));\n    setY.sort();\n    // TODO(cais): Check `weights` as well.\n    if (setX.length > 1) {\n        throw new ValueError(`All input Tensors (x) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(inputs.map(input => input.shape))}`);\n    }\n    if (setY.length > 1) {\n        throw new ValueError(`All target Tensors (y) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(targets.map(target => target.shape))}`);\n    }\n    if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n        throw new ValueError(`Input Tensors should have the same number of samples as target ` +\n            `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n            `sample(s).`);\n    }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    // TODO(cais): Dedicated test coverage?\n    const keyLosses = [\n        losses.meanSquaredError, losses.binaryCrossentropy,\n        losses.categoricalCrossentropy\n    ];\n    for (let i = 0; i < targets.length; ++i) {\n        const y = targets[i];\n        const loss = lossFns[i];\n        const shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new ValueError(`You are passing a target array of shape ${y.shape} while using ` +\n                    `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n                    `expects targets to be binary matrices (1s and 0s) of shape ` +\n                    `[samples, classes].`);\n                // TODO(cais): Example code in error message.\n            }\n        }\n        if (keyLosses.indexOf(loss) !== -1) {\n            const slicedYShape = y.shape.slice(1);\n            const slicedShape = shape.slice(1);\n            for (let j = 0; j < slicedYShape.length; ++j) {\n                const targetDim = slicedYShape[j];\n                const outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an ` +\n                        `output of shape ${shape}, while using a loss function that ` +\n                        `expects targets to have the same shape as the output.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    let arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `the model expected. Expected to see ${names.length} Tensor(s),` +\n                ` but instead got ${data.length} Tensors(s).`);\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n                `but only received one Tensor. Found: array with shape ` +\n                `${JSON.stringify(data.shape)}.`);\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s), but got array with ` +\n                    `shape ${JSON.stringify(array.shape)}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ` +\n                            `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                            `got array with shape ${JSON.stringify(array.shape)}.`);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(name => []);\n    }\n    let wrappedMetrics;\n    if (typeof metrics === 'string' || typeof metrics === 'function') {\n        wrappedMetrics = [metrics];\n    }\n    else if (Array.isArray(metrics) || typeof metrics === 'object') {\n        wrappedMetrics = metrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an string,' +\n            `function, Array, or Object, found: ${metrics}`);\n    }\n    if (Array.isArray(wrappedMetrics)) {\n        // We then apply all metrics to all outputs.\n        return outputNames.map(name => wrappedMetrics);\n    }\n    else {\n        // In this case, metrics is a dict.\n        const nestedMetrics = [];\n        for (const name of outputNames) {\n            let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container {\n    constructor(args) {\n        super(args);\n        this.isTraining = false;\n    }\n    /**\n     * Print a text summary of the model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - If the model has non-sequential-like topology, the inputs each layer\n     *   receives\n     * - The total number of trainable and non-trainable parameters of the model.\n     *\n     * ```js\n     * const input1 = tf.input({shape: [10]});\n     * const input2 = tf.input({shape: [20]});\n     * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n     * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n     * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n     * const output =\n     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n     *\n     * const model = tf.model({inputs: [input1, input2], outputs: output});\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            throw new ValueError(`This model has never been called, thus its weights have not been ` +\n                `created yet. So no summary can be displayed. Build the model ` +\n                `first (e.g., by calling it on some test data).`);\n        }\n        printSummary(this, lineLength, positions, printFn);\n    }\n    /**\n     * Configures and prepares the model for training and evaluation.  Compiling\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n     * or `evaluate` on an un-compiled model will throw an error.\n     *\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n     * metrics to be used for fitting and evaluating this model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    compile(args) {\n        if (args.loss == null) {\n            args.loss = [];\n        }\n        this.loss = args.loss;\n        if (typeof args.optimizer === 'string') {\n            this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n            this.isOptimizerOwned = true;\n        }\n        else {\n            if (!(args.optimizer instanceof Optimizer)) {\n                throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n            }\n            this.optimizer_ = args.optimizer;\n            this.isOptimizerOwned = false;\n        }\n        // TODO(cais): Add lossWeights.\n        // TODO(cais): Add sampleWeightMode.\n        // Prepare loss functions.\n        let lossFunctions = [];\n        if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n            typeof args.loss !== 'function') {\n            args.loss = args.loss;\n            for (const name in args.loss) {\n                if (this.outputNames.indexOf(name) === -1) {\n                    throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". ` +\n                        `Only expected the following keys: ${this.outputNames}`);\n                }\n            }\n            for (const name of this.outputNames) {\n                if (args.loss[name] == null) {\n                    console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` +\n                        `this was done on purpose, and we will not be expecting data ` +\n                        `to be passed to ${name} during training`);\n                }\n                lossFunctions.push(losses.get(args.loss[name]));\n            }\n        }\n        else if (Array.isArray(args.loss)) {\n            if (args.loss.length !== this.outputs.length) {\n                throw new ValueError(`When passing an Array as loss, it should have one entry per ` +\n                    `model output. The model has ${this.outputs.length} output(s), ` +\n                    `but you passed loss=${args.loss}.`);\n            }\n            const theLosses = args.loss;\n            lossFunctions = theLosses.map(l => losses.get(l));\n        }\n        else {\n            const lossFunction = losses.get(args.loss);\n            this.outputs.forEach(_ => {\n                lossFunctions.push(lossFunction);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (let i = 0; i < this.outputs.length; ++i) {\n            // TODO(cais): Logic for skipping target(s).\n            const shape = this.internalOutputShapes[i];\n            const name = this.outputNames[i];\n            this.feedOutputNames.push(name);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        // TODO(cais): Add logic for output masks.\n        // TODO(cais): Add logic for sample weights.\n        const skipTargetIndices = [];\n        // Prepare metrics.\n        this.metrics = args.metrics;\n        // TODO(cais): Add weightedMetrics.\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        // Compute total loss.\n        // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n        //   Here, metricsTensors are TypeScript functions. This difference is due\n        //   to the difference in symbolic/imperative property of the backends.\n        nameScope('loss', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                // TODO(cais): Add weightedLoss, sampleWeight and mask.\n                //   The following line should be weightedLoss\n                const weightedLoss = this.lossFunctions[i];\n                if (this.outputs.length > 1) {\n                    this.metricsTensors.push([weightedLoss, i]);\n                    this.metricsNames.push(this.outputNames[i] + '_loss');\n                }\n            }\n            // Porting Note: Due to the imperative nature of the backend, we calculate\n            //   the regularizer penalties in the totalLossFunction, instead of here.\n        });\n        const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n        // TODO(cais): Add nestedWeightedMetrics.\n        /**\n         * Helper function used in loop below.\n         */\n        const appendMetric = (outputIndex, metricName, metricTensor) => {\n            if (this.outputNames.length > 1) {\n                metricName = this.outputNames[outputIndex] + '_' + metricName;\n            }\n            this.metricsNames.push(metricName);\n            this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        nameScope('metric', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                const outputMetrics = nestedMetrics[i];\n                // TODO(cais): Add weights and outputWeightedMetrics.\n                // TODO(cais): Add optional arg `weights` to the following function.\n                const handleMetrics = (metrics) => {\n                    const metricNamePrefix = '';\n                    let metricName;\n                    let accFn;\n                    let weightedMetricFn;\n                    //  TODO(cais): Use 'weights_' for weighted metrics.\n                    for (const metric of metrics) {\n                        if (typeof metric === 'string' &&\n                            ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                                -1) {\n                            const outputShape = this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                // case: binary accuracy/crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            }\n                            else if (this.lossFunctions[i] ===\n                                losses.sparseCategoricalCrossentropy) {\n                                // case: categorical accuracy / crossentropy with sparse\n                                // targets.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            }\n                            else {\n                                // case: categorical accuracy / crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            let suffix;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            const metricFn = Metrics.get(metric);\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = metricFn;\n                            metricName =\n                                metricNamePrefix + Metrics.getLossOrMetricName(metric);\n                        }\n                        // TODO(cais): Add weighting and masking to metricResult.\n                        let metricResult;\n                        nameScope(metricName, () => {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    }\n                };\n                handleMetrics(outputMetrics);\n                // TODO(cais): Call handleMetrics with weights.\n            }\n        });\n        // Porting Notes: Given the imperative backend of tfjs-core,\n        //   there is no need for constructing the symbolic graph and placeholders.\n        this.collectedTrainableWeights = this.trainableWeights;\n    }\n    /**\n     * Check trainable weights count consistency.\n     *\n     * This will raise a warning if `this.trainableWeights` and\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n     * numbers of parameters).\n     * Inconsistency will typically arise when one modifies `model.trainable`\n     * without calling `model.compile()` again.\n     */\n    checkTrainableWeightsConsistency() {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        // TODO(cais): Standardize `config.sampleWeights` as well.\n        // Validate user data.\n        const checkBatchAxis = true;\n        const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        try {\n            // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n            // of the input to 0.\n            const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n            this.makeTestFunction();\n            const f = this.testFunction;\n            const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n            return singletonOrArray(testOuts);\n        }\n        finally {\n            disposeNewTensors(standardizedOuts[0], x);\n            disposeNewTensors(standardizedOuts[1], y);\n        }\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        this.makeTestFunction();\n        return evaluateDataset(this, dataset, args);\n    }\n    /**\n     * Get number of samples provided for training, evaluation or prediction.\n     *\n     * @param ins Input `tf.Tensor`.\n     * @param batchSize Integer batch size, optional.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring loop finished. Optional.\n     * @param stepsName The public API's parameter name for `steps`.\n     * @returns Number of samples provided.\n     */\n    checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {\n        let numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` +\n                    `Got batchSize = ${batchSize}`);\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new ValueError(`Either the input data should have a defined shape, or ` +\n                `${stepsName} shoud be specified.`);\n        }\n        return numSamples;\n    }\n    /**\n     * Execute internal tensors of the model with input data feed.\n     * @param inputs Input data feed. Must match the inputs of the model.\n     * @param outputs Names of the output tensors to be fetched. Must match\n     *   names of the SymbolicTensors that belong to the graph.\n     * @returns Fetched values for `outputs`.\n     */\n    execute(inputs, outputs) {\n        if (Array.isArray(outputs) && outputs.length === 0) {\n            throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n        }\n        const outputsIsArray = Array.isArray(outputs);\n        const outputNames = (outputsIsArray ? outputs : [outputs]);\n        const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n        // Format the input into a FeedDict.\n        const feedDict = new FeedDict();\n        if (inputs instanceof Tensor) {\n            inputs = [inputs];\n        }\n        if (Array.isArray(inputs)) {\n            if (inputs.length !== this.inputs.length) {\n                throw new ValueError(`The number of inputs provided (${inputs.length}) ` +\n                    `does not match the number of inputs of this model ` +\n                    `(${this.inputs.length}).`);\n            }\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n        }\n        else {\n            for (const input of this.inputs) {\n                const tensorValue = inputs[input.name];\n                if (tensorValue == null) {\n                    throw new ValueError(`No value is provided for the model's input ${input.name}`);\n                }\n                feedDict.add(input, tensorValue);\n            }\n        }\n        // Run execution.\n        const executeOutputs = execute(outputSymbolicTensors, feedDict);\n        return outputsIsArray ? executeOutputs : executeOutputs[0];\n    }\n    /**\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n     */\n    retrieveSymbolicTensors(symbolicTensorNames) {\n        const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n        let outputsRemaining = symbolicTensorNames.length;\n        for (const layer of this.layers) {\n            const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n            const layerOutputNames = layerOutputs.map(output => output.name);\n            for (let i = 0; i < symbolicTensorNames.length; ++i) {\n                const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n                if (index !== -1) {\n                    outputSymbolicTensors[i] = layerOutputs[index];\n                    outputsRemaining--;\n                }\n                if (outputsRemaining === 0) {\n                    break;\n                }\n            }\n            if (outputsRemaining === 0) {\n                break;\n            }\n        }\n        if (outputsRemaining > 0) {\n            const remainingNames = [];\n            outputSymbolicTensors.forEach((tensor, i) => {\n                if (tensor == null) {\n                    remainingNames.push(symbolicTensorNames[i]);\n                }\n            });\n            throw new ValueError(`Cannot find SymbolicTensors for output name(s): ` +\n                `${JSON.stringify(remainingNames)}`);\n        }\n        return outputSymbolicTensors;\n    }\n    /**\n     * Helper method to loop over some data in batches.\n     *\n     * Porting Note: Not using the functional approach in the Python equivalent\n     *   due to the imperative backend.\n     * Porting Note: Does not support step mode currently.\n     *\n     * @param ins: input data\n     * @param batchSize: integer batch size.\n     * @param verbose: verbosity model\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n     *   `tf.Tensor` (if multipe outputs).\n     */\n    predictLoop(ins, batchSize = 32, verbose = false) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins);\n            if (verbose) {\n                throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n            }\n            // Sample-based predictions.\n            // Porting Note: Tensor currently does not support sliced assignments as\n            //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n            //   iterating over the batches.\n            const batches = makeBatches(numSamples, batchSize);\n            const outsBatches = this.outputs.map(output => []);\n            // TODO(cais): Can the scope() be pushed down inside the for loop?\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchOuts = tfc.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    // TODO(cais): Take care of the case of the last element is a flag for\n                    //   training/test.\n                    const insBatch = sliceArrays(ins, batchStart, batchEnd);\n                    // Construct the feeds for execute();\n                    const feeds = [];\n                    if (Array.isArray(insBatch)) {\n                        for (let i = 0; i < insBatch.length; ++i) {\n                            feeds.push({ key: this.inputs[i], value: insBatch[i] });\n                        }\n                    }\n                    else {\n                        feeds.push({ key: this.inputs[0], value: insBatch });\n                    }\n                    const feedDict = new FeedDict(feeds);\n                    return execute(this.outputs, feedDict);\n                });\n                batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n            }\n            return singletonOrArray(outsBatches.map(batches => tfc.concat(batches, 0)));\n        });\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param args A `ModelPredictArgs` object containing optional fields.\n     *\n     * @return Prediction results as a `tf.Tensor`(s).\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n        checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n        try {\n            // TODO(cais): Take care of stateful models.\n            //   if (this.stateful) ...\n            // TODO(cais): Take care of the learning_phase boolean flag.\n            //   if (this.useLearningPhase) ...\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            checkBatchSize(batchSize);\n            return this.predictLoop(xsRank2OrHigher, batchSize);\n        }\n        finally {\n            disposeNewTensors(xsRank2OrHigher, x);\n        }\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predictOnBatch(tf.ones([8, 10])).print();\n     * ```\n     * @param x: Input samples, as a Tensor (for models with exactly one\n     *   input) or an array of Tensors (for models with more than one input).\n     * @return Tensor(s) of predictions\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predictOnBatch(x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        // TODO(cais): Take care of the learning_phase boolean flag.\n        //   if (this.useLearningPhase) ...\n        const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n        return this.predictLoop(x, batchSize);\n    }\n    standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n        // TODO(cais): Add sampleWeight, classWeight\n        if (this.optimizer_ == null) {\n            throw new RuntimeError('You must compile a model before training/testing. Use ' +\n                'LayersModel.compile(modelCompileArgs).');\n        }\n        const outputShapes = [];\n        for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n            const outputShape = this.feedOutputShapes[i];\n            const lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                // Porting Note: Because of strong typing `lossFn` must be a function.\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        // TODO(cais): Standardize sampleWeights & classWeights.\n        checkArrayLengths(x, y, null);\n        // TODO(cais): Check sampleWeights as well.\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new ValueError(`In a stateful network, you should only pass inputs with a ` +\n                    `number of samples that is divisible by the batch size ` +\n                    `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n            }\n        }\n        return [x, y];\n    }\n    async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n        const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        // TODO(cais): Handle sampleWeights.\n        if (sampleWeight != null) {\n            throw new Error('sample weight is not supported yet.');\n        }\n        let standardSampleWeights = null;\n        if (classWeight != null) {\n            const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n            standardSampleWeights = [];\n            for (let i = 0; i < classWeights.length; ++i) {\n                standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n            }\n        }\n        // TODO(cais): Deal with the case of model.stateful == true.\n        return [standardXs, standardYs, standardSampleWeights];\n    }\n    /**\n     * Loop over some test data in batches.\n     * @param f A Function returning a list of tensors.\n     * @param ins Array of tensors to be fed to `f`.\n     * @param batchSize Integer batch size or `null` / `undefined`.\n     * @param verbose verbosity mode.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring test finished. Ignored with the default value of `null` /\n     * `undefined`.\n     * @returns Array of Scalars.\n     */\n    testLoop(f, ins, batchSize, verbose = 0, steps) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n            const outs = [];\n            if (verbose > 0) {\n                throw new NotImplementedError('Verbose mode is not implemented yet.');\n            }\n            // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n            if (steps != null) {\n                throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n            }\n            else {\n                const batches = makeBatches(numSamples, batchSize);\n                const indexArray = tensor1d(range(0, numSamples));\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = sliceArraysByIndices(ins, batchIds);\n                    const batchOuts = f(insBatch);\n                    if (batchIndex === 0) {\n                        for (let i = 0; i < batchOuts.length; ++i) {\n                            outs.push(scalar(0));\n                        }\n                    }\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        const batchOut = batchOuts[i];\n                        outs[i] =\n                            tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n                    }\n                }\n                for (let i = 0; i < outs.length; ++i) {\n                    outs[i] = tfc.div(outs[i], numSamples);\n                }\n            }\n            return outs;\n        });\n    }\n    getDedupedMetricsNames() {\n        const outLabels = this.metricsNames;\n        // Rename duplicated metrics names (can happen with an output layer\n        // shared among multiple dataflows).\n        const dedupedOutLabels = [];\n        for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            let newLabel = label;\n            if (count(outLabels, label) > 1) {\n                const dupIndex = count(outLabels.slice(0, i), label);\n                newLabel += `_${dupIndex}`;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    }\n    /**\n     * Creates a function that performs the following actions:\n     *\n     * 1. computes the losses\n     * 2. sums them to get the total loss\n     * 3. call the optimizer computes the gradients of the LayersModel's\n     *    trainable weights w.r.t. the total loss and update the variables\n     * 4. calculates the metrics\n     * 5. returns the values of the losses and metrics.\n     */\n    makeTrainFunction() {\n        return (data) => {\n            const lossValues = [];\n            const inputs = data.slice(0, this.inputs.length);\n            const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n            const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n            const metricsValues = [];\n            // Create a function that computes the total loss based on the\n            // inputs. This function is used for obtaining gradients through\n            // backprop.\n            const totalLossFunction = () => {\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict, { 'training': true });\n                // TODO(cais): Take care of the case of multiple outputs from a\n                //   single layer?\n                let totalLoss;\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    let loss = lossFunction(targets[i], outputs[i]);\n                    if (sampleWeights[i] != null) {\n                        loss = computeWeightedLoss(loss, sampleWeights[i]);\n                    }\n                    // TODO(cais): push Scalar instead.\n                    const meanLoss = tfc.mean(loss);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    lossValues.push(meanLoss);\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                }\n                // Compute the metrics.\n                // TODO(cais): These should probably be calculated outside\n                //   totalLossFunction to benefit speed?\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    let weightedMetric;\n                    if (this.outputs.length > 1 && i < this.outputs.length) {\n                        weightedMetric = lossValues[i];\n                    }\n                    else {\n                        const metric = this.metricsTensors[i][0];\n                        const outputIndex = this.metricsTensors[i][1];\n                        weightedMetric =\n                            tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    }\n                    tfc.keep(weightedMetric);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    metricsValues.push(weightedMetric);\n                }\n                totalLoss = tfc.mean(totalLoss);\n                // Add regularizer penalties.\n                this.calculateLosses().forEach(regularizerLoss => {\n                    totalLoss = tfc.add(totalLoss, regularizerLoss);\n                });\n                return totalLoss;\n            };\n            const variables = this.collectedTrainableWeights.map(param => param.read());\n            const returnCost = true;\n            const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n            return [totalLossValue].concat(metricsValues);\n        };\n    }\n    /**\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\n     * batch of inputs, returns the prespecified loss and metrics of the model\n     * under the batch of input data.\n     */\n    makeTestFunction() {\n        this.testFunction = (data) => {\n            return tfc.tidy(() => {\n                const valOutputs = [];\n                let totalLoss;\n                const inputs = data.slice(0, this.inputs.length);\n                const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict);\n                // Compute total loss.\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    // TODO(cais): Add sample weighting and replace the simple\n                    // averaging.\n                    const loss = tfc.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                // Compute the metrics.\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    const metric = this.metricsTensors[i][0];\n                    const outputIndex = this.metricsTensors[i][1];\n                    // TODO(cais): Replace K.mean() with a proper weighting function.\n                    const meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a\n     * dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * for (let i = 1; i < 5 ; ++i) {\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *       batchSize: 4,\n     *       epochs: 3\n     *   });\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n     * }\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named,\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args A `ModelFitArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input\n     * data and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        return fitTensors(this, x, y, args);\n    }\n    // TODO(cais): Add code snippet below when it's possible to instantiate\n    //   actual dataset objects.\n    /**\n     * Trains the model using a dataset object.\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for training. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs.\n     *   Of the two items in the array, the first is the input feature(s) and\n     *   the second is the output target(s).\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fitDataset(dataset, args) {\n        return fitDataset(this, dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and matric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        // TODO(cais): Support sampleWeight and classWeight.\n        // TODO(cais): Support Dataset objects.\n        const standardizeOut = await this.standardizeUserData(x, y);\n        const inputs = standardizeOut[0];\n        const targets = standardizeOut[1];\n        const trainFunction = this.makeTrainFunction();\n        const losses = trainFunction(inputs.concat(targets));\n        const lossValues = [];\n        for (const loss of losses) {\n            const v = await loss.data();\n            lossValues.push(v[0]);\n        }\n        tfc.dispose(losses);\n        disposeNewTensors(standardizeOut[0], x);\n        disposeNewTensors(standardizeOut[1], y);\n        return singletonOrArray(lossValues);\n    }\n    /**\n     * Extract weight values of the model.\n     *\n     * @param config: An instance of `io.SaveConfig`, which specifies\n     * model-saving options such as whether only trainable weights are to be\n     * saved.\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n     *   non-uniqueified weight names) to their values.\n     */\n    getNamedWeights(config) {\n        const namedWeights = [];\n        const trainableOnly = config != null && config.trainableOnly;\n        const weights = trainableOnly ? this.trainableWeights : this.weights;\n        const weightValues = this.getWeights(trainableOnly);\n        for (let i = 0; i < weights.length; ++i) {\n            if (trainableOnly && !weights[i].trainable) {\n                // Optionally skip non-trainable weights.\n                continue;\n            }\n            namedWeights.push({ name: weights[i].originalName, tensor: weightValues[i] });\n        }\n        return namedWeights;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const input = tf.input({shape: [10]});\n     * const output = tf.layers.dense({units: 1}).apply(input);\n     * const model = tf.model({inputs: [input], outputs: [output]});\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10\n     * values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        this.stopTraining_ = stop;\n    }\n    get stopTraining() {\n        return this.stopTraining_;\n    }\n    get optimizer() {\n        return this.optimizer_;\n    }\n    set optimizer(optimizer) {\n        if (this.optimizer_ !== optimizer) {\n            this.optimizer_ = optimizer;\n            this.isOptimizerOwned = false;\n        }\n    }\n    dispose() {\n        const result = super.dispose();\n        if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n            this.isOptimizerOwned) {\n            const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n            this.optimizer_.dispose();\n            result.numDisposedVariables +=\n                numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n        }\n        return result;\n    }\n    getLossIdentifiers() {\n        let lossNames;\n        if (typeof this.loss === 'string') {\n            lossNames = toSnakeCase(this.loss);\n        }\n        else if (Array.isArray(this.loss)) {\n            for (const loss of this.loss) {\n                if (typeof loss !== 'string') {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n            lossNames = this.loss.map(name => toSnakeCase(name));\n        }\n        else {\n            const outputNames = Object.keys(this.loss);\n            lossNames = {};\n            const losses = this.loss;\n            for (const outputName of outputNames) {\n                if (typeof losses[outputName] === 'string') {\n                    lossNames[outputName] =\n                        toSnakeCase(losses[outputName]);\n                }\n                else {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n        }\n        return lossNames;\n    }\n    getMetricIdentifiers() {\n        if (typeof this.metrics === 'string' ||\n            typeof this.metrics === 'function') {\n            return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n        }\n        else if (Array.isArray(this.metrics)) {\n            return this.metrics.map(metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n        }\n        else {\n            const metricsIdentifiers = {};\n            for (const key in this.metrics) {\n                metricsIdentifiers[key] =\n                    toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n            }\n            return metricsIdentifiers;\n        }\n    }\n    getTrainingConfig() {\n        return {\n            loss: this.getLossIdentifiers(),\n            metrics: this.getMetricIdentifiers(),\n            optimizer_config: {\n                class_name: this.optimizer.getClassName(),\n                config: this.optimizer.getConfig()\n            }\n        };\n        // TODO(cais): Add weight_metrics when they are supported.\n        // TODO(cais): Add sample_weight_mode when it's supported.\n        // TODO(cais): Add loss_weights when it's supported.\n    }\n    loadTrainingConfig(trainingConfig) {\n        if (trainingConfig.weighted_metrics != null) {\n            throw new Error('Loading weight_metrics is not supported yet.');\n        }\n        if (trainingConfig.loss_weights != null) {\n            throw new Error('Loading loss_weights is not supported yet.');\n        }\n        if (trainingConfig.sample_weight_mode != null) {\n            throw new Error('Loading sample_weight_mode is not supported yet.');\n        }\n        const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n        const optimizer = deserialize(tsConfig);\n        let loss;\n        if (typeof trainingConfig.loss === 'string') {\n            loss = toCamelCase(trainingConfig.loss);\n        }\n        else if (Array.isArray(trainingConfig.loss)) {\n            loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n        }\n        else if (trainingConfig.loss != null) {\n            loss = {};\n            for (const key in trainingConfig.loss) {\n                loss[key] = toCamelCase(trainingConfig.loss[key]);\n            }\n        }\n        let metrics;\n        if (Array.isArray(trainingConfig.metrics)) {\n            metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n        }\n        else if (trainingConfig.metrics != null) {\n            metrics = {};\n            for (const key in trainingConfig.metrics) {\n                metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n            }\n        }\n        this.compile({ loss, metrics, optimizer });\n    }\n    /**\n     * Save the configuration and/or weights of the LayersModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 2. Saving `model`'s topology and weights to browser\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('indexeddb://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 3. Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n     * browser.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('downloads://my-model-1');\n     * ```\n     *\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\n     * See the documentation of `tf.io.http` for more details\n     * including specifying request parameters and implementation of the\n     * server.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('http://my-server/model/upload');\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new ValueError(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        const weightDataAndSpecs = await io.encodeWeights(this.getNamedWeights(config));\n        const returnString = false;\n        const unusedArg = null;\n        const modelConfig = this.toJSON(unusedArg, returnString);\n        const modelArtifacts = {\n            modelTopology: modelConfig,\n            format: LAYERS_MODEL_FORMAT_NAME,\n            generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n            convertedBy: null,\n        };\n        const includeOptimizer = config == null ? false : config.includeOptimizer;\n        if (includeOptimizer && this.optimizer != null) {\n            modelArtifacts.trainingConfig = this.getTrainingConfig();\n            const weightType = 'optimizer';\n            const { data: optimizerWeightData, specs: optimizerWeightSpecs } = await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n            weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n            weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n        }\n        if (this.userDefinedMetadata != null) {\n            // Check serialized size of user-defined metadata.\n            const checkSize = true;\n            checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n            modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n        }\n        modelArtifacts.weightData = weightDataAndSpecs.data;\n        modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n        return handlerOrURL.save(modelArtifacts);\n    }\n    /**\n     * Set user-defined metadata.\n     *\n     * The set metadata will be serialized together with the topology\n     * and weights of the model during `save()` calls.\n     *\n     * @param setUserDefinedMetadata\n     */\n    setUserDefinedMetadata(userDefinedMetadata) {\n        checkUserDefinedMetadata(userDefinedMetadata, this.name);\n        this.userDefinedMetadata = userDefinedMetadata;\n    }\n    /**\n     * Get user-defined metadata.\n     *\n     * The metadata is supplied via one of the two routes:\n     *   1. By calling `setUserDefinedMetadata()`.\n     *   2. Loaded during model loading (if the model is constructed\n     *      via `tf.loadLayersModel()`.)\n     *\n     * If no user-defined metadata is available from either of the\n     * two routes, this function will return `undefined`.\n     */\n    getUserDefinedMetadata() {\n        return this.userDefinedMetadata;\n    }\n}\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n}\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source keras/models.py */\nimport { dispose, io, serialization, util } from '@tensorflow/tfjs-core';\nimport { getUid } from './backend/state';\nimport { Input } from './engine/input_layer';\nimport { getSourceInputs, Node } from './engine/topology';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError, RuntimeError, ValueError } from './errors';\nimport { deserialize } from './layers/serialization';\nimport * as generic_utils from './utils/generic_utils';\nimport { convertPythonicToTs } from './utils/serialization_utils';\nimport { getExactlyOneShape } from './utils/types_utils';\n/**\n * Parses a JSON model configuration file and returns a model instance.\n *\n * ```js\n * // This example shows how to serialize a model using `toJSON()` and\n * // deserialize it as another model using `tf.models.modelFromJSON()`.\n * // Note: this example serializes and deserializes only the topology\n * // of the model; the weights of the loaded model will be different\n * // from those of the the original model, due to random weight\n * // initialization.\n * // To load the topology and weights of a model, use `tf.loadLayersModel()`.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n * // Serialize `model1` as a JSON object.\n * const model1JSON = model1.toJSON(null, false);\n * model1.summary();\n *\n * const model2 = await tf.models.modelFromJSON(model1JSON);\n * model2.summary();\n * ```\n *\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\n *       weights configuration. It can also be only the topology JSON of the\n *       model, in which case the weights will not be loaded.\n *  @param custom_objects Optional dictionary mapping names\n *       (strings) to custom classes or functions to be\n *       considered during deserialization.\n * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).\n */\nexport async function modelFromJSON(modelAndWeightsConfig, customObjects) {\n    if (!('modelTopology' in modelAndWeightsConfig)) {\n        modelAndWeightsConfig = { modelTopology: modelAndWeightsConfig };\n    }\n    modelAndWeightsConfig = modelAndWeightsConfig;\n    let modelTopology = modelAndWeightsConfig.modelTopology;\n    if (modelTopology['model_config'] != null) {\n        // If the model-topology JSON contains a 'model_config' field, then it is\n        // a full model JSON (e.g., from `keras.Model.save()`), which contains\n        // not only the model's architecture in its 'model_config' field, but\n        // additional information such as the model's optimizer. We use only the\n        // 'model_config' field currently.\n        modelTopology = modelTopology['model_config'];\n    }\n    const tsConfig = convertPythonicToTs(modelTopology);\n    const model = deserialize(tsConfig, customObjects);\n    if (modelAndWeightsConfig.weightsManifest != null) {\n        // Load the weight values keyed by the original tensor names in the model\n        // file that was loaded.  These should match the keys of the weight\n        // manifest.\n        const weightValues = await io.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(weight => weight.originalName));\n        // Map the weights to the unique tensor names generated during model loading\n        const uniqueWeightValues = {};\n        for (const weight of model.weights) {\n            uniqueWeightValues[weight.originalName] =\n                weightValues[weight.originalName];\n        }\n        model.loadWeights(uniqueWeightValues);\n        // Dispose temporary weight values.\n        dispose(weightValues);\n    }\n    return model;\n}\n/**\n * Load a model, including its topology and optionally weights.  See the\n * Tutorial named \"How to import a Keras Model\" for usage examples.\n *\n * Example 1: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 2. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * Example 4. Load a model from an HTTP server.\n *\n * ```js\n * const model = await\n *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. This path will be\n *      interpreted as a relative HTTP path, to which `fetch` will be used to\n *      request the model topology and weight manifest JSON.\n *      The content of the JSON file is assumed to be a JSON object with the\n *      following fields and values:\n *      - 'modelTopology': A JSON object that can be either of:\n *        1. a model architecture JSON consistent with the format of the return\n *            value of `keras.Model.to_json()`\n *        2. a full model JSON in the format of `keras.models.save_model()`.\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\n *      See the Python converter function `save_model()` for more details.\n *      It is also assumed that model weights can be accessed from relative\n *      paths described by the `paths` fields in weights manifest.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - `onProgress`: A progress callback of the form:\n *     `(fraction: number) => void`. This callback can be used to monitor the\n *     model-loading process.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n */\nexport async function loadLayersModelInternal(pathOrIOHandler, options) {\n    if (options == null) {\n        options = {};\n    }\n    if (typeof pathOrIOHandler === 'string') {\n        const handlers = io.getLoadHandlers(pathOrIOHandler, options);\n        if (handlers.length === 0) {\n            // For backward compatibility: if no load handler can be found,\n            // assume it is a relative http path.\n            // TODO(cais): Reformat the args into a single `LoadOptions` once the core\n            // is refactored.\n            handlers.push(io.browserHTTPRequest(pathOrIOHandler, options));\n        }\n        else if (handlers.length > 1) {\n            throw new ValueError(`Found more than one (${handlers.length}) load handlers for ` +\n                `URL '${pathOrIOHandler}'`);\n        }\n        pathOrIOHandler = handlers[0];\n    }\n    return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);\n}\n/**\n * Load a model and optionally its weights, using an IOHandler object.\n *\n * @param handler The instance of `IOHandler` to be used during the model\n *   loading.\n * @param customObjects Any optional custom objects to be used during model\n *   loading.\n * @param strict Whether the weight loading will be done in strict mode.\n *   Default: `true`.\n */\nexport async function loadLayersModelFromIOHandler(handler, customObjects, options) {\n    if (options == null) {\n        options = {};\n    }\n    if (handler.load == null) {\n        throw new ValueError('Cannot proceed with model loading because the IOHandler provided ' +\n            'does not have the `load` method implemented.');\n    }\n    const artifacts = await handler.load();\n    let modelTopology = artifacts.modelTopology;\n    if (modelTopology['model_config'] != null) {\n        modelTopology = modelTopology['model_config'];\n    }\n    const strict = options.strict == null ? true : options.strict;\n    // If weights are provided and the weight-loading mode is strict, use\n    // fast weight initialization. This skips costly initializers such as\n    // 'orthogonal' and saves unnecessary computation in cases where\n    // the initialized weight values will immediately be overwritten by\n    // loaded weight values.\n    const fastWeightInit = artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n    const model = deserialize(convertPythonicToTs(modelTopology), customObjects, fastWeightInit);\n    const trainingConfig = artifacts.trainingConfig;\n    if (trainingConfig != null) {\n        model.loadTrainingConfig(trainingConfig);\n    }\n    if (artifacts.userDefinedMetadata != null) {\n        model.setUserDefinedMetadata(artifacts.userDefinedMetadata);\n    }\n    // If weightData is present, load the weights into the model.\n    if (artifacts.weightData != null) {\n        // Loading weights requires weightSpecs.\n        if (artifacts.weightSpecs == null) {\n            throw new ValueError('LayersModel artifacts contains weight data, but not weight specs. ' +\n                'Therefore loading of weights cannot proceed.');\n        }\n        const { modelWeights, optimizerWeights } = decodeModelAndOptimizerWeights(artifacts.weightData, artifacts.weightSpecs);\n        model.loadWeights(modelWeights, strict);\n        if (model.optimizer != null && optimizerWeights.length > 0) {\n            await model.optimizer.setWeights(optimizerWeights);\n        }\n        // Dispose temporary weight values.\n        dispose(modelWeights);\n        dispose(optimizerWeights.map(w => w.tensor));\n    }\n    return model;\n}\nfunction decodeModelAndOptimizerWeights(buffer, specs) {\n    const name2Tensor = io.decodeWeights(buffer, specs);\n    const modelWeights = {};\n    const optimizerWeights = [];\n    specs.forEach(spec => {\n        if (spec.group === 'optimizer') {\n            optimizerWeights.push({ name: spec.name, tensor: name2Tensor[spec.name] });\n        }\n        else {\n            modelWeights[spec.name] = name2Tensor[spec.name];\n        }\n    });\n    return { modelWeights, optimizerWeights };\n}\n/**\n * A model with a stack of layers, feeding linearly from one to the next.\n *\n * `tf.sequential` is a factory function that creates an instance of\n * `tf.Sequential`.\n *\n * ```js\n *  // Define a model for linear regression.\n *  const model = tf.sequential();\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n *\n *  // Prepare the model for training: Specify the loss and the optimizer.\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *  // Generate some synthetic data for training.\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n *\n *  // Train the model using the data then do inference on a data point the\n *  // model hasn't seen:\n *  await model.fit(xs, ys);\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class Sequential extends LayersModel {\n    constructor(args) {\n        super({ inputs: [], outputs: [] });\n        args = args || {};\n        this.trainable = true;\n        this.built = false;\n        // Set model name.\n        this.name = (args.name != null) ? args.name : getUid('sequential_');\n        // Add to the model any layers passed to the constructor.\n        if (args.layers != null) {\n            for (const layer of args.layers) {\n                this.add(layer);\n            }\n        }\n    }\n    // Helper function to Sequential.add  Throws if the new output shape will be\n    // invalid.\n    checkShape(layer) {\n        const shape = layer.inboundNodes[0].outputTensors[0].shape;\n        if (shape.some(x => x < 0)) {\n            throw new ValueError('Negative dimension size caused by adding layer ' +\n                `${layer.name} with input shape [` +\n                `${layer.inboundNodes[0].inputTensors[0].shape}]`);\n        }\n    }\n    /**\n     * Adds a layer instance on top of the layer stack.\n     *\n     * ```js\n     *  const model = tf.sequential();\n     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n     *  // Note that the untrained model is random at this point.\n     *  model.predict(tf.randomNormal([10, 1])).print();\n     * ```\n     * @param layer Layer instance.\n     *\n     * @exception ValueError In case the `layer` argument does not know its\n     * input shape.\n     * @exception ValueError In case the `layer` argument has multiple output\n     *   tensors, or is already connected somewhere else (forbidden in\n     *   `Sequential` models).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    add(layer) {\n        const isLayerModelInstance = layer instanceof Sequential || layer instanceof LayersModel;\n        let modelLayer;\n        if (isLayerModelInstance) {\n            modelLayer = layer;\n            if (modelLayer.outputs.length !== 1) {\n                throw new ValueError('All layers in a Sequential model ' +\n                    'should have a single output tensor. ' +\n                    'For multi-output layers, ' +\n                    'use the functional API.');\n            }\n            if (modelLayer.inputs.length !== 1) {\n                throw new ValueError('All layers in a Sequential model ' +\n                    'should have a single input tensor. ' +\n                    'For multi-input layers, ' +\n                    'use the functional API.');\n            }\n        }\n        if (this.outputs.length === 0) {\n            // first layer in model: check that it is an input layer\n            if (layer.inboundNodes.length === 0) {\n                // create an input layer\n                if (layer.batchInputShape == null) {\n                    throw new ValueError('The first layer in a Sequential model must ' +\n                        'get an `inputShape` or `batchInputShape` argument.');\n                }\n                // Instantiate the input layer.\n                const x = Input({\n                    batchShape: layer.batchInputShape,\n                    dtype: layer.dtype,\n                    name: layer.name + '_input'\n                });\n                // This will build the current layer and create the node connecting\n                // the current layer to the input layer we just created.\n                layer.apply(x);\n            }\n            if (isLayerModelInstance) {\n                this.outputs = modelLayer.outputs;\n                this.inputs = modelLayer.inputs;\n            }\n            else {\n                if (layer.inboundNodes.length !== 1) {\n                    throw new ValueError('A layer added to a Sequential model must not already be ' +\n                        `connected somewhere else. LayersModel received layer ${layer.name} ` +\n                        `which has ${layer.inboundNodes.length} pre-existing inbound ` +\n                        'connections.');\n                }\n                if (layer.inboundNodes[0].outputTensors.length !== 1) {\n                    throw new ValueError('All layers in a Sequential model ' +\n                        'should have a single output tensor. ' +\n                        'For multi-output layers, ' +\n                        'use the functional API.');\n                }\n                this.checkShape(layer);\n                this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n                this.inputs = getSourceInputs(this.outputs[0]);\n            }\n            this.inboundNodes = [];\n            // We create an input node, which we will keep updated\n            // as we add more layers.\n            // (This call has side effects.)\n            // tslint:disable-next-line:no-unused-expression\n            new Node({\n                outboundLayer: this,\n                inboundLayers: [],\n                nodeIndices: [],\n                tensorIndices: [],\n                inputTensors: this.inputs,\n                outputTensors: this.outputs,\n                // no model-level masking for now\n                inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n                outputMasks: [null],\n                inputShapes: this.inputs.map(x => x.shape),\n                outputShapes: this.outputs[0].shape\n            });\n        }\n        else {\n            const outputTensor = layer.apply(this.outputs[0]);\n            if (Array.isArray(outputTensor)) {\n                throw new TypeError('All layers in a Sequential model ' +\n                    'should have a single output tensor. ' +\n                    'For multi-output layers, ' +\n                    'use the functional API.');\n            }\n            this.checkShape(layer);\n            this.outputs = [outputTensor];\n            // update self.inbound_nodes\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n        this.layers.push(layer);\n        this.built = false;\n    }\n    /**\n     * Removes the last layer in the model.\n     *\n     * @exception TypeError if there are no layers in the model.\n     */\n    pop() {\n        if (this.layers.length === 0) {\n            throw new TypeError('There are no layers in the model.');\n        }\n        this.layers.pop();\n        if (this.layers.length === 0) {\n            this.outputs = [];\n            this.inboundNodes = [];\n            this.outboundNodes = [];\n        }\n        else {\n            const lastLayerIndex = this.layers.length - 1;\n            this.layers[lastLayerIndex].outboundNodes = [];\n            this.outputs = [this.layers[lastLayerIndex].output];\n            // update self.inbound_nodes\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n    }\n    call(inputs, kwargs) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.call(inputs, kwargs);\n    }\n    build(inputShape) {\n        // Call `getExactlyOneShape` without using its return value,\n        // to verify that exactly one input shape is provided.\n        getExactlyOneShape(inputShape);\n        if (this.inputs.length === 0 || this.outputs.length === 0) {\n            throw new TypeError('Sequential model cannot be built: model is empty.' +\n                ' Add some layers first.');\n        }\n        // actually create the model\n        this.model = new LayersModel({\n            inputs: this.inputs,\n            outputs: this.outputs[0],\n            name: this.name + '_model'\n        });\n        this.model.trainable = this.trainable;\n        // mirror model attributes\n        this.supportsMasking = this.model.supportsMasking;\n        // TODO(michaelterry): Add caches\n        this.inputLayers = this.model.inputLayers;\n        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n        this.outputLayers = this.model.outputLayers;\n        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n        this.nodesByDepth = this.model.nodesByDepth;\n        this.containerNodes = this.model.containerNodes;\n        this.outputNames = this.model.outputNames;\n        this.inputNames = this.model.inputNames;\n        // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n        // TODO(michaelterry): Add callbackModel if needed.\n        this.built = true;\n    }\n    countParams() {\n        if (!this.built) {\n            this.build();\n        }\n        return super.countParams();\n    }\n    /**\n     * Print a text summary of the Sequential model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - The total number of trainable and non-trainable parameters of the\n     * model.\n     *\n     * ```js\n     * const model = tf.sequential();\n     * model.add(\n     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\n     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n     *\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            this.build();\n        }\n        super.summary(lineLength, positions, printFn);\n    }\n    /**\n     * Sets the weights of the model.\n     *\n     * @param weights Should be a list of Tensors with shapes and types matching\n     *   the output of `model.getWeights()`.\n     */\n    setWeights(weights) {\n        if (this.model == null) {\n            this.build();\n        }\n        this.model.setWeights(weights);\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *   batchSize: 4,\n     * });\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateConfig`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before being used.');\n        }\n        return this.model.evaluate(x, y, args);\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before being used.');\n        }\n        return this.model.evaluateDataset(dataset, args);\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([2, 10])).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param conifg A `ModelPredictConfig` object containing optional fields.\n     *\n     * @return `tf.Tensor`(s) of predictions.\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predict(x, args);\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * @param x: Input samples, as a Tensor, or list of Tensors (if the model\n     *   has multiple inputs).\n     * @return Tensor(s) of predictions\n     */\n    predictOnBatch(x) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predictOnBatch(x);\n    }\n    /**\n     * See `LayersModel.compile`.\n     *\n     * @param args\n     */\n    compile(args) {\n        this.build();\n        this.model.compile(args);\n        this.optimizer_ = this.model.optimizer;\n        // tslint:disable-next-line:no-any\n        this.isOptimizerOwned = this.model.isOptimizerOwned;\n        this.loss = this.model.loss;\n        this.metrics = this.model.metrics;\n        // TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n        //   this.weightedMetrics, this.targets.\n        this.metricsTensors = this.model.metricsTensors;\n        this.metricsNames = this.model.metricsNames;\n        // TODO(cais): Add sampleWeights.\n    }\n    get optimizer() {\n        return this.model == null ? undefined : this.model.optimizer;\n    }\n    set optimizer(optimizer) {\n        this.model.optimizer = optimizer;\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *   batchSize: 4,\n     *   epochs: 3\n     * });\n     * console.log(history.history.loss[0]);\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you can\n     * also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named, you\n     *  can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args  A `ModelFitConfig`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before ' +\n                'being used.');\n        }\n        return this.model.fit(x, y, args);\n    }\n    /**\n     * Trains the model using a dataset object.\n     *\n     * ```js\n     * const xArray = [\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     * ];\n     * const yArray = [1, 1, 1, 1];\n     * // Create a dataset from the JavaScript array.\n     * const xDataset = tf.data.array(xArray);\n     * const yDataset = tf.data.array(yArray);\n     * // Zip combines the `x` and `y` Datasets into a single Dataset, the\n     * // iterator of which will return an object containing of two tensors,\n     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle\n     * // four such samples into a single object, with the same keys now pointing\n     * // to tensors that hold 4 examples, organized along the batch dimension.\n     * // The call to `shuffle(4)` causes each iteration through the dataset to\n     * // happen in a different order.  The size of the shuffle window is 4.\n     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})\n     *     .batch(4)\n     *     .shuffle(4);\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const history = await model.fitDataset(xyDataset, {\n     *   epochs: 4,\n     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}\n     * });\n     * ```\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected to\n     *   generate a dataset iterator object, the `next()` method of which is\n     *   expected to produce data batches for evaluation. The return value of the\n     *   `next()` call ought to contain a boolean `done` field and a `value`\n     *   field.\n     *\n     *   The `value` field is expected to be an object of with fields\n     *   `xs` and `ys`, which point to the feature tensor and the target tensor,\n     *   respectively. This case is for models with exactly one input and one\n     *   output (e.g.. a sequential model). For example:\n     *   ```js\n     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}\n     *   ```\n     *\n     *   If the model has multiple inputs, the `xs` field of `value` should\n     *   be an object mapping input names to their respective feature tensors.\n     *   For example:\n     *   ```js\n     *   {\n     *     value: {\n     *       xs: {\n     *         input_1: xsTensor1,\n     *         input_2: xsTensor2\n     *       },\n     *       ys: ysTensor\n     *     },\n     *     done: false\n     *   }\n     *   ```\n     *   If the model has multiple outputs, the `ys` field of `value` should\n     *   be an object mapping output names to their respective target tensors.\n     *   For example:\n     *   ```js\n     *   {\n     *     value: {\n     *       xs: xsTensor,\n     *       ys: {\n     *         output_1: ysTensor1,\n     *         output_2: ysTensor2\n     *       },\n     *     },\n     *     done: false\n     *   }\n     *   ```\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async fitDataset(dataset, args) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before ' +\n                'being used.');\n        }\n        return this.model.fitDataset(dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and matric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        return this.model.trainOnBatch(x, y);\n    }\n    /* See parent class for JsDoc */\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n        let configArray;\n        let extraModelConfig = {};\n        if (config instanceof Array) {\n            if (!(config[0].className != null) ||\n                config[0]['className'] === 'Merge') {\n                throw new ValueError('Legacy serialization format not supported yet.');\n            }\n            configArray = config;\n        }\n        else {\n            util.assert(config['layers'] != null, () => `When the config data for a Sequential model is not an Array, ` +\n                `it must be an Object that contains the 'layers' field.`);\n            configArray = config['layers'];\n            delete config['layers'];\n            extraModelConfig = config;\n        }\n        const model = new cls(extraModelConfig);\n        if (!(model instanceof Sequential)) {\n            throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${model}`);\n        }\n        for (const conf of configArray) {\n            const customObjects = undefined;\n            const layer = deserialize(conf, customObjects, fastWeightInit);\n            if (fastWeightInit) {\n                layer.setFastWeightInitDuringBuild(true);\n            }\n            model.add(layer);\n        }\n        return model;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const model = tf.sequential();\n     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10 values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        // TODO(cais): When refactoring to remove the composition pattern happens,\n        // remove this method overriding.\n        if (this.model == null) {\n            throw new ValueError('Cannot set the stopTraining property of a sequential model before ' +\n                'it is compiled.');\n        }\n        this.model.stopTraining = stop;\n    }\n    get stopTraining() {\n        if (this.model == null) {\n            throw new ValueError('Cannot get the stopTraining property of a sequential model before ' +\n                'it is compiled.');\n        }\n        return this.model.stopTraining;\n    }\n    // TODO(cais): Override get trainableWeights() here\n    // tslint:disable-next-line:no-any\n    getConfig() {\n        // NOTE(cais): We override the return type of getConfig() to `any` here,\n        //   because the `Sequential` class is a special case among `Container`\n        //   subtypes in that its getConfig() method returns an Array (not a\n        //   dict).\n        const layers = [];\n        for (const layer of this.layers) {\n            const dict = {};\n            dict['className'] = layer.getClassName();\n            dict['config'] = layer.getConfig();\n            layers.push(dict);\n        }\n        return { name: this.name, layers };\n    }\n}\n/** @nocollapse */\nSequential.className = 'Sequential';\nserialization.registerClass(Sequential);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL21vZGVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVILHFDQUFxQztBQUVyQyxPQUFPLEVBQUMsT0FBTyxFQUFFLEVBQUUsRUFBcUMsYUFBYSxFQUFVLElBQUksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRWxILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUd2QyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDM0MsT0FBTyxFQUFDLGVBQWUsRUFBUyxJQUFJLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFDLFdBQVcsRUFBc0MsTUFBTSxtQkFBbUIsQ0FBQztBQUduRixPQUFPLEVBQUMsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUl2RSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFbkQsT0FBTyxLQUFLLGFBQWEsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUMvQixxQkFBdUQsRUFDdkQsYUFBd0M7SUFDMUMsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLHFCQUFxQixDQUFDLEVBQUU7UUFDL0MscUJBQXFCLEdBQUcsRUFBQyxhQUFhLEVBQUUscUJBQXFCLEVBQUMsQ0FBQztLQUNoRTtJQUNELHFCQUFxQixHQUFHLHFCQUE4QyxDQUFDO0lBRXZFLElBQUksYUFBYSxHQUFHLHFCQUFx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QUM7U0FDbkI7UUFDRCxPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFDbkMsQ0FBQzs7QUF6c0JELGtCQUFrQjtBQUNYLG9CQUFTLEdBQUcsWUFBWSxDQUFDO0FBMHNCbEMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qIE9yaWdpbmFsIHNvdXJjZSBrZXJhcy9tb2RlbHMucHkgKi9cblxuaW1wb3J0IHtkaXNwb3NlLCBpbywgTmFtZWRUZW5zb3JNYXAsIE9wdGltaXplciwgU2NhbGFyLCBzZXJpYWxpemF0aW9uLCBUZW5zb3IsIHV0aWx9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7Z2V0VWlkfSBmcm9tICcuL2JhY2tlbmQvc3RhdGUnO1xuaW1wb3J0IHtIaXN0b3J5fSBmcm9tICcuL2Jhc2VfY2FsbGJhY2tzJztcbmltcG9ydCB7RGF0YXNldH0gZnJvbSAnLi9lbmdpbmUvZGF0YXNldF9zdHViJztcbmltcG9ydCB7SW5wdXR9IGZyb20gJy4vZW5naW5lL2lucHV0X2xheWVyJztcbmltcG9ydCB7Z2V0U291cmNlSW5wdXRzLCBMYXllciwgTm9kZSwgU3ltYm9saWNUZW5zb3J9IGZyb20gJy4vZW5naW5lL3RvcG9sb2d5JztcbmltcG9ydCB7TGF5ZXJzTW9kZWwsIE1vZGVsQ29tcGlsZUFyZ3MsIE1vZGVsRXZhbHVhdGVBcmdzfSBmcm9tICcuL2VuZ2luZS90cmFpbmluZyc7XG5pbXBvcnQge01vZGVsRXZhbHVhdGVEYXRhc2V0QXJncywgTW9kZWxGaXREYXRhc2V0QXJnc30gZnJvbSAnLi9lbmdpbmUvdHJhaW5pbmdfZGF0YXNldCc7XG5pbXBvcnQge01vZGVsRml0QXJnc30gZnJvbSAnLi9lbmdpbmUvdHJhaW5pbmdfdGVuc29ycyc7XG5pbXBvcnQge05vdEltcGxlbWVudGVkRXJyb3IsIFJ1bnRpbWVFcnJvciwgVmFsdWVFcnJvcn0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHtTaGFwZX0gZnJvbSAnLi9rZXJhc19mb3JtYXQvY29tbW9uJztcbmltcG9ydCB7VHJhaW5pbmdDb25maWd9IGZyb20gJy4va2VyYXNfZm9ybWF0L3RyYWluaW5nX2NvbmZpZyc7XG5pbXBvcnQge1B5SnNvbkRpY3R9IGZyb20gJy4va2VyYXNfZm9ybWF0L3R5cGVzJztcbmltcG9ydCB7ZGVzZXJpYWxpemV9IGZyb20gJy4vbGF5ZXJzL3NlcmlhbGl6YXRpb24nO1xuaW1wb3J0IHtLd2FyZ3MsIE5hbWVkVGVuc29yfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCAqIGFzIGdlbmVyaWNfdXRpbHMgZnJvbSAnLi91dGlscy9nZW5lcmljX3V0aWxzJztcbmltcG9ydCB7Y29udmVydFB5dGhvbmljVG9Uc30gZnJvbSAnLi91dGlscy9zZXJpYWxpemF0aW9uX3V0aWxzJztcbmltcG9ydCB7Z2V0RXhhY3RseU9uZVNoYXBlfSBmcm9tICcuL3V0aWxzL3R5cGVzX3V0aWxzJztcblxuLyoqXG4gKiBQYXJzZXMgYSBKU09OIG1vZGVsIGNvbmZpZ3VyYXRpb24gZmlsZSBhbmQgcmV0dXJucyBhIG1vZGVsIGluc3RhbmNlLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHNlcmlhbGl6ZSBhIG1vZGVsIHVzaW5nIGB0b0pTT04oKWAgYW5kXG4gKiAvLyBkZXNlcmlhbGl6ZSBpdCBhcyBhbm90aGVyIG1vZGVsIHVzaW5nIGB0Zi5tb2RlbHMubW9kZWxGcm9tSlNPTigpYC5cbiAqIC8vIE5vdGU6IHRoaXMgZXhhbXBsZSBzZXJpYWxpemVzIGFuZCBkZXNlcmlhbGl6ZXMgb25seSB0aGUgdG9wb2xvZ3lcbiAqIC8vIG9mIHRoZSBtb2RlbDsgdGhlIHdlaWdodHMgb2YgdGhlIGxvYWRlZCBtb2RlbCB3aWxsIGJlIGRpZmZlcmVudFxuICogLy8gZnJvbSB0aG9zZSBvZiB0aGUgdGhlIG9yaWdpbmFsIG1vZGVsLCBkdWUgdG8gcmFuZG9tIHdlaWdodFxuICogLy8gaW5pdGlhbGl6YXRpb24uXG4gKiAvLyBUbyBsb2FkIHRoZSB0b3BvbG9neSBhbmQgd2VpZ2h0cyBvZiBhIG1vZGVsLCB1c2UgYHRmLmxvYWRMYXllcnNNb2RlbCgpYC5cbiAqIGNvbnN0IG1vZGVsMSA9IHRmLnNlcXVlbnRpYWwoKTtcbiAqIG1vZGVsMS5hZGQodGYubGF5ZXJzLnJlcGVhdFZlY3Rvcih7aW5wdXRTaGFwZTogWzJdLCBuOiA0fSkpO1xuICogLy8gU2VyaWFsaXplIGBtb2RlbDFgIGFzIGEgSlNPTiBvYmplY3QuXG4gKiBjb25zdCBtb2RlbDFKU09OID0gbW9kZWwxLnRvSlNPTihudWxsLCBmYWxzZSk7XG4gKiBtb2RlbDEuc3VtbWFyeSgpO1xuICpcbiAqIGNvbnN0IG1vZGVsMiA9IGF3YWl0IHRmLm1vZGVscy5tb2RlbEZyb21KU09OKG1vZGVsMUpTT04pO1xuICogbW9kZWwyLnN1bW1hcnkoKTtcbiAqIGBgYFxuICpcbiAqICBAcGFyYW0gbW9kZWxBbmRXZWlnaHRzQ29uZmlnIEpTT04gb2JqZWN0IG9yIHN0cmluZyBlbmNvZGluZyBhIG1vZGVsIGFuZFxuICogICAgICAgd2VpZ2h0cyBjb25maWd1cmF0aW9uLiBJdCBjYW4gYWxzbyBiZSBvbmx5IHRoZSB0b3BvbG9neSBKU09OIG9mIHRoZVxuICogICAgICAgbW9kZWwsIGluIHdoaWNoIGNhc2UgdGhlIHdlaWdodHMgd2lsbCBub3QgYmUgbG9hZGVkLlxuICogIEBwYXJhbSBjdXN0b21fb2JqZWN0cyBPcHRpb25hbCBkaWN0aW9uYXJ5IG1hcHBpbmcgbmFtZXNcbiAqICAgICAgIChzdHJpbmdzKSB0byBjdXN0b20gY2xhc3NlcyBvciBmdW5jdGlvbnMgdG8gYmVcbiAqICAgICAgIGNvbnNpZGVyZWQgZHVyaW5nIGRlc2VyaWFsaXphdGlvbi5cbiAqIEByZXR1cm5zIEEgVGVuc29yRmxvdy5qcyBMYXllcnMgYHRmLkxheWVyc01vZGVsYCBpbnN0YW5jZSAodW5jb21waWxlZCkuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtb2RlbEZyb21KU09OKFxuICAgIG1vZGVsQW5kV2VpZ2h0c0NvbmZpZzogTW9kZWxBbmRXZWlnaHRzQ29uZmlnfFB5SnNvbkRpY3QsXG4gICAgY3VzdG9tT2JqZWN0cz86IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCk6IFByb21pc2U8TGF5ZXJzTW9kZWw+IHtcbiAgaWYgKCEoJ21vZGVsVG9wb2xvZ3knIGluIG1vZGVsQW5kV2VpZ2h0c0NvbmZpZykpIHtcbiAgICBtb2RlbEFuZFdlaWdodHNDb25maWcgPSB7bW9kZWxUb3BvbG9neTogbW9kZWxBbmRXZWlnaHRzQ29uZmlnfTtcbiAgfVxuICBtb2RlbEFuZFdlaWdodHNDb25maWcgPSBtb2RlbEFuZFdlaWdodHNDb25maWcgYXMgTW9kZWxBbmRXZWlnaHRzQ29uZmlnO1xuXG4gIGxldCBtb2RlbFRvcG9sb2d5ID0gbW9kZWxBbmRXZWlnaHRzQ29uZmlnLm1vZGVsVG9wb2xvZ3k7XG4gIGlmIChtb2RlbFRvcG9sb2d5Wydtb2RlbF9jb25maWcnXSAhPSBudWxsKSB7XG4gICAgLy8gSWYgdGhlIG1vZGVsLXRvcG9sb2d5IEpTT04gY29udGFpbnMgYSAnbW9kZWxfY29uZmlnJyBmaWVsZCwgdGhlbiBpdCBpc1xuICAgIC8vIGEgZnVsbCBtb2RlbCBKU09OIChlLmcuLCBmcm9tIGBrZXJhcy5Nb2RlbC5zYXZlKClgKSwgd2hpY2ggY29udGFpbnNcbiAgICAvLyBub3Qgb25seSB0aGUgbW9kZWwncyBhcmNoaXRlY3R1cmUgaW4gaXRzICdtb2RlbF9jb25maWcnIGZpZWxkLCBidXRcbiAgICAvLyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIG1vZGVsJ3Mgb3B0aW1pemVyLiBXZSB1c2Ugb25seSB0aGVcbiAgICAvLyAnbW9kZWxfY29uZmlnJyBmaWVsZCBjdXJyZW50bHkuXG4gICAgbW9kZWxUb3BvbG9neSA9IG1vZGVsVG9wb2xvZ3lbJ21vZGVsX2NvbmZpZyddIGFzIFB5SnNvbkRpY3Q7XG4gIH1cbiAgY29uc3QgdHNDb25maWcgPVxuICAgICAgY29udmVydFB5dGhvbmljVG9Ucyhtb2RlbFRvcG9sb2d5KSBhcyBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3Q7XG4gIGNvbnN0IG1vZGVsID0gZGVzZXJpYWxpemUodHNDb25maWcsIGN1c3RvbU9iamVjdHMpIGFzIExheWVyc01vZGVsO1xuXG4gIGlmIChtb2RlbEFuZFdlaWdodHNDb25maWcud2VpZ2h0c01hbmlmZXN0ICE9IG51bGwpIHtcbiAgICAvLyBMb2FkIHRoZSB3ZWlnaHQgdmFsdWVzIGtleWVkIGJ5IHRoZSBvcmlnaW5hbCB0ZW5zb3IgbmFtZXMgaW4gdGhlIG1vZGVsXG4gICAgLy8gZmlsZSB0aGF0IHdhcyBsb2FkZWQuICBUaGVzZSBzaG91bGQgbWF0Y2ggdGhlIGtleXMgb2YgdGhlIHdlaWdodFxuICAgIC8vIG1hbmlmZXN0LlxuICAgIGNvbnN0IHdlaWdodFZhbHVlcyA9IGF3YWl0IGlvLmxvYWRXZWlnaHRzKFxuICAgICAgICBtb2RlbEFuZFdlaWdodHNDb25maWcud2VpZ2h0c01hbmlmZXN0LCBtb2RlbEFuZFdlaWdodHNDb25maWcucGF0aFByZWZpeCxcbiAgICAgICAgbW9kZWwud2VpZ2h0cy5tYXAod2VpZ2h0ID0+IHdlaWdodC5vcmlnaW5hbE5hbWUpKTtcblxuICAgIC8vIE1hcCB0aGUgd2VpZ2h0cyB0byB0aGUgdW5pcXVlIHRlbnNvciBuYW1lcyBnZW5lcmF0ZWQgZHVyaW5nIG1vZGVsIGxvYWRpbmdcbiAgICBjb25zdCB1bmlxdWVXZWlnaHRWYWx1ZXM6IE5hbWVkVGVuc29yTWFwID0ge307XG4gICAgZm9yIChjb25zdCB3ZWlnaHQgb2YgbW9kZWwud2VpZ2h0cykge1xuICAgICAgdW5pcXVlV2VpZ2h0VmFsdWVzW3dlaWdodC5vcmlnaW5hbE5hbWVdID1cbiAgICAgICAgICB3ZWlnaHRWYWx1ZXNbd2VpZ2h0Lm9yaWdpbmFsTmFtZV07XG4gICAgfVxuXG4gICAgbW9kZWwubG9hZFdlaWdodHModW5pcXVlV2VpZ2h0VmFsdWVzKTtcbiAgICAvLyBEaXNwb3NlIHRlbXBvcmFyeSB3ZWlnaHQgdmFsdWVzLlxuICAgIGRpc3Bvc2Uod2VpZ2h0VmFsdWVzKTtcbiAgfVxuICByZXR1cm4gbW9kZWw7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgbG9hZGluZyBhIHNhdmVkIG1vZGUgaW4gVGVuc29yRmxvdy5qcyBmb3JtYXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxBbmRXZWlnaHRzQ29uZmlnIHtcbiAgLyoqXG4gICAqIEEgSlNPTiBvYmplY3Qgb3IgSlNPTiBzdHJpbmcgY29udGFpbmluZyB0aGUgbW9kZWwgY29uZmlnLlxuICAgKlxuICAgKiBUaGlzIGNhbiBiZSBlaXRoZXIgb2YgdGhlIGZvbGxvd2luZyB0d28gZm9ybWF0czpcbiAgICogICAtIEEgbW9kZWwgYXJjaGllY3R1cmUtb25seSBjb25maWcsICBpLmUuLCBhIGZvcm1hdCBjb25zaXN0ZW50IHdpdGggdGhlXG4gICAqICAgICByZXR1cm4gdmFsdWUgb2Zga2VyYXMuTW9kZWwudG9fanNvbigpYC5cbiAgICogICAtIEEgZnVsbCBtb2RlbCBjb25maWcsIGNvbnRhaW5pbmcgbm90IG9ubHkgbW9kZWwgYXJjaGl0ZWN0dXJlLCBidXQgYWxzb1xuICAgKiAgICAgdHJhaW5pbmcgb3B0aW9ucyBhbmQgc3RhdGUsIGkuZS4sIGEgZm9ybWF0IGNvbnNpc3RlbnQgd2l0aCB0aGUgcmV0dXJuXG4gICAqICAgICB2YWx1ZSBvZiBga2VyYXMubW9kZWxzLnNhdmVfbW9kZWwoKWAuXG4gICAqL1xuICBtb2RlbFRvcG9sb2d5OiBQeUpzb25EaWN0O1xuXG4gIC8qKlxuICAgKiBBIHdlaWdodHMgbWFuaWZlc3QgaW4gVGVuc29yRmxvdy5qcyBmb3JtYXQuXG4gICAqL1xuICB3ZWlnaHRzTWFuaWZlc3Q/OiBpby5XZWlnaHRzTWFuaWZlc3RDb25maWc7XG5cbiAgLyoqXG4gICAqIFBhdGggdG8gcHJlcGVuZCB0byB0aGUgcGF0aHMgaW4gYHdlaWdodE1hbmlmZXN0YCBiZWZvcmUgZmV0Y2hpbmcuXG4gICAqXG4gICAqIFRoZSBwYXRoIG1heSBvcHRpb25hbGx5IGVuZCBpbiBhIHNsYXNoICgnLycpLlxuICAgKi9cbiAgcGF0aFByZWZpeD86IHN0cmluZztcbn1cblxuLy8gVE9ETyhuaWVsc2VuZSk6IFJlbW92ZSBhZnRlcjogaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy9pc3N1ZXMvNDAwXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsUHJlZGljdEFyZ3Mge1xuICAvKipcbiAgICogT3B0aW9uYWwuIEJhdGNoIHNpemUgKEludGVnZXIpLiBJZiB1bnNwZWNpZmllZCwgaXQgd2lsbCBkZWZhdWx0IHRvIDMyLlxuICAgKi9cbiAgYmF0Y2hTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbC4gVmVyYm9zaXR5IG1vZGUuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgdmVyYm9zZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogTG9hZCBhIG1vZGVsLCBpbmNsdWRpbmcgaXRzIHRvcG9sb2d5IGFuZCBvcHRpb25hbGx5IHdlaWdodHMuICBTZWUgdGhlXG4gKiBUdXRvcmlhbCBuYW1lZCBcIkhvdyB0byBpbXBvcnQgYSBLZXJhcyBNb2RlbFwiIGZvciB1c2FnZSBleGFtcGxlcy5cbiAqXG4gKiBFeGFtcGxlIDE6IFNhdmUgYG1vZGVsYCdzIHRvcG9sb2d5IGFuZCB3ZWlnaHRzIHRvIGJyb3dzZXIgW2xvY2FsXG4gKiBzdG9yYWdlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2xvY2FsU3RvcmFnZSk7XG4gKiB0aGVuIGxvYWQgaXQgYmFjay5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKFxuICogICAgIHtsYXllcnM6IFt0Zi5sYXllcnMuZGVuc2Uoe3VuaXRzOiAxLCBpbnB1dFNoYXBlOiBbM119KV19KTtcbiAqIGNvbnNvbGUubG9nKCdQcmVkaWN0aW9uIGZyb20gb3JpZ2luYWwgbW9kZWw6Jyk7XG4gKiBtb2RlbC5wcmVkaWN0KHRmLm9uZXMoWzEsIDNdKSkucHJpbnQoKTtcbiAqXG4gKiBjb25zdCBzYXZlUmVzdWx0cyA9IGF3YWl0IG1vZGVsLnNhdmUoJ2xvY2Fsc3RvcmFnZTovL215LW1vZGVsLTEnKTtcbiAqXG4gKiBjb25zdCBsb2FkZWRNb2RlbCA9IGF3YWl0IHRmLmxvYWRMYXllcnNNb2RlbCgnbG9jYWxzdG9yYWdlOi8vbXktbW9kZWwtMScpO1xuICogY29uc29sZS5sb2coJ1ByZWRpY3Rpb24gZnJvbSBsb2FkZWQgbW9kZWw6Jyk7XG4gKiBsb2FkZWRNb2RlbC5wcmVkaWN0KHRmLm9uZXMoWzEsIDNdKSkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGUgMi4gU2F2aW5nIGBtb2RlbGAncyB0b3BvbG9neSBhbmQgd2VpZ2h0cyB0byBicm93c2VyXG4gKiBbSW5kZXhlZERCXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW5kZXhlZERCX0FQSSk7XG4gKiB0aGVuIGxvYWQgaXQgYmFjay5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKFxuICogICAgIHtsYXllcnM6IFt0Zi5sYXllcnMuZGVuc2Uoe3VuaXRzOiAxLCBpbnB1dFNoYXBlOiBbM119KV19KTtcbiAqIGNvbnNvbGUubG9nKCdQcmVkaWN0aW9uIGZyb20gb3JpZ2luYWwgbW9kZWw6Jyk7XG4gKiBtb2RlbC5wcmVkaWN0KHRmLm9uZXMoWzEsIDNdKSkucHJpbnQoKTtcbiAqXG4gKiBjb25zdCBzYXZlUmVzdWx0cyA9IGF3YWl0IG1vZGVsLnNhdmUoJ2luZGV4ZWRkYjovL215LW1vZGVsLTEnKTtcbiAqXG4gKiBjb25zdCBsb2FkZWRNb2RlbCA9IGF3YWl0IHRmLmxvYWRMYXllcnNNb2RlbCgnaW5kZXhlZGRiOi8vbXktbW9kZWwtMScpO1xuICogY29uc29sZS5sb2coJ1ByZWRpY3Rpb24gZnJvbSBsb2FkZWQgbW9kZWw6Jyk7XG4gKiBsb2FkZWRNb2RlbC5wcmVkaWN0KHRmLm9uZXMoWzEsIDNdKSkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGUgMy4gTG9hZCBhIG1vZGVsIGZyb20gdXNlci1zZWxlY3RlZCBmaWxlcyBmcm9tIEhUTUxcbiAqIFtmaWxlIGlucHV0XG4gKiBlbGVtZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0L2ZpbGUpLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBOb3RlOiB0aGlzIGNvZGUgc25pcHBldCB3aWxsIG5vdCB3b3JrIHdpdGhvdXQgdGhlIEhUTUwgZWxlbWVudHMgaW4gdGhlXG4gKiAvLyAgIHBhZ2VcbiAqIGNvbnN0IGpzb25VcGxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanNvbi11cGxvYWQnKTtcbiAqIGNvbnN0IHdlaWdodHNVcGxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2VpZ2h0cy11cGxvYWQnKTtcbiAqXG4gKiBjb25zdCBtb2RlbCA9IGF3YWl0IHRmLmxvYWRMYXllcnNNb2RlbChcbiAqICAgICB0Zi5pby5icm93c2VyRmlsZXMoW2pzb25VcGxvYWQuZmlsZXNbMF0sIHdlaWdodHNVcGxvYWQuZmlsZXNbMF1dKSk7XG4gKiBgYGBcbiAqXG4gKiBFeGFtcGxlIDQuIExvYWQgYSBtb2RlbCBmcm9tIGFuIEhUVFAgc2VydmVyLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtb2RlbCA9IGF3YWl0XG4gKiAgICAgdGYubG9hZExheWVyc01vZGVsKCdodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vdGZqcy1tb2RlbHMvdGZqcy9pcmlzX3YxL21vZGVsLmpzb24nKTtcbiAqIG1vZGVsLnN1bW1hcnkoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwYXRoT3JJT0hhbmRsZXIgQ2FuIGJlIGVpdGhlciBvZiB0aGUgdHdvIGZvcm1hdHNcbiAqICAgMS4gQSBzdHJpbmcgcGF0aCB0byB0aGUgYE1vZGVsQW5kV2VpZ2h0c0NvbmZpZ2AgSlNPTiBkZXNjcmliaW5nXG4gKiAgICAgIHRoZSBtb2RlbCBpbiB0aGUgY2Fub25pY2FsIFRlbnNvckZsb3cuanMgZm9ybWF0LiBUaGlzIHBhdGggd2lsbCBiZVxuICogICAgICBpbnRlcnByZXRlZCBhcyBhIHJlbGF0aXZlIEhUVFAgcGF0aCwgdG8gd2hpY2ggYGZldGNoYCB3aWxsIGJlIHVzZWQgdG9cbiAqICAgICAgcmVxdWVzdCB0aGUgbW9kZWwgdG9wb2xvZ3kgYW5kIHdlaWdodCBtYW5pZmVzdCBKU09OLlxuICogICAgICBUaGUgY29udGVudCBvZiB0aGUgSlNPTiBmaWxlIGlzIGFzc3VtZWQgdG8gYmUgYSBKU09OIG9iamVjdCB3aXRoIHRoZVxuICogICAgICBmb2xsb3dpbmcgZmllbGRzIGFuZCB2YWx1ZXM6XG4gKiAgICAgIC0gJ21vZGVsVG9wb2xvZ3knOiBBIEpTT04gb2JqZWN0IHRoYXQgY2FuIGJlIGVpdGhlciBvZjpcbiAqICAgICAgICAxLiBhIG1vZGVsIGFyY2hpdGVjdHVyZSBKU09OIGNvbnNpc3RlbnQgd2l0aCB0aGUgZm9ybWF0IG9mIHRoZSByZXR1cm5cbiAqICAgICAgICAgICAgdmFsdWUgb2YgYGtlcmFzLk1vZGVsLnRvX2pzb24oKWBcbiAqICAgICAgICAyLiBhIGZ1bGwgbW9kZWwgSlNPTiBpbiB0aGUgZm9ybWF0IG9mIGBrZXJhcy5tb2RlbHMuc2F2ZV9tb2RlbCgpYC5cbiAqICAgICAgLSAnd2VpZ2h0c01hbmlmZXN0JzogQSBUZW5zb3JGbG93LmpzIHdlaWdodHMgbWFuaWZlc3QuXG4gKiAgICAgIFNlZSB0aGUgUHl0aG9uIGNvbnZlcnRlciBmdW5jdGlvbiBgc2F2ZV9tb2RlbCgpYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogICAgICBJdCBpcyBhbHNvIGFzc3VtZWQgdGhhdCBtb2RlbCB3ZWlnaHRzIGNhbiBiZSBhY2Nlc3NlZCBmcm9tIHJlbGF0aXZlXG4gKiAgICAgIHBhdGhzIGRlc2NyaWJlZCBieSB0aGUgYHBhdGhzYCBmaWVsZHMgaW4gd2VpZ2h0cyBtYW5pZmVzdC5cbiAqICAgMi4gQW4gYHRmLmlvLklPSGFuZGxlcmAgb2JqZWN0IHRoYXQgbG9hZHMgbW9kZWwgYXJ0aWZhY3RzIHdpdGggaXRzIGBsb2FkYFxuICogICAgICBtZXRob2QuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIGFyZ3VtZW50cyBmb3IgdGhlIG1vZGVsIGxvYWRpbmcsXG4gKiAgIGluY2x1ZGluZzpcbiAqICAgLSBgc3RyaWN0YDogUmVxdWlyZSB0aGF0IHRoZSBwcm92aWRlZCB3ZWlnaHRzIGV4YWN0bHkgbWF0Y2ggdGhvc2UgcmVxdWlyZWRcbiAqICAgICBieSB0aGUgbGF5ZXJzLiAgRGVmYXVsdCB0cnVlLiAgUGFzc2luZyBmYWxzZSBtZWFucyB0aGF0IGJvdGggZXh0cmFcbiAqICAgICB3ZWlnaHRzIGFuZCBtaXNzaW5nIHdlaWdodHMgd2lsbCBiZSBzaWxlbnRseSBpZ25vcmVkLlxuICogICAtIGBvblByb2dyZXNzYDogQSBwcm9ncmVzcyBjYWxsYmFjayBvZiB0aGUgZm9ybTpcbiAqICAgICBgKGZyYWN0aW9uOiBudW1iZXIpID0+IHZvaWRgLiBUaGlzIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIG1vbml0b3IgdGhlXG4gKiAgICAgbW9kZWwtbG9hZGluZyBwcm9jZXNzLlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgb2YgYHRmLkxheWVyc01vZGVsYCwgd2l0aCB0aGUgdG9wb2xvZ3kgYW5kIHdlaWdodHNcbiAqICAgICBsb2FkZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkTGF5ZXJzTW9kZWxJbnRlcm5hbChcbiAgICBwYXRoT3JJT0hhbmRsZXI6IHN0cmluZ3xpby5JT0hhbmRsZXIsXG4gICAgb3B0aW9ucz86IGlvLkxvYWRPcHRpb25zKTogUHJvbWlzZTxMYXllcnNNb2RlbD4ge1xuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICh0eXBlb2YgcGF0aE9ySU9IYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gaW8uZ2V0TG9hZEhhbmRsZXJzKHBhdGhPcklPSGFuZGxlciwgb3B0aW9ucyk7XG4gICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IGlmIG5vIGxvYWQgaGFuZGxlciBjYW4gYmUgZm91bmQsXG4gICAgICAvLyBhc3N1bWUgaXQgaXMgYSByZWxhdGl2ZSBodHRwIHBhdGguXG4gICAgICAvLyBUT0RPKGNhaXMpOiBSZWZvcm1hdCB0aGUgYXJncyBpbnRvIGEgc2luZ2xlIGBMb2FkT3B0aW9uc2Agb25jZSB0aGUgY29yZVxuICAgICAgLy8gaXMgcmVmYWN0b3JlZC5cbiAgICAgIGhhbmRsZXJzLnB1c2goaW8uYnJvd3NlckhUVFBSZXF1ZXN0KHBhdGhPcklPSGFuZGxlciwgb3B0aW9ucykpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlcnMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgYEZvdW5kIG1vcmUgdGhhbiBvbmUgKCR7aGFuZGxlcnMubGVuZ3RofSkgbG9hZCBoYW5kbGVycyBmb3IgYCArXG4gICAgICAgICAgYFVSTCAnJHtwYXRoT3JJT0hhbmRsZXJ9J2ApO1xuICAgIH1cbiAgICBwYXRoT3JJT0hhbmRsZXIgPSBoYW5kbGVyc1swXTtcbiAgfVxuICByZXR1cm4gbG9hZExheWVyc01vZGVsRnJvbUlPSGFuZGxlcihwYXRoT3JJT0hhbmRsZXIsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogTG9hZCBhIG1vZGVsIGFuZCBvcHRpb25hbGx5IGl0cyB3ZWlnaHRzLCB1c2luZyBhbiBJT0hhbmRsZXIgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBoYW5kbGVyIFRoZSBpbnN0YW5jZSBvZiBgSU9IYW5kbGVyYCB0byBiZSB1c2VkIGR1cmluZyB0aGUgbW9kZWxcbiAqICAgbG9hZGluZy5cbiAqIEBwYXJhbSBjdXN0b21PYmplY3RzIEFueSBvcHRpb25hbCBjdXN0b20gb2JqZWN0cyB0byBiZSB1c2VkIGR1cmluZyBtb2RlbFxuICogICBsb2FkaW5nLlxuICogQHBhcmFtIHN0cmljdCBXaGV0aGVyIHRoZSB3ZWlnaHQgbG9hZGluZyB3aWxsIGJlIGRvbmUgaW4gc3RyaWN0IG1vZGUuXG4gKiAgIERlZmF1bHQ6IGB0cnVlYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRMYXllcnNNb2RlbEZyb21JT0hhbmRsZXIoXG4gICAgaGFuZGxlcjogaW8uSU9IYW5kbGVyLCBjdXN0b21PYmplY3RzPzogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0LFxuICAgIG9wdGlvbnM/OiBpby5Mb2FkT3B0aW9ucyk6IFByb21pc2U8TGF5ZXJzTW9kZWw+IHtcbiAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoaGFuZGxlci5sb2FkID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwcm9jZWVkIHdpdGggbW9kZWwgbG9hZGluZyBiZWNhdXNlIHRoZSBJT0hhbmRsZXIgcHJvdmlkZWQgJyArXG4gICAgICAgICdkb2VzIG5vdCBoYXZlIHRoZSBgbG9hZGAgbWV0aG9kIGltcGxlbWVudGVkLicpO1xuICB9XG4gIGNvbnN0IGFydGlmYWN0cyA9IGF3YWl0IGhhbmRsZXIubG9hZCgpO1xuICBsZXQgbW9kZWxUb3BvbG9neSA9IGFydGlmYWN0cy5tb2RlbFRvcG9sb2d5IGFzIFB5SnNvbkRpY3Q7XG4gIGlmIChtb2RlbFRvcG9sb2d5Wydtb2RlbF9jb25maWcnXSAhPSBudWxsKSB7XG4gICAgbW9kZWxUb3BvbG9neSA9IG1vZGVsVG9wb2xvZ3lbJ21vZGVsX2NvbmZpZyddIGFzIFB5SnNvbkRpY3Q7XG4gIH1cblxuICBjb25zdCBzdHJpY3QgPSBvcHRpb25zLnN0cmljdCA9PSBudWxsID8gdHJ1ZSA6IG9wdGlvbnMuc3RyaWN0O1xuICAvLyBJZiB3ZWlnaHRzIGFyZSBwcm92aWRlZCBhbmQgdGhlIHdlaWdodC1sb2FkaW5nIG1vZGUgaXMgc3RyaWN0LCB1c2VcbiAgLy8gZmFzdCB3ZWlnaHQgaW5pdGlhbGl6YXRpb24uIFRoaXMgc2tpcHMgY29zdGx5IGluaXRpYWxpemVycyBzdWNoIGFzXG4gIC8vICdvcnRob2dvbmFsJyBhbmQgc2F2ZXMgdW5uZWNlc3NhcnkgY29tcHV0YXRpb24gaW4gY2FzZXMgd2hlcmVcbiAgLy8gdGhlIGluaXRpYWxpemVkIHdlaWdodCB2YWx1ZXMgd2lsbCBpbW1lZGlhdGVseSBiZSBvdmVyd3JpdHRlbiBieVxuICAvLyBsb2FkZWQgd2VpZ2h0IHZhbHVlcy5cbiAgY29uc3QgZmFzdFdlaWdodEluaXQgPVxuICAgICAgYXJ0aWZhY3RzLndlaWdodERhdGEgIT0gbnVsbCAmJiBhcnRpZmFjdHMud2VpZ2h0U3BlY3MgIT0gbnVsbCAmJiBzdHJpY3Q7XG4gIGNvbnN0IG1vZGVsID1cbiAgICAgIGRlc2VyaWFsaXplKFxuICAgICAgICAgIGNvbnZlcnRQeXRob25pY1RvVHMobW9kZWxUb3BvbG9neSkgYXMgc2VyaWFsaXphdGlvbi5Db25maWdEaWN0LFxuICAgICAgICAgIGN1c3RvbU9iamVjdHMsIGZhc3RXZWlnaHRJbml0KSBhcyBMYXllcnNNb2RlbDtcblxuICBjb25zdCB0cmFpbmluZ0NvbmZpZyA9IGFydGlmYWN0cy50cmFpbmluZ0NvbmZpZyBhcyBUcmFpbmluZ0NvbmZpZztcbiAgaWYgKHRyYWluaW5nQ29uZmlnICE9IG51bGwpIHtcbiAgICBtb2RlbC5sb2FkVHJhaW5pbmdDb25maWcodHJhaW5pbmdDb25maWcpO1xuICB9XG4gIGlmIChhcnRpZmFjdHMudXNlckRlZmluZWRNZXRhZGF0YSAhPSBudWxsKSB7XG4gICAgbW9kZWwuc2V0VXNlckRlZmluZWRNZXRhZGF0YShhcnRpZmFjdHMudXNlckRlZmluZWRNZXRhZGF0YSk7XG4gIH1cblxuICAvLyBJZiB3ZWlnaHREYXRhIGlzIHByZXNlbnQsIGxvYWQgdGhlIHdlaWdodHMgaW50byB0aGUgbW9kZWwuXG4gIGlmIChhcnRpZmFjdHMud2VpZ2h0RGF0YSAhPSBudWxsKSB7XG4gICAgLy8gTG9hZGluZyB3ZWlnaHRzIHJlcXVpcmVzIHdlaWdodFNwZWNzLlxuICAgIGlmIChhcnRpZmFjdHMud2VpZ2h0U3BlY3MgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgJ0xheWVyc01vZGVsIGFydGlmYWN0cyBjb250YWlucyB3ZWlnaHQgZGF0YSwgYnV0IG5vdCB3ZWlnaHQgc3BlY3MuICcgK1xuICAgICAgICAgICdUaGVyZWZvcmUgbG9hZGluZyBvZiB3ZWlnaHRzIGNhbm5vdCBwcm9jZWVkLicpO1xuICAgIH1cblxuICAgIGNvbnN0IHttb2RlbFdlaWdodHMsIG9wdGltaXplcldlaWdodHN9ID0gZGVjb2RlTW9kZWxBbmRPcHRpbWl6ZXJXZWlnaHRzKFxuICAgICAgICBhcnRpZmFjdHMud2VpZ2h0RGF0YSwgYXJ0aWZhY3RzLndlaWdodFNwZWNzKTtcbiAgICBtb2RlbC5sb2FkV2VpZ2h0cyhtb2RlbFdlaWdodHMsIHN0cmljdCk7XG5cbiAgICBpZiAobW9kZWwub3B0aW1pemVyICE9IG51bGwgJiYgb3B0aW1pemVyV2VpZ2h0cy5sZW5ndGggPiAwKSB7XG4gICAgICBhd2FpdCBtb2RlbC5vcHRpbWl6ZXIuc2V0V2VpZ2h0cyhvcHRpbWl6ZXJXZWlnaHRzKTtcbiAgICB9XG5cbiAgICAvLyBEaXNwb3NlIHRlbXBvcmFyeSB3ZWlnaHQgdmFsdWVzLlxuICAgIGRpc3Bvc2UobW9kZWxXZWlnaHRzKTtcbiAgICBkaXNwb3NlKG9wdGltaXplcldlaWdodHMubWFwKHcgPT4gdy50ZW5zb3IpKTtcbiAgfVxuICByZXR1cm4gbW9kZWw7XG59XG5cbmZ1bmN0aW9uIGRlY29kZU1vZGVsQW5kT3B0aW1pemVyV2VpZ2h0cyhcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLCBzcGVjczogaW8uV2VpZ2h0c01hbmlmZXN0RW50cnlbXSk6XG4gICAge21vZGVsV2VpZ2h0czogTmFtZWRUZW5zb3JNYXAsIG9wdGltaXplcldlaWdodHM6IE5hbWVkVGVuc29yW119IHtcbiAgY29uc3QgbmFtZTJUZW5zb3IgPSBpby5kZWNvZGVXZWlnaHRzKGJ1ZmZlciwgc3BlY3MpO1xuICBjb25zdCBtb2RlbFdlaWdodHM6IE5hbWVkVGVuc29yTWFwID0ge307XG4gIGNvbnN0IG9wdGltaXplcldlaWdodHM6IE5hbWVkVGVuc29yW10gPSBbXTtcbiAgc3BlY3MuZm9yRWFjaChzcGVjID0+IHtcbiAgICBpZiAoc3BlYy5ncm91cCA9PT0gJ29wdGltaXplcicpIHtcbiAgICAgIG9wdGltaXplcldlaWdodHMucHVzaCh7bmFtZTogc3BlYy5uYW1lLCB0ZW5zb3I6IG5hbWUyVGVuc29yW3NwZWMubmFtZV19KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW9kZWxXZWlnaHRzW3NwZWMubmFtZV0gPSBuYW1lMlRlbnNvcltzcGVjLm5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7bW9kZWxXZWlnaHRzLCBvcHRpbWl6ZXJXZWlnaHRzfTtcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciBhIFNlcXVlbnRpYWwgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VxdWVudGlhbEFyZ3Mge1xuICAvKiogU3RhY2sgb2YgbGF5ZXJzIGZvciB0aGUgbW9kZWwuICovXG4gIGxheWVycz86IExheWVyW107XG5cbiAgLyoqIFRoZSBuYW1lIG9mIHRoaXMgbW9kZWwuICovXG4gIG5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBtb2RlbCB3aXRoIGEgc3RhY2sgb2YgbGF5ZXJzLCBmZWVkaW5nIGxpbmVhcmx5IGZyb20gb25lIHRvIHRoZSBuZXh0LlxuICpcbiAqIGB0Zi5zZXF1ZW50aWFsYCBpcyBhIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIGluc3RhbmNlIG9mXG4gKiBgdGYuU2VxdWVudGlhbGAuXG4gKlxuICogYGBganNcbiAqICAvLyBEZWZpbmUgYSBtb2RlbCBmb3IgbGluZWFyIHJlZ3Jlc3Npb24uXG4gKiAgY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKCk7XG4gKiAgbW9kZWwuYWRkKHRmLmxheWVycy5kZW5zZSh7dW5pdHM6IDEsIGlucHV0U2hhcGU6IFsxXX0pKTtcbiAqXG4gKiAgLy8gUHJlcGFyZSB0aGUgbW9kZWwgZm9yIHRyYWluaW5nOiBTcGVjaWZ5IHRoZSBsb3NzIGFuZCB0aGUgb3B0aW1pemVyLlxuICogIG1vZGVsLmNvbXBpbGUoe2xvc3M6ICdtZWFuU3F1YXJlZEVycm9yJywgb3B0aW1pemVyOiAnc2dkJ30pO1xuICpcbiAqICAvLyBHZW5lcmF0ZSBzb21lIHN5bnRoZXRpYyBkYXRhIGZvciB0cmFpbmluZy5cbiAqICBjb25zdCB4cyA9IHRmLnRlbnNvcjJkKFsxLCAyLCAzLCA0XSwgWzQsIDFdKTtcbiAqICBjb25zdCB5cyA9IHRmLnRlbnNvcjJkKFsxLCAzLCA1LCA3XSwgWzQsIDFdKTtcbiAqXG4gKiAgLy8gVHJhaW4gdGhlIG1vZGVsIHVzaW5nIHRoZSBkYXRhIHRoZW4gZG8gaW5mZXJlbmNlIG9uIGEgZGF0YSBwb2ludCB0aGVcbiAqICAvLyBtb2RlbCBoYXNuJ3Qgc2VlbjpcbiAqICBhd2FpdCBtb2RlbC5maXQoeHMsIHlzKTtcbiAqICBtb2RlbC5wcmVkaWN0KHRmLnRlbnNvcjJkKFs1XSwgWzEsIDFdKSkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnQ2xhc3Nlcyd9XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXF1ZW50aWFsIGV4dGVuZHMgTGF5ZXJzTW9kZWwge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIGNsYXNzTmFtZSA9ICdTZXF1ZW50aWFsJztcbiAgcHJpdmF0ZSBtb2RlbDogTGF5ZXJzTW9kZWw7XG4gIGNvbnN0cnVjdG9yKGFyZ3M/OiBTZXF1ZW50aWFsQXJncykge1xuICAgIHN1cGVyKHtpbnB1dHM6IFtdLCBvdXRwdXRzOiBbXX0pO1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuXG4gICAgdGhpcy50cmFpbmFibGUgPSB0cnVlO1xuICAgIHRoaXMuYnVpbHQgPSBmYWxzZTtcblxuICAgIC8vIFNldCBtb2RlbCBuYW1lLlxuICAgIHRoaXMubmFtZSA9IChhcmdzLm5hbWUgIT0gbnVsbCkgPyBhcmdzLm5hbWUgOiBnZXRVaWQoJ3NlcXVlbnRpYWxfJyk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIG1vZGVsIGFueSBsYXllcnMgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICBpZiAoYXJncy5sYXllcnMgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCBsYXllciBvZiBhcmdzLmxheWVycykge1xuICAgICAgICB0aGlzLmFkZChsYXllcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIFNlcXVlbnRpYWwuYWRkICBUaHJvd3MgaWYgdGhlIG5ldyBvdXRwdXQgc2hhcGUgd2lsbCBiZVxuICAvLyBpbnZhbGlkLlxuICBwcml2YXRlIGNoZWNrU2hhcGUobGF5ZXI6IExheWVyKSB7XG4gICAgY29uc3Qgc2hhcGUgPSBsYXllci5pbmJvdW5kTm9kZXNbMF0ub3V0cHV0VGVuc29yc1swXS5zaGFwZTtcbiAgICBpZiAoc2hhcGUuc29tZSh4ID0+IHggPCAwKSkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgJ05lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBhZGRpbmcgbGF5ZXIgJyArXG4gICAgICAgICAgYCR7bGF5ZXIubmFtZX0gd2l0aCBpbnB1dCBzaGFwZSBbYCArXG4gICAgICAgICAgYCR7bGF5ZXIuaW5ib3VuZE5vZGVzWzBdLmlucHV0VGVuc29yc1swXS5zaGFwZX1dYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBsYXllciBpbnN0YW5jZSBvbiB0b3Agb2YgdGhlIGxheWVyIHN0YWNrLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKCk7XG4gICAqICBtb2RlbC5hZGQodGYubGF5ZXJzLmRlbnNlKHt1bml0czogOCwgaW5wdXRTaGFwZTogWzFdfSkpO1xuICAgKiAgbW9kZWwuYWRkKHRmLmxheWVycy5kZW5zZSh7dW5pdHM6IDQsIGFjdGl2YXRpb246ICdyZWx1Nid9KSk7XG4gICAqICBtb2RlbC5hZGQodGYubGF5ZXJzLmRlbnNlKHt1bml0czogMSwgYWN0aXZhdGlvbjogJ3JlbHU2J30pKTtcbiAgICogIC8vIE5vdGUgdGhhdCB0aGUgdW50cmFpbmVkIG1vZGVsIGlzIHJhbmRvbSBhdCB0aGlzIHBvaW50LlxuICAgKiAgbW9kZWwucHJlZGljdCh0Zi5yYW5kb21Ob3JtYWwoWzEwLCAxXSkpLnByaW50KCk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gbGF5ZXIgTGF5ZXIgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBleGNlcHRpb24gVmFsdWVFcnJvciBJbiBjYXNlIHRoZSBgbGF5ZXJgIGFyZ3VtZW50IGRvZXMgbm90IGtub3cgaXRzXG4gICAqIGlucHV0IHNoYXBlLlxuICAgKiBAZXhjZXB0aW9uIFZhbHVlRXJyb3IgSW4gY2FzZSB0aGUgYGxheWVyYCBhcmd1bWVudCBoYXMgbXVsdGlwbGUgb3V0cHV0XG4gICAqICAgdGVuc29ycywgb3IgaXMgYWxyZWFkeSBjb25uZWN0ZWQgc29tZXdoZXJlIGVsc2UgKGZvcmJpZGRlbiBpblxuICAgKiAgIGBTZXF1ZW50aWFsYCBtb2RlbHMpLlxuICAgKlxuICAgKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ0NsYXNzZXMnfVxuICAgKi9cbiAgYWRkKGxheWVyOiBMYXllcik6IHZvaWQge1xuICAgIGNvbnN0IGlzTGF5ZXJNb2RlbEluc3RhbmNlID1cbiAgICAgICAgbGF5ZXIgaW5zdGFuY2VvZiBTZXF1ZW50aWFsIHx8IGxheWVyIGluc3RhbmNlb2YgTGF5ZXJzTW9kZWw7XG4gICAgbGV0IG1vZGVsTGF5ZXI6IExheWVyc01vZGVsO1xuICAgIGlmIChpc0xheWVyTW9kZWxJbnN0YW5jZSkge1xuICAgICAgbW9kZWxMYXllciA9IGxheWVyIGFzIExheWVyc01vZGVsO1xuICAgICAgaWYgKG1vZGVsTGF5ZXIub3V0cHV0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgICAnQWxsIGxheWVycyBpbiBhIFNlcXVlbnRpYWwgbW9kZWwgJyArXG4gICAgICAgICAgICAnc2hvdWxkIGhhdmUgYSBzaW5nbGUgb3V0cHV0IHRlbnNvci4gJyArXG4gICAgICAgICAgICAnRm9yIG11bHRpLW91dHB1dCBsYXllcnMsICcgK1xuICAgICAgICAgICAgJ3VzZSB0aGUgZnVuY3Rpb25hbCBBUEkuJyk7XG4gICAgICB9XG4gICAgICBpZiAobW9kZWxMYXllci5pbnB1dHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgJ0FsbCBsYXllcnMgaW4gYSBTZXF1ZW50aWFsIG1vZGVsICcgK1xuICAgICAgICAgICAgJ3Nob3VsZCBoYXZlIGEgc2luZ2xlIGlucHV0IHRlbnNvci4gJyArXG4gICAgICAgICAgICAnRm9yIG11bHRpLWlucHV0IGxheWVycywgJyArXG4gICAgICAgICAgICAndXNlIHRoZSBmdW5jdGlvbmFsIEFQSS4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vdXRwdXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gZmlyc3QgbGF5ZXIgaW4gbW9kZWw6IGNoZWNrIHRoYXQgaXQgaXMgYW4gaW5wdXQgbGF5ZXJcbiAgICAgIGlmIChsYXllci5pbmJvdW5kTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhbiBpbnB1dCBsYXllclxuICAgICAgICBpZiAobGF5ZXIuYmF0Y2hJbnB1dFNoYXBlID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBsYXllciBpbiBhIFNlcXVlbnRpYWwgbW9kZWwgbXVzdCAnICtcbiAgICAgICAgICAgICAgJ2dldCBhbiBgaW5wdXRTaGFwZWAgb3IgYGJhdGNoSW5wdXRTaGFwZWAgYXJndW1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIGlucHV0IGxheWVyLlxuICAgICAgICBjb25zdCB4ID0gSW5wdXQoe1xuICAgICAgICAgIGJhdGNoU2hhcGU6IGxheWVyLmJhdGNoSW5wdXRTaGFwZSxcbiAgICAgICAgICBkdHlwZTogbGF5ZXIuZHR5cGUsXG4gICAgICAgICAgbmFtZTogbGF5ZXIubmFtZSArICdfaW5wdXQnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGlzIHdpbGwgYnVpbGQgdGhlIGN1cnJlbnQgbGF5ZXIgYW5kIGNyZWF0ZSB0aGUgbm9kZSBjb25uZWN0aW5nXG4gICAgICAgIC8vIHRoZSBjdXJyZW50IGxheWVyIHRvIHRoZSBpbnB1dCBsYXllciB3ZSBqdXN0IGNyZWF0ZWQuXG4gICAgICAgIGxheWVyLmFwcGx5KHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNMYXllck1vZGVsSW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRzID0gbW9kZWxMYXllci5vdXRwdXRzO1xuICAgICAgICB0aGlzLmlucHV0cyA9IG1vZGVsTGF5ZXIuaW5wdXRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxheWVyLmluYm91bmROb2Rlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgICAgICAgJ0EgbGF5ZXIgYWRkZWQgdG8gYSBTZXF1ZW50aWFsIG1vZGVsIG11c3Qgbm90IGFscmVhZHkgYmUgJyArXG4gICAgICAgICAgICAgIGBjb25uZWN0ZWQgc29tZXdoZXJlIGVsc2UuIExheWVyc01vZGVsIHJlY2VpdmVkIGxheWVyICR7XG4gICAgICAgICAgICAgICAgICBsYXllci5uYW1lfSBgICtcbiAgICAgICAgICAgICAgYHdoaWNoIGhhcyAke2xheWVyLmluYm91bmROb2Rlcy5sZW5ndGh9IHByZS1leGlzdGluZyBpbmJvdW5kIGAgK1xuICAgICAgICAgICAgICAnY29ubmVjdGlvbnMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGF5ZXIuaW5ib3VuZE5vZGVzWzBdLm91dHB1dFRlbnNvcnMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgICAgICdBbGwgbGF5ZXJzIGluIGEgU2VxdWVudGlhbCBtb2RlbCAnICtcbiAgICAgICAgICAgICAgJ3Nob3VsZCBoYXZlIGEgc2luZ2xlIG91dHB1dCB0ZW5zb3IuICcgK1xuICAgICAgICAgICAgICAnRm9yIG11bHRpLW91dHB1dCBsYXllcnMsICcgK1xuICAgICAgICAgICAgICAndXNlIHRoZSBmdW5jdGlvbmFsIEFQSS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoZWNrU2hhcGUobGF5ZXIpO1xuICAgICAgICB0aGlzLm91dHB1dHMgPSBbbGF5ZXIuaW5ib3VuZE5vZGVzWzBdLm91dHB1dFRlbnNvcnNbMF1dO1xuICAgICAgICB0aGlzLmlucHV0cyA9IGdldFNvdXJjZUlucHV0cyh0aGlzLm91dHB1dHNbMF0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluYm91bmROb2RlcyA9IFtdO1xuICAgICAgLy8gV2UgY3JlYXRlIGFuIGlucHV0IG5vZGUsIHdoaWNoIHdlIHdpbGwga2VlcCB1cGRhdGVkXG4gICAgICAvLyBhcyB3ZSBhZGQgbW9yZSBsYXllcnMuXG4gICAgICAvLyAoVGhpcyBjYWxsIGhhcyBzaWRlIGVmZmVjdHMuKVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXG4gICAgICBuZXcgTm9kZSh7XG4gICAgICAgIG91dGJvdW5kTGF5ZXI6IHRoaXMsXG4gICAgICAgIGluYm91bmRMYXllcnM6IFtdLFxuICAgICAgICBub2RlSW5kaWNlczogW10sXG4gICAgICAgIHRlbnNvckluZGljZXM6IFtdLFxuICAgICAgICBpbnB1dFRlbnNvcnM6IHRoaXMuaW5wdXRzLFxuICAgICAgICBvdXRwdXRUZW5zb3JzOiB0aGlzLm91dHB1dHMsXG4gICAgICAgIC8vIG5vIG1vZGVsLWxldmVsIG1hc2tpbmcgZm9yIG5vd1xuICAgICAgICBpbnB1dE1hc2tzOiBnZW5lcmljX3V0aWxzLnB5TGlzdFJlcGVhdChudWxsLCB0aGlzLmlucHV0cy5sZW5ndGgpLFxuICAgICAgICBvdXRwdXRNYXNrczogW251bGxdLFxuICAgICAgICBpbnB1dFNoYXBlczogdGhpcy5pbnB1dHMubWFwKHggPT4geC5zaGFwZSksXG4gICAgICAgIG91dHB1dFNoYXBlczogdGhpcy5vdXRwdXRzWzBdLnNoYXBlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb3V0cHV0VGVuc29yID0gbGF5ZXIuYXBwbHkodGhpcy5vdXRwdXRzWzBdKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG91dHB1dFRlbnNvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdBbGwgbGF5ZXJzIGluIGEgU2VxdWVudGlhbCBtb2RlbCAnICtcbiAgICAgICAgICAgICdzaG91bGQgaGF2ZSBhIHNpbmdsZSBvdXRwdXQgdGVuc29yLiAnICtcbiAgICAgICAgICAgICdGb3IgbXVsdGktb3V0cHV0IGxheWVycywgJyArXG4gICAgICAgICAgICAndXNlIHRoZSBmdW5jdGlvbmFsIEFQSS4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hlY2tTaGFwZShsYXllcik7XG4gICAgICB0aGlzLm91dHB1dHMgPSBbb3V0cHV0VGVuc29yIGFzIFN5bWJvbGljVGVuc29yXTtcbiAgICAgIC8vIHVwZGF0ZSBzZWxmLmluYm91bmRfbm9kZXNcbiAgICAgIHRoaXMuaW5ib3VuZE5vZGVzWzBdLm91dHB1dFRlbnNvcnMgPSB0aGlzLm91dHB1dHM7XG4gICAgICB0aGlzLmluYm91bmROb2Rlc1swXS5vdXRwdXRTaGFwZXMgPSBbdGhpcy5vdXRwdXRzWzBdLnNoYXBlXTtcbiAgICB9XG5cbiAgICB0aGlzLmxheWVycy5wdXNoKGxheWVyKTtcbiAgICB0aGlzLmJ1aWx0ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgbGFzdCBsYXllciBpbiB0aGUgbW9kZWwuXG4gICAqXG4gICAqIEBleGNlcHRpb24gVHlwZUVycm9yIGlmIHRoZXJlIGFyZSBubyBsYXllcnMgaW4gdGhlIG1vZGVsLlxuICAgKi9cbiAgcG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxheWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZXJlIGFyZSBubyBsYXllcnMgaW4gdGhlIG1vZGVsLicpO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJzLnBvcCgpO1xuICAgIGlmICh0aGlzLmxheWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMub3V0cHV0cyA9IFtdO1xuICAgICAgdGhpcy5pbmJvdW5kTm9kZXMgPSBbXTtcbiAgICAgIHRoaXMub3V0Ym91bmROb2RlcyA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYXN0TGF5ZXJJbmRleCA9IHRoaXMubGF5ZXJzLmxlbmd0aCAtIDE7XG4gICAgICB0aGlzLmxheWVyc1tsYXN0TGF5ZXJJbmRleF0ub3V0Ym91bmROb2RlcyA9IFtdO1xuICAgICAgdGhpcy5vdXRwdXRzID0gW3RoaXMubGF5ZXJzW2xhc3RMYXllckluZGV4XS5vdXRwdXQgYXMgU3ltYm9saWNUZW5zb3JdO1xuICAgICAgLy8gdXBkYXRlIHNlbGYuaW5ib3VuZF9ub2Rlc1xuICAgICAgdGhpcy5pbmJvdW5kTm9kZXNbMF0ub3V0cHV0VGVuc29ycyA9IHRoaXMub3V0cHV0cztcbiAgICAgIHRoaXMuaW5ib3VuZE5vZGVzWzBdLm91dHB1dFNoYXBlcyA9IFt0aGlzLm91dHB1dHNbMF0uc2hhcGVdO1xuICAgIH1cbiAgfVxuXG4gIGNhbGwoaW5wdXRzOiBUZW5zb3J8VGVuc29yW10sIGt3YXJnczogS3dhcmdzKTogVGVuc29yfFRlbnNvcltdIHtcbiAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vZGVsLmNhbGwoaW5wdXRzLCBrd2FyZ3MpO1xuICB9XG5cbiAgYnVpbGQoaW5wdXRTaGFwZT86IFNoYXBlfFNoYXBlW10pIHtcbiAgICAvLyBDYWxsIGBnZXRFeGFjdGx5T25lU2hhcGVgIHdpdGhvdXQgdXNpbmcgaXRzIHJldHVybiB2YWx1ZSxcbiAgICAvLyB0byB2ZXJpZnkgdGhhdCBleGFjdGx5IG9uZSBpbnB1dCBzaGFwZSBpcyBwcm92aWRlZC5cbiAgICBnZXRFeGFjdGx5T25lU2hhcGUoaW5wdXRTaGFwZSk7XG5cbiAgICBpZiAodGhpcy5pbnB1dHMubGVuZ3RoID09PSAwIHx8IHRoaXMub3V0cHV0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1NlcXVlbnRpYWwgbW9kZWwgY2Fubm90IGJlIGJ1aWx0OiBtb2RlbCBpcyBlbXB0eS4nICtcbiAgICAgICAgICAnIEFkZCBzb21lIGxheWVycyBmaXJzdC4nKTtcbiAgICB9XG4gICAgLy8gYWN0dWFsbHkgY3JlYXRlIHRoZSBtb2RlbFxuICAgIHRoaXMubW9kZWwgPSBuZXcgTGF5ZXJzTW9kZWwoe1xuICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cyxcbiAgICAgIG91dHB1dHM6IHRoaXMub3V0cHV0c1swXSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSArICdfbW9kZWwnXG4gICAgfSk7XG4gICAgdGhpcy5tb2RlbC50cmFpbmFibGUgPSB0aGlzLnRyYWluYWJsZTtcblxuICAgIC8vIG1pcnJvciBtb2RlbCBhdHRyaWJ1dGVzXG4gICAgdGhpcy5zdXBwb3J0c01hc2tpbmcgPSB0aGlzLm1vZGVsLnN1cHBvcnRzTWFza2luZztcbiAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IEFkZCBjYWNoZXNcbiAgICB0aGlzLmlucHV0TGF5ZXJzID0gdGhpcy5tb2RlbC5pbnB1dExheWVycztcbiAgICB0aGlzLmlucHV0TGF5ZXJzTm9kZUluZGljZXMgPSB0aGlzLm1vZGVsLmlucHV0TGF5ZXJzTm9kZUluZGljZXM7XG4gICAgdGhpcy5pbnB1dExheWVyc1RlbnNvckluZGljZXMgPSB0aGlzLm1vZGVsLmlucHV0TGF5ZXJzVGVuc29ySW5kaWNlcztcbiAgICB0aGlzLm91dHB1dExheWVycyA9IHRoaXMubW9kZWwub3V0cHV0TGF5ZXJzO1xuICAgIHRoaXMub3V0cHV0TGF5ZXJzTm9kZUluZGljZXMgPSB0aGlzLm1vZGVsLm91dHB1dExheWVyc05vZGVJbmRpY2VzO1xuICAgIHRoaXMub3V0cHV0TGF5ZXJzVGVuc29ySW5kaWNlcyA9IHRoaXMubW9kZWwub3V0cHV0TGF5ZXJzVGVuc29ySW5kaWNlcztcbiAgICB0aGlzLm5vZGVzQnlEZXB0aCA9IHRoaXMubW9kZWwubm9kZXNCeURlcHRoO1xuICAgIHRoaXMuY29udGFpbmVyTm9kZXMgPSB0aGlzLm1vZGVsLmNvbnRhaW5lck5vZGVzO1xuICAgIHRoaXMub3V0cHV0TmFtZXMgPSB0aGlzLm1vZGVsLm91dHB1dE5hbWVzO1xuICAgIHRoaXMuaW5wdXROYW1lcyA9IHRoaXMubW9kZWwuaW5wdXROYW1lcztcbiAgICAvLyBUT0RPKG1pY2hhZWx0ZXJyeSk6IEFkZCBmZWVkSW5wdXROYW1lcywgZmVlZElucHV0cywgaWYgbmVlZGVkLlxuICAgIC8vIFRPRE8obWljaGFlbHRlcnJ5KTogQWRkIGNhbGxiYWNrTW9kZWwgaWYgbmVlZGVkLlxuICAgIHRoaXMuYnVpbHQgPSB0cnVlO1xuICB9XG5cbiAgY291bnRQYXJhbXMoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuYnVpbHQpIHtcbiAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmNvdW50UGFyYW1zKCk7XG4gIH1cblxuICAvKipcbiAgICogUHJpbnQgYSB0ZXh0IHN1bW1hcnkgb2YgdGhlIFNlcXVlbnRpYWwgbW9kZWwncyBsYXllcnMuXG4gICAqXG4gICAqIFRoZSBzdW1tYXJ5IGluY2x1ZGVzXG4gICAqIC0gTmFtZSBhbmQgdHlwZSBvZiBhbGwgbGF5ZXJzIHRoYXQgY29tcHJpc2UgdGhlIG1vZGVsLlxuICAgKiAtIE91dHB1dCBzaGFwZShzKSBvZiB0aGUgbGF5ZXJzXG4gICAqIC0gTnVtYmVyIG9mIHdlaWdodCBwYXJhbWV0ZXJzIG9mIGVhY2ggbGF5ZXJcbiAgICogLSBUaGUgdG90YWwgbnVtYmVyIG9mIHRyYWluYWJsZSBhbmQgbm9uLXRyYWluYWJsZSBwYXJhbWV0ZXJzIG9mIHRoZVxuICAgKiBtb2RlbC5cbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKCk7XG4gICAqIG1vZGVsLmFkZChcbiAgICogICAgIHRmLmxheWVycy5kZW5zZSh7dW5pdHM6IDEwMCwgaW5wdXRTaGFwZTogWzEwXSwgYWN0aXZhdGlvbjogJ3JlbHUnfSkpO1xuICAgKiBtb2RlbC5hZGQodGYubGF5ZXJzLmRlbnNlKHt1bml0czogMSwgYWN0aXZhdGlvbjogJ3NpZ21vaWQnfSkpO1xuICAgKlxuICAgKiBtb2RlbC5zdW1tYXJ5KCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gbGluZUxlbmd0aCBDdXN0b20gbGluZSBsZW5ndGgsIGluIG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICAgKiBAcGFyYW0gcG9zaXRpb25zIEN1c3RvbSB3aWR0aHMgb2YgZWFjaCBvZiB0aGUgY29sdW1ucywgYXMgZWl0aGVyXG4gICAqICAgZnJhY3Rpb25zIG9mIGBsaW5lTGVuZ3RoYCAoZS5nLiwgYFswLjUsIDAuNzUsIDFdYCkgb3IgYWJzb2x1dGUgbnVtYmVyXG4gICAqICAgb2YgY2hhcmFjdGVycyAoZS5nLiwgYFszMCwgNTAsIDY1XWApLiBFYWNoIG51bWJlciBjb3JyZXNwb25kcyB0b1xuICAgKiAgIHJpZ2h0LW1vc3QgKGkuZS4sIGVuZGluZykgcG9zaXRpb24gb2YgYSBjb2x1bW4uXG4gICAqIEBwYXJhbSBwcmludEZuIEN1c3RvbSBwcmludCBmdW5jdGlvbi4gQ2FuIGJlIHVzZWQgdG8gcmVwbGFjZSB0aGUgZGVmYXVsdFxuICAgKiAgIGBjb25zb2xlLmxvZ2AuIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSBgeCA9PiB7fWAgdG8gbXV0ZSB0aGUgcHJpbnRlZFxuICAgKiAgIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlLlxuICAgKlxuICAgKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ0NsYXNzZXMnfVxuICAgKi9cbiAgc3VtbWFyeShcbiAgICAgIGxpbmVMZW5ndGg/OiBudW1iZXIsIHBvc2l0aW9ucz86IG51bWJlcltdLFxuICAgICAgcHJpbnRGbjpcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkID0gY29uc29sZS5sb2cpIHtcbiAgICBpZiAoIXRoaXMuYnVpbHQpIHtcbiAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9XG4gICAgc3VwZXIuc3VtbWFyeShsaW5lTGVuZ3RoLCBwb3NpdGlvbnMsIHByaW50Rm4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHdlaWdodHMgb2YgdGhlIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gd2VpZ2h0cyBTaG91bGQgYmUgYSBsaXN0IG9mIFRlbnNvcnMgd2l0aCBzaGFwZXMgYW5kIHR5cGVzIG1hdGNoaW5nXG4gICAqICAgdGhlIG91dHB1dCBvZiBgbW9kZWwuZ2V0V2VpZ2h0cygpYC5cbiAgICovXG4gIHNldFdlaWdodHMod2VpZ2h0czogVGVuc29yW10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwuc2V0V2VpZ2h0cyh3ZWlnaHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsb3NzIHZhbHVlICYgbWV0cmljcyB2YWx1ZXMgZm9yIHRoZSBtb2RlbCBpbiB0ZXN0IG1vZGUuXG4gICAqXG4gICAqIExvc3MgYW5kIG1ldHJpY3MgYXJlIHNwZWNpZmllZCBkdXJpbmcgYGNvbXBpbGUoKWAsIHdoaWNoIG5lZWRzIHRvIGhhcHBlblxuICAgKiBiZWZvcmUgY2FsbHMgdG8gYGV2YWx1YXRlKClgLlxuICAgKlxuICAgKiBDb21wdXRhdGlvbiBpcyBkb25lIGluIGJhdGNoZXMuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNvbnN0IG1vZGVsID0gdGYuc2VxdWVudGlhbCh7XG4gICAqICAgbGF5ZXJzOiBbdGYubGF5ZXJzLmRlbnNlKHt1bml0czogMSwgaW5wdXRTaGFwZTogWzEwXX0pXVxuICAgKiB9KTtcbiAgICogbW9kZWwuY29tcGlsZSh7b3B0aW1pemVyOiAnc2dkJywgbG9zczogJ21lYW5TcXVhcmVkRXJyb3InfSk7XG4gICAqIGNvbnN0IHJlc3VsdCA9IG1vZGVsLmV2YWx1YXRlKHRmLm9uZXMoWzgsIDEwXSksIHRmLm9uZXMoWzgsIDFdKSwge1xuICAgKiAgIGJhdGNoU2l6ZTogNCxcbiAgICogfSk7XG4gICAqIHJlc3VsdC5wcmludCgpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHggYHRmLlRlbnNvcmAgb2YgdGVzdCBkYXRhLCBvciBhbiBgQXJyYXlgIG9mIGB0Zi5UZW5zb3JgcyBpZiB0aGVcbiAgICogbW9kZWwgaGFzIG11bHRpcGxlIGlucHV0cy5cbiAgICogQHBhcmFtIHkgYHRmLlRlbnNvcmAgb2YgdGFyZ2V0IGRhdGEsIG9yIGFuIGBBcnJheWAgb2YgYHRmLlRlbnNvcmBzIGlmIHRoZVxuICAgKiBtb2RlbCBoYXMgbXVsdGlwbGUgb3V0cHV0cy5cbiAgICogQHBhcmFtIGFyZ3MgQSBgTW9kZWxFdmFsdWF0ZUNvbmZpZ2AsIGNvbnRhaW5pbmcgb3B0aW9uYWwgZmllbGRzLlxuICAgKlxuICAgKiBAcmV0dXJuIGBTY2FsYXJgIHRlc3QgbG9zcyAoaWYgdGhlIG1vZGVsIGhhcyBhIHNpbmdsZSBvdXRwdXQgYW5kIG5vXG4gICAqICAgbWV0cmljcykgb3IgYEFycmF5YCBvZiBgU2NhbGFyYHMgKGlmIHRoZSBtb2RlbCBoYXMgbXVsdGlwbGUgb3V0cHV0c1xuICAgKiAgIGFuZC9vciBtZXRyaWNzKS4gVGhlIGF0dHJpYnV0ZSBgbW9kZWwubWV0cmljc05hbWVzYFxuICAgKiAgIHdpbGwgZ2l2ZSB5b3UgdGhlIGRpc3BsYXkgbGFiZWxzIGZvciB0aGUgc2NhbGFyIG91dHB1dHMuXG4gICAqXG4gICAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnQ2xhc3Nlcyd9XG4gICAqL1xuICBldmFsdWF0ZShcbiAgICAgIHg6IFRlbnNvcnxUZW5zb3JbXSwgeTogVGVuc29yfFRlbnNvcltdLFxuICAgICAgYXJnczogTW9kZWxFdmFsdWF0ZUFyZ3MgPSB7fSk6IFNjYWxhcnxTY2FsYXJbXSB7XG4gICAgaWYgKCF0aGlzLmJ1aWx0KSB7XG4gICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICAgICdUaGUgbW9kZWwgbmVlZHMgdG8gYmUgY29tcGlsZWQgYmVmb3JlIGJlaW5nIHVzZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vZGVsLmV2YWx1YXRlKHgsIHksIGFyZ3MpO1xuICB9XG5cbiAgLy8gVE9ETyhjYWlzKTogQWRkIGNvZGUgc25pcHBldCBiZWxvdyBvbmNlIHJlYWwgZGF0YXNldCBvYmplY3RzIGFyZVxuICAvLyAgIGF2YWlsYWJsZS5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIG1vZGVsIHVzaW5nIGEgZGF0YXNldCBvYmplY3QuXG4gICAqXG4gICAqIE5vdGU6IFVubGlrZSBgZXZhbHVhdGUoKWAsIHRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cyAoYGFzeW5jYCk7XG4gICAqXG4gICAqIEBwYXJhbSBkYXRhc2V0IEEgZGF0YXNldCBvYmplY3QuIEl0cyBgaXRlcmF0b3IoKWAgbWV0aG9kIGlzIGV4cGVjdGVkXG4gICAqICAgdG8gZ2VuZXJhdGUgYSBkYXRhc2V0IGl0ZXJhdG9yIG9iamVjdCwgdGhlIGBuZXh0KClgIG1ldGhvZCBvZiB3aGljaFxuICAgKiAgIGlzIGV4cGVjdGVkIHRvIHByb2R1Y2UgZGF0YSBiYXRjaGVzIGZvciBldmFsdWF0aW9uLiBUaGUgcmV0dXJuIHZhbHVlXG4gICAqICAgb2YgdGhlIGBuZXh0KClgIGNhbGwgb3VnaHQgdG8gY29udGFpbiBhIGJvb2xlYW4gYGRvbmVgIGZpZWxkIGFuZCBhXG4gICAqICAgYHZhbHVlYCBmaWVsZC4gVGhlIGB2YWx1ZWAgZmllbGQgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXkgb2YgdHdvXG4gICAqICAgYHRmLlRlbnNvcmBzIG9yIGFuIGFycmF5IG9mIHR3byBuZXN0ZWQgYHRmLlRlbnNvcmAgc3RydWN0dXJlcy4gVGhlIGZvcm1lclxuICAgKiAgIGNhc2UgaXMgZm9yIG1vZGVscyB3aXRoIGV4YWN0bHkgb25lIGlucHV0IGFuZCBvbmUgb3V0cHV0IChlLmcuLlxuICAgKiAgIGEgc2VxdWVudGlhbCBtb2RlbCkuIFRoZSBsYXR0ZXIgY2FzZSBpcyBmb3IgbW9kZWxzIHdpdGggbXVsdGlwbGVcbiAgICogICBpbnB1dHMgYW5kL29yIG11bHRpcGxlIG91dHB1dHMuIE9mIHRoZSB0d28gaXRlbXMgaW4gdGhlIGFycmF5LCB0aGVcbiAgICogICBmaXJzdCBpcyB0aGUgaW5wdXQgZmVhdHVyZShzKSBhbmQgdGhlIHNlY29uZCBpcyB0aGUgb3V0cHV0IHRhcmdldChzKS5cbiAgICogQHBhcmFtIGFyZ3MgQSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdGhlIGRhdGFzZXQtYmFzZWQgZXZhbHVhdGlvbi5cbiAgICogQHJldHVybnMgTG9zcyBhbmQgbWV0cmljIHZhbHVlcyBhcyBhbiBBcnJheSBvZiBgU2NhbGFyYCBvYmplY3RzLlxuICAgKlxuICAgKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ0NsYXNzZXMnfVxuICAgKi9cbiAgYXN5bmMgZXZhbHVhdGVEYXRhc2V0KGRhdGFzZXQ6IERhdGFzZXQ8e30+LCBhcmdzOiBNb2RlbEV2YWx1YXRlRGF0YXNldEFyZ3MpOlxuICAgICAgUHJvbWlzZTxTY2FsYXJ8U2NhbGFyW10+IHtcbiAgICBpZiAoIXRoaXMuYnVpbHQpIHtcbiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICAgICAgJ1RoZSBtb2RlbCBuZWVkcyB0byBiZSBjb21waWxlZCBiZWZvcmUgYmVpbmcgdXNlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZXZhbHVhdGVEYXRhc2V0KGRhdGFzZXQsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBvdXRwdXQgcHJlZGljdGlvbnMgZm9yIHRoZSBpbnB1dCBzYW1wbGVzLlxuICAgKlxuICAgKiBDb21wdXRhdGlvbiBpcyBkb25lIGluIGJhdGNoZXMuXG4gICAqXG4gICAqIE5vdGU6IHRoZSBcInN0ZXBcIiBtb2RlIG9mIHByZWRpY3QoKSBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZC5cbiAgICogICBUaGlzIGlzIGJlY2F1c2UgdGhlIFRlbnNvckZsb3cuanMgY29yZSBiYWNrZW5kIGlzIGltcGVyYXRpdmUgb25seS5cbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKHtcbiAgICogICBsYXllcnM6IFt0Zi5sYXllcnMuZGVuc2Uoe3VuaXRzOiAxLCBpbnB1dFNoYXBlOiBbMTBdfSldXG4gICAqIH0pO1xuICAgKiBtb2RlbC5wcmVkaWN0KHRmLm9uZXMoWzIsIDEwXSkpLnByaW50KCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geCBUaGUgaW5wdXQgZGF0YSwgYXMgYSBUZW5zb3IsIG9yIGFuIGBBcnJheWAgb2YgYHRmLlRlbnNvcmBzIGlmXG4gICAqICAgdGhlIG1vZGVsIGhhcyBtdWx0aXBsZSBpbnB1dHMuXG4gICAqIEBwYXJhbSBjb25pZmcgQSBgTW9kZWxQcmVkaWN0Q29uZmlnYCBvYmplY3QgY29udGFpbmluZyBvcHRpb25hbCBmaWVsZHMuXG4gICAqXG4gICAqIEByZXR1cm4gYHRmLlRlbnNvcmAocykgb2YgcHJlZGljdGlvbnMuXG4gICAqXG4gICAqIEBleGNlcHRpb24gVmFsdWVFcnJvciBJbiBjYXNlIG9mIG1pc21hdGNoIGJldHdlZW4gdGhlIHByb3ZpZGVkIGlucHV0IGRhdGFcbiAgICogICBhbmQgdGhlIG1vZGVsJ3MgZXhwZWN0YXRpb25zLCBvciBpbiBjYXNlIGEgc3RhdGVmdWwgbW9kZWwgcmVjZWl2ZXMgYVxuICAgKiAgIG51bWJlciBvZiBzYW1wbGVzIHRoYXQgaXMgbm90IGEgbXVsdGlwbGUgb2YgdGhlIGJhdGNoIHNpemUuXG4gICAqXG4gICAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnQ2xhc3Nlcyd9XG4gICAqL1xuICBwcmVkaWN0KHg6IFRlbnNvcnxUZW5zb3JbXSwgYXJnczogTW9kZWxQcmVkaWN0QXJncyA9IHt9KTogVGVuc29yfFRlbnNvcltdIHtcbiAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vZGVsLnByZWRpY3QoeCwgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBwcmVkaWN0aW9ucyBmb3IgYSBzaW5nbGUgYmF0Y2ggb2Ygc2FtcGxlcy5cbiAgICpcbiAgICogQHBhcmFtIHg6IElucHV0IHNhbXBsZXMsIGFzIGEgVGVuc29yLCBvciBsaXN0IG9mIFRlbnNvcnMgKGlmIHRoZSBtb2RlbFxuICAgKiAgIGhhcyBtdWx0aXBsZSBpbnB1dHMpLlxuICAgKiBAcmV0dXJuIFRlbnNvcihzKSBvZiBwcmVkaWN0aW9uc1xuICAgKi9cbiAgcHJlZGljdE9uQmF0Y2goeDogVGVuc29yKTogVGVuc29yfFRlbnNvcltdIHtcbiAgICBpZiAodGhpcy5tb2RlbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vZGVsLnByZWRpY3RPbkJhdGNoKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlZSBgTGF5ZXJzTW9kZWwuY29tcGlsZWAuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqL1xuICBjb21waWxlKGFyZ3M6IE1vZGVsQ29tcGlsZUFyZ3MpOiB2b2lkIHtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5tb2RlbC5jb21waWxlKGFyZ3MpO1xuICAgIHRoaXMub3B0aW1pemVyXyA9IHRoaXMubW9kZWwub3B0aW1pemVyO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICB0aGlzLmlzT3B0aW1pemVyT3duZWQgPSAodGhpcy5tb2RlbCBhcyBhbnkpLmlzT3B0aW1pemVyT3duZWQ7XG4gICAgdGhpcy5sb3NzID0gdGhpcy5tb2RlbC5sb3NzO1xuICAgIHRoaXMubWV0cmljcyA9IHRoaXMubW9kZWwubWV0cmljcztcbiAgICAvLyBUT0RPKGNhaXMpOiBBZGQgdGhpcy5sb3NzV2VpZ2h0cywgdGhpcy5zYW1wbGVXZWlnaHRNb2RlLFxuICAgIC8vICAgdGhpcy53ZWlnaHRlZE1ldHJpY3MsIHRoaXMudGFyZ2V0cy5cbiAgICB0aGlzLm1ldHJpY3NUZW5zb3JzID0gdGhpcy5tb2RlbC5tZXRyaWNzVGVuc29ycztcbiAgICB0aGlzLm1ldHJpY3NOYW1lcyA9IHRoaXMubW9kZWwubWV0cmljc05hbWVzO1xuICAgIC8vIFRPRE8oY2Fpcyk6IEFkZCBzYW1wbGVXZWlnaHRzLlxuICB9XG5cbiAgZ2V0IG9wdGltaXplcigpOiBPcHRpbWl6ZXIge1xuICAgIHJldHVybiB0aGlzLm1vZGVsID09IG51bGwgPyB1bmRlZmluZWQgOiB0aGlzLm1vZGVsLm9wdGltaXplcjtcbiAgfVxuXG4gIHNldCBvcHRpbWl6ZXIob3B0aW1pemVyOiBPcHRpbWl6ZXIpIHtcbiAgICB0aGlzLm1vZGVsLm9wdGltaXplciA9IG9wdGltaXplcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFpbnMgdGhlIG1vZGVsIGZvciBhIGZpeGVkIG51bWJlciBvZiBlcG9jaHMgKGl0ZXJhdGlvbnMgb24gYSBkYXRhc2V0KS5cbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKHtcbiAgICogICBsYXllcnM6IFt0Zi5sYXllcnMuZGVuc2Uoe3VuaXRzOiAxLCBpbnB1dFNoYXBlOiBbMTBdfSldXG4gICAqIH0pO1xuICAgKiBtb2RlbC5jb21waWxlKHtvcHRpbWl6ZXI6ICdzZ2QnLCBsb3NzOiAnbWVhblNxdWFyZWRFcnJvcid9KTtcbiAgICogY29uc3QgaGlzdG9yeSA9IGF3YWl0IG1vZGVsLmZpdCh0Zi5vbmVzKFs4LCAxMF0pLCB0Zi5vbmVzKFs4LCAxXSksIHtcbiAgICogICBiYXRjaFNpemU6IDQsXG4gICAqICAgZXBvY2hzOiAzXG4gICAqIH0pO1xuICAgKiBjb25zb2xlLmxvZyhoaXN0b3J5Lmhpc3RvcnkubG9zc1swXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geCBgdGYuVGVuc29yYCBvZiB0cmFpbmluZyBkYXRhLCBvciBhbiBhcnJheSBvZiBgdGYuVGVuc29yYHMgaWYgdGhlXG4gICAqIG1vZGVsIGhhcyBtdWx0aXBsZSBpbnB1dHMuIElmIGFsbCBpbnB1dHMgaW4gdGhlIG1vZGVsIGFyZSBuYW1lZCwgeW91IGNhblxuICAgKiBhbHNvIHBhc3MgYSBkaWN0aW9uYXJ5IG1hcHBpbmcgaW5wdXQgbmFtZXMgdG8gYHRmLlRlbnNvcmBzLlxuICAgKiBAcGFyYW0geSBgdGYuVGVuc29yYCBvZiB0YXJnZXQgKGxhYmVsKSBkYXRhLCBvciBhbiBhcnJheSBvZiBgdGYuVGVuc29yYHMgaWZcbiAgICogdGhlIG1vZGVsIGhhcyBtdWx0aXBsZSBvdXRwdXRzLiBJZiBhbGwgb3V0cHV0cyBpbiB0aGUgbW9kZWwgYXJlIG5hbWVkLCB5b3VcbiAgICogIGNhbiBhbHNvIHBhc3MgYSBkaWN0aW9uYXJ5IG1hcHBpbmcgb3V0cHV0IG5hbWVzIHRvIGB0Zi5UZW5zb3Jgcy5cbiAgICogQHBhcmFtIGFyZ3MgIEEgYE1vZGVsRml0Q29uZmlnYCwgY29udGFpbmluZyBvcHRpb25hbCBmaWVsZHMuXG4gICAqXG4gICAqIEByZXR1cm4gQSBgSGlzdG9yeWAgaW5zdGFuY2UuIEl0cyBgaGlzdG9yeWAgYXR0cmlidXRlIGNvbnRhaW5zIGFsbFxuICAgKiAgIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBkdXJpbmcgdHJhaW5pbmcuXG4gICAqXG4gICAqIEBleGNlcHRpb24gVmFsdWVFcnJvciBJbiBjYXNlIG9mIG1pc21hdGNoIGJldHdlZW4gdGhlIHByb3ZpZGVkIGlucHV0IGRhdGFcbiAgICogICBhbmQgd2hhdCB0aGUgbW9kZWwgZXhwZWN0cy5cbiAgICpcbiAgICogQGRvYyB7aGVhZGluZzogJ01vZGVscycsIHN1YmhlYWRpbmc6ICdDbGFzc2VzJ31cbiAgICovXG4gIGFzeW5jIGZpdChcbiAgICAgIHg6IFRlbnNvcnxUZW5zb3JbXXx7W2lucHV0TmFtZTogc3RyaW5nXTogVGVuc29yfSxcbiAgICAgIHk6IFRlbnNvcnxUZW5zb3JbXXx7W2lucHV0TmFtZTogc3RyaW5nXTogVGVuc29yfSxcbiAgICAgIGFyZ3M6IE1vZGVsRml0QXJncyA9IHt9KTogUHJvbWlzZTxIaXN0b3J5PiB7XG4gICAgaWYgKCF0aGlzLmJ1aWx0KSB7XG4gICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICAgICdUaGUgbW9kZWwgbmVlZHMgdG8gYmUgY29tcGlsZWQgYmVmb3JlICcgK1xuICAgICAgICAgICdiZWluZyB1c2VkLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb2RlbC5maXQoeCwgeSwgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogVHJhaW5zIHRoZSBtb2RlbCB1c2luZyBhIGRhdGFzZXQgb2JqZWN0LlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBjb25zdCB4QXJyYXkgPSBbXG4gICAqICAgWzEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdLFxuICAgKiAgIFsxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXSxcbiAgICogICBbMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV0sXG4gICAqICAgWzEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdLFxuICAgKiBdO1xuICAgKiBjb25zdCB5QXJyYXkgPSBbMSwgMSwgMSwgMV07XG4gICAqIC8vIENyZWF0ZSBhIGRhdGFzZXQgZnJvbSB0aGUgSmF2YVNjcmlwdCBhcnJheS5cbiAgICogY29uc3QgeERhdGFzZXQgPSB0Zi5kYXRhLmFycmF5KHhBcnJheSk7XG4gICAqIGNvbnN0IHlEYXRhc2V0ID0gdGYuZGF0YS5hcnJheSh5QXJyYXkpO1xuICAgKiAvLyBaaXAgY29tYmluZXMgdGhlIGB4YCBhbmQgYHlgIERhdGFzZXRzIGludG8gYSBzaW5nbGUgRGF0YXNldCwgdGhlXG4gICAqIC8vIGl0ZXJhdG9yIG9mIHdoaWNoIHdpbGwgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIG9mIHR3byB0ZW5zb3JzLFxuICAgKiAvLyBjb3JyZXNwb25kaW5nIHRvIGB4YCBhbmQgYHlgLiAgVGhlIGNhbGwgdG8gYGJhdGNoKDQpYCB3aWxsIGJ1bmRsZVxuICAgKiAvLyBmb3VyIHN1Y2ggc2FtcGxlcyBpbnRvIGEgc2luZ2xlIG9iamVjdCwgd2l0aCB0aGUgc2FtZSBrZXlzIG5vdyBwb2ludGluZ1xuICAgKiAvLyB0byB0ZW5zb3JzIHRoYXQgaG9sZCA0IGV4YW1wbGVzLCBvcmdhbml6ZWQgYWxvbmcgdGhlIGJhdGNoIGRpbWVuc2lvbi5cbiAgICogLy8gVGhlIGNhbGwgdG8gYHNodWZmbGUoNClgIGNhdXNlcyBlYWNoIGl0ZXJhdGlvbiB0aHJvdWdoIHRoZSBkYXRhc2V0IHRvXG4gICAqIC8vIGhhcHBlbiBpbiBhIGRpZmZlcmVudCBvcmRlci4gIFRoZSBzaXplIG9mIHRoZSBzaHVmZmxlIHdpbmRvdyBpcyA0LlxuICAgKiBjb25zdCB4eURhdGFzZXQgPSB0Zi5kYXRhLnppcCh7eHM6IHhEYXRhc2V0LCB5czogeURhdGFzZXR9KVxuICAgKiAgICAgLmJhdGNoKDQpXG4gICAqICAgICAuc2h1ZmZsZSg0KTtcbiAgICogY29uc3QgbW9kZWwgPSB0Zi5zZXF1ZW50aWFsKHtcbiAgICogICBsYXllcnM6IFt0Zi5sYXllcnMuZGVuc2Uoe3VuaXRzOiAxLCBpbnB1dFNoYXBlOiBbOV19KV1cbiAgICogfSk7XG4gICAqIG1vZGVsLmNvbXBpbGUoe29wdGltaXplcjogJ3NnZCcsIGxvc3M6ICdtZWFuU3F1YXJlZEVycm9yJ30pO1xuICAgKiBjb25zdCBoaXN0b3J5ID0gYXdhaXQgbW9kZWwuZml0RGF0YXNldCh4eURhdGFzZXQsIHtcbiAgICogICBlcG9jaHM6IDQsXG4gICAqICAgY2FsbGJhY2tzOiB7b25FcG9jaEVuZDogKGVwb2NoLCBsb2dzKSA9PiBjb25zb2xlLmxvZyhsb2dzLmxvc3MpfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhc2V0IEEgZGF0YXNldCBvYmplY3QuIEl0cyBgaXRlcmF0b3IoKWAgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG4gICAqICAgZ2VuZXJhdGUgYSBkYXRhc2V0IGl0ZXJhdG9yIG9iamVjdCwgdGhlIGBuZXh0KClgIG1ldGhvZCBvZiB3aGljaCBpc1xuICAgKiAgIGV4cGVjdGVkIHRvIHByb2R1Y2UgZGF0YSBiYXRjaGVzIGZvciBldmFsdWF0aW9uLiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZVxuICAgKiAgIGBuZXh0KClgIGNhbGwgb3VnaHQgdG8gY29udGFpbiBhIGJvb2xlYW4gYGRvbmVgIGZpZWxkIGFuZCBhIGB2YWx1ZWBcbiAgICogICBmaWVsZC5cbiAgICpcbiAgICogICBUaGUgYHZhbHVlYCBmaWVsZCBpcyBleHBlY3RlZCB0byBiZSBhbiBvYmplY3Qgb2Ygd2l0aCBmaWVsZHNcbiAgICogICBgeHNgIGFuZCBgeXNgLCB3aGljaCBwb2ludCB0byB0aGUgZmVhdHVyZSB0ZW5zb3IgYW5kIHRoZSB0YXJnZXQgdGVuc29yLFxuICAgKiAgIHJlc3BlY3RpdmVseS4gVGhpcyBjYXNlIGlzIGZvciBtb2RlbHMgd2l0aCBleGFjdGx5IG9uZSBpbnB1dCBhbmQgb25lXG4gICAqICAgb3V0cHV0IChlLmcuLiBhIHNlcXVlbnRpYWwgbW9kZWwpLiBGb3IgZXhhbXBsZTpcbiAgICogICBgYGBqc1xuICAgKiAgIHt2YWx1ZToge3hzOiB4c1RlbnNvciwgeXM6IHlzVGVuc29yfSwgZG9uZTogZmFsc2V9XG4gICAqICAgYGBgXG4gICAqXG4gICAqICAgSWYgdGhlIG1vZGVsIGhhcyBtdWx0aXBsZSBpbnB1dHMsIHRoZSBgeHNgIGZpZWxkIG9mIGB2YWx1ZWAgc2hvdWxkXG4gICAqICAgYmUgYW4gb2JqZWN0IG1hcHBpbmcgaW5wdXQgbmFtZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBmZWF0dXJlIHRlbnNvcnMuXG4gICAqICAgRm9yIGV4YW1wbGU6XG4gICAqICAgYGBganNcbiAgICogICB7XG4gICAqICAgICB2YWx1ZToge1xuICAgKiAgICAgICB4czoge1xuICAgKiAgICAgICAgIGlucHV0XzE6IHhzVGVuc29yMSxcbiAgICogICAgICAgICBpbnB1dF8yOiB4c1RlbnNvcjJcbiAgICogICAgICAgfSxcbiAgICogICAgICAgeXM6IHlzVGVuc29yXG4gICAqICAgICB9LFxuICAgKiAgICAgZG9uZTogZmFsc2VcbiAgICogICB9XG4gICAqICAgYGBgXG4gICAqICAgSWYgdGhlIG1vZGVsIGhhcyBtdWx0aXBsZSBvdXRwdXRzLCB0aGUgYHlzYCBmaWVsZCBvZiBgdmFsdWVgIHNob3VsZFxuICAgKiAgIGJlIGFuIG9iamVjdCBtYXBwaW5nIG91dHB1dCBuYW1lcyB0byB0aGVpciByZXNwZWN0aXZlIHRhcmdldCB0ZW5zb3JzLlxuICAgKiAgIEZvciBleGFtcGxlOlxuICAgKiAgIGBgYGpzXG4gICAqICAge1xuICAgKiAgICAgdmFsdWU6IHtcbiAgICogICAgICAgeHM6IHhzVGVuc29yLFxuICAgKiAgICAgICB5czoge1xuICAgKiAgICAgICAgIG91dHB1dF8xOiB5c1RlbnNvcjEsXG4gICAqICAgICAgICAgb3V0cHV0XzI6IHlzVGVuc29yMlxuICAgKiAgICAgICB9LFxuICAgKiAgICAgfSxcbiAgICogICAgIGRvbmU6IGZhbHNlXG4gICAqICAgfVxuICAgKiAgIGBgYFxuICAgKiBAcGFyYW0gYXJncyBBIGBNb2RlbEZpdERhdGFzZXRBcmdzYCwgY29udGFpbmluZyBvcHRpb25hbCBmaWVsZHMuXG4gICAqXG4gICAqIEByZXR1cm4gQSBgSGlzdG9yeWAgaW5zdGFuY2UuIEl0cyBgaGlzdG9yeWAgYXR0cmlidXRlIGNvbnRhaW5zIGFsbFxuICAgKiAgIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBkdXJpbmcgdHJhaW5pbmcuXG4gICAqXG4gICAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnQ2xhc3NlcycsIGlnbm9yZUNJOiB0cnVlfVxuICAgKi9cbiAgYXN5bmMgZml0RGF0YXNldDxUPihkYXRhc2V0OiBEYXRhc2V0PFQ+LCBhcmdzOiBNb2RlbEZpdERhdGFzZXRBcmdzPFQ+KTpcbiAgICAgIFByb21pc2U8SGlzdG9yeT4ge1xuICAgIGlmICghdGhpcy5idWlsdCkge1xuICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihcbiAgICAgICAgICAnVGhlIG1vZGVsIG5lZWRzIHRvIGJlIGNvbXBpbGVkIGJlZm9yZSAnICtcbiAgICAgICAgICAnYmVpbmcgdXNlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZml0RGF0YXNldChkYXRhc2V0LCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGEgc2luZ2xlIGdyYWRpZW50IHVwZGF0ZSBvbiBhIHNpbmdsZSBiYXRjaCBvZiBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYGZpdCgpYCBhbmQgYGZpdERhdGFzZXQoKWAgaW4gdGhlIGZvbGxvd2luZ1xuICAgKiByZWdhcmRzOlxuICAgKiAgIC0gSXQgb3BlcmF0ZXMgb24gZXhhY3RseSBvbmUgYmF0Y2ggb2YgZGF0YS5cbiAgICogICAtIEl0IHJldHVybnMgb25seSB0aGUgbG9zcyBhbmQgbWF0cmljIHZhbHVlcywgaW5zdGVhZCBvZlxuICAgKiAgICAgcmV0dXJuaW5nIHRoZSBiYXRjaC1ieS1iYXRjaCBsb3NzIGFuZCBtZXRyaWMgdmFsdWVzLlxuICAgKiAgIC0gSXQgZG9lc24ndCBzdXBwb3J0IGZpbmUtZ3JhaW5lZCBvcHRpb25zIHN1Y2ggYXMgdmVyYm9zaXR5IGFuZFxuICAgKiAgICAgY2FsbGJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0geCBJbnB1dCBkYXRhLiBJdCBjb3VsZCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICogICAtIEEgYHRmLlRlbnNvcmAsIG9yIGFuIEFycmF5IG9mIGB0Zi5UZW5zb3JgcyAoaW4gY2FzZSB0aGUgbW9kZWwgaGFzXG4gICAqICAgICBtdWx0aXBsZSBpbnB1dHMpLlxuICAgKiAgIC0gQW4gT2JqZWN0IG1hcHBpbmcgaW5wdXQgbmFtZXMgdG8gY29ycmVzcG9uZGluZyBgdGYuVGVuc29yYCAoaWYgdGhlXG4gICAqICAgICBtb2RlbCBoYXMgbmFtZWQgaW5wdXRzKS5cbiAgICogQHBhcmFtIHkgVGFyZ2V0IGRhcnRhLiBJdCBjb3VsZCBiZSBlaXRoZXIgYSBgdGYuVGVuc29yYCBhIG11bHRpcGxlXG4gICAqICAgYHRmLlRlbnNvcmBzLiBJdCBzaG91bGQgYmUgY29uc2lzdGVudCB3aXRoIGB4YC5cbiAgICogQHJldHVybnMgVHJhaW5pbmcgbG9zcyBvciBsb3NzZXMgKGluIGNhc2UgdGhlIG1vZGVsIGhhc1xuICAgKiAgIG11bHRpcGxlIG91dHB1dHMpLCBhbG9uZyB3aXRoIG1ldHJpY3MgKGlmIGFueSksIGFzIG51bWJlcnMuXG4gICAqXG4gICAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnQ2xhc3Nlcyd9XG4gICAqL1xuICBhc3luYyB0cmFpbk9uQmF0Y2goXG4gICAgICB4OiBUZW5zb3J8VGVuc29yW118e1tpbnB1dE5hbWU6IHN0cmluZ106IFRlbnNvcn0sXG4gICAgICB5OiBUZW5zb3J8VGVuc29yW118XG4gICAgICB7W2lucHV0TmFtZTogc3RyaW5nXTogVGVuc29yfSk6IFByb21pc2U8bnVtYmVyfG51bWJlcltdPiB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwudHJhaW5PbkJhdGNoKHgsIHkpO1xuICB9XG5cbiAgLyogU2VlIHBhcmVudCBjbGFzcyBmb3IgSnNEb2MgKi9cbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHN0YXRpYyBmcm9tQ29uZmlnPFQgZXh0ZW5kcyBzZXJpYWxpemF0aW9uLlNlcmlhbGl6YWJsZT4oXG4gICAgICBjbHM6IHNlcmlhbGl6YXRpb24uU2VyaWFsaXphYmxlQ29uc3RydWN0b3I8VD4sXG4gICAgICBjb25maWc6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCxcbiAgICAgIGN1c3RvbU9iamVjdHMgPSB7fSBhcyBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QsXG4gICAgICBmYXN0V2VpZ2h0SW5pdCA9IGZhbHNlKTogVCB7XG4gICAgbGV0IGNvbmZpZ0FycmF5OiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3RBcnJheTtcbiAgICBsZXQgZXh0cmFNb2RlbENvbmZpZzogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0ID0ge307XG4gICAgaWYgKGNvbmZpZyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBpZiAoIShjb25maWdbMF0uY2xhc3NOYW1lICE9IG51bGwpIHx8XG4gICAgICAgICAgY29uZmlnWzBdWydjbGFzc05hbWUnXSA9PT0gJ01lcmdlJykge1xuICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcignTGVnYWN5IHNlcmlhbGl6YXRpb24gZm9ybWF0IG5vdCBzdXBwb3J0ZWQgeWV0LicpO1xuICAgICAgfVxuICAgICAgY29uZmlnQXJyYXkgPSBjb25maWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICAgIGNvbmZpZ1snbGF5ZXJzJ10gIT0gbnVsbCxcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICBgV2hlbiB0aGUgY29uZmlnIGRhdGEgZm9yIGEgU2VxdWVudGlhbCBtb2RlbCBpcyBub3QgYW4gQXJyYXksIGAgK1xuICAgICAgICAgICAgICBgaXQgbXVzdCBiZSBhbiBPYmplY3QgdGhhdCBjb250YWlucyB0aGUgJ2xheWVycycgZmllbGQuYCk7XG4gICAgICBjb25maWdBcnJheSA9IGNvbmZpZ1snbGF5ZXJzJ10gYXMgc2VyaWFsaXphdGlvbi5Db25maWdEaWN0QXJyYXk7XG4gICAgICBkZWxldGUgY29uZmlnWydsYXllcnMnXTtcbiAgICAgIGV4dHJhTW9kZWxDb25maWcgPSBjb25maWc7XG4gICAgfVxuXG4gICAgY29uc3QgbW9kZWwgPSBuZXcgY2xzKGV4dHJhTW9kZWxDb25maWcpO1xuICAgIGlmICghKG1vZGVsIGluc3RhbmNlb2YgU2VxdWVudGlhbCkpIHtcbiAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFxuICAgICAgICAgIGBTZXF1ZW50aWFsLmZyb21Db25maWcgY2FsbGVkIG9uIG5vbi1TZXF1ZW50aWFsIGlucHV0OiAke21vZGVsfWApO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNvbmYgb2YgY29uZmlnQXJyYXkpIHtcbiAgICAgIGNvbnN0IGN1c3RvbU9iamVjdHM6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCA9IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGxheWVyID0gZGVzZXJpYWxpemUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25mIGFzIHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCwgY3VzdG9tT2JqZWN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhc3RXZWlnaHRJbml0KSBhcyBMYXllcjtcbiAgICAgIGlmIChmYXN0V2VpZ2h0SW5pdCkge1xuICAgICAgICBsYXllci5zZXRGYXN0V2VpZ2h0SW5pdER1cmluZ0J1aWxkKHRydWUpO1xuICAgICAgfVxuICAgICAgbW9kZWwuYWRkKGxheWVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciB1c2VkIGZvciBmb3JjZSBzdG9wcGluZyBvZiBMYXllcnNNb2RlbC5maXQoKSAoaS5lLiwgdHJhaW5pbmcpLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBjb25zdCBtb2RlbCA9IHRmLnNlcXVlbnRpYWwoKTtcbiAgICogbW9kZWwuYWRkKHRmLmxheWVycy5kZW5zZSh7dW5pdHM6IDEsIGlucHV0U2hhcGU6IFsxMF19KSk7XG4gICAqIG1vZGVsLmNvbXBpbGUoe2xvc3M6ICdtZWFuU3F1YXJlZEVycm9yJywgb3B0aW1pemVyOiAnc2dkJ30pO1xuICAgKiBjb25zdCB4cyA9IHRmLm9uZXMoWzgsIDEwXSk7XG4gICAqIGNvbnN0IHlzID0gdGYuemVyb3MoWzgsIDFdKTtcbiAgICpcbiAgICogY29uc3QgaGlzdG9yeSA9IGF3YWl0IG1vZGVsLmZpdCh4cywgeXMsIHtcbiAgICogICBlcG9jaHM6IDEwLFxuICAgKiAgIGNhbGxiYWNrczoge1xuICAgKiAgICAgb25FcG9jaEVuZDogYXN5bmMgKGVwb2NoLCBsb2dzKSA9PiB7XG4gICAqICAgICAgIGlmIChlcG9jaCA9PT0gMikge1xuICAgKiAgICAgICAgIG1vZGVsLnN0b3BUcmFpbmluZyA9IHRydWU7XG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyBUaGVyZSBzaG91bGQgYmUgb25seSAzIHZhbHVlcyBpbiB0aGUgbG9zcyBhcnJheSwgaW5zdGVhZCBvZiAxMCB2YWx1ZXMsXG4gICAqIC8vIGR1ZSB0byB0aGUgc3RvcHBpbmcgYWZ0ZXIgMyBlcG9jaHMuXG4gICAqIGNvbnNvbGUubG9nKGhpc3RvcnkuaGlzdG9yeS5sb3NzKTtcbiAgICogYGBgXG4gICAqL1xuICBzZXQgc3RvcFRyYWluaW5nKHN0b3A6IGJvb2xlYW4pIHtcbiAgICAvLyBUT0RPKGNhaXMpOiBXaGVuIHJlZmFjdG9yaW5nIHRvIHJlbW92ZSB0aGUgY29tcG9zaXRpb24gcGF0dGVybiBoYXBwZW5zLFxuICAgIC8vIHJlbW92ZSB0aGlzIG1ldGhvZCBvdmVycmlkaW5nLlxuICAgIGlmICh0aGlzLm1vZGVsID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICdDYW5ub3Qgc2V0IHRoZSBzdG9wVHJhaW5pbmcgcHJvcGVydHkgb2YgYSBzZXF1ZW50aWFsIG1vZGVsIGJlZm9yZSAnICtcbiAgICAgICAgICAnaXQgaXMgY29tcGlsZWQuJyk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwuc3RvcFRyYWluaW5nID0gc3RvcDtcbiAgfVxuXG4gIGdldCBzdG9wVHJhaW5pbmcoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMubW9kZWwgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoXG4gICAgICAgICAgJ0Nhbm5vdCBnZXQgdGhlIHN0b3BUcmFpbmluZyBwcm9wZXJ0eSBvZiBhIHNlcXVlbnRpYWwgbW9kZWwgYmVmb3JlICcgK1xuICAgICAgICAgICdpdCBpcyBjb21waWxlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuc3RvcFRyYWluaW5nO1xuICB9XG5cbiAgLy8gVE9ETyhjYWlzKTogT3ZlcnJpZGUgZ2V0IHRyYWluYWJsZVdlaWdodHMoKSBoZXJlXG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBnZXRDb25maWcoKTogYW55IHtcbiAgICAvLyBOT1RFKGNhaXMpOiBXZSBvdmVycmlkZSB0aGUgcmV0dXJuIHR5cGUgb2YgZ2V0Q29uZmlnKCkgdG8gYGFueWAgaGVyZSxcbiAgICAvLyAgIGJlY2F1c2UgdGhlIGBTZXF1ZW50aWFsYCBjbGFzcyBpcyBhIHNwZWNpYWwgY2FzZSBhbW9uZyBgQ29udGFpbmVyYFxuICAgIC8vICAgc3VidHlwZXMgaW4gdGhhdCBpdHMgZ2V0Q29uZmlnKCkgbWV0aG9kIHJldHVybnMgYW4gQXJyYXkgKG5vdCBhXG4gICAgLy8gICBkaWN0KS5cbiAgICBjb25zdCBsYXllcnM6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdFtdID0gW107XG4gICAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLmxheWVycykge1xuICAgICAgY29uc3QgZGljdDogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0ID0ge307XG4gICAgICBkaWN0WydjbGFzc05hbWUnXSA9IGxheWVyLmdldENsYXNzTmFtZSgpO1xuICAgICAgZGljdFsnY29uZmlnJ10gPSBsYXllci5nZXRDb25maWcoKTtcbiAgICAgIGxheWVycy5wdXNoKGRpY3QpO1xuICAgIH1cbiAgICByZXR1cm4ge25hbWU6IHRoaXMubmFtZSwgbGF5ZXJzfTtcbiAgfVxufVxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFNlcXVlbnRpYWwpO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport class Activation extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x: Input.\n     * @param alpha: Scaling factor the negative section.\n     * @return Output of the ELU activation.\n     */\n    apply(x, alpha = 1) {\n        return K.elu(x, alpha);\n    }\n}\n/** @nocollapse */\nElu.className = 'elu';\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n    apply(x) {\n        return tfc.selu(x);\n    }\n}\n/** @nocollapse */\nSelu.className = 'selu';\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n    apply(x) {\n        return tfc.relu(x);\n    }\n}\n/** @nocollapse */\nRelu.className = 'relu';\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n    apply(x) {\n        return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n    }\n}\n/** @nocollapse */\nRelu6.className = 'relu6';\nserialization.registerClass(Relu6);\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n    apply(x) {\n        return x;\n    }\n}\n/** @nocollapse */\nLinear.className = 'linear';\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n    apply(x) {\n        return tfc.sigmoid(x);\n    }\n}\n/** @nocollapse */\nSigmoid.className = 'sigmoid';\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n    apply(x) {\n        return K.hardSigmoid(x);\n    }\n}\n/** @nocollapse */\nHardSigmoid.className = 'hardSigmoid';\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n    apply(x) {\n        return tfc.softplus(x);\n    }\n}\n/** @nocollapse */\nSoftplus.className = 'softplus';\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n    apply(x) {\n        return K.softsign(x);\n    }\n}\n/** @nocollapse */\nSoftsign.className = 'softsign';\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n    apply(x) {\n        return tfc.tanh(x);\n    }\n}\n/** @nocollapse */\nTanh.className = 'tanh';\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.softmax(x, axis);\n    }\n}\n/** @nocollapse */\nSoftmax.className = 'softmax';\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n    /**\n     * Calculate the activation function of log softmax:\n     * log( exp(x_i) / sum(exp(x)) )\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.logSoftmax(x, axis);\n    }\n}\n/** @nocollapse */\nLogSoftmax.className = 'logSoftmax';\nserialization.registerClass(LogSoftmax);\n/**\n * Swish activation function\n */\nexport class Swish extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param alpha Scaling factor for the sigmoid function.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x, alpha = 1) {\n        return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n    }\n}\n/** @nocollapse */\nSwish.className = 'swish';\nserialization.registerClass(Swish);\n/**\n * Mish activation function\n */\nexport class Mish extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x) {\n        return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n    }\n}\n/** @nocollapse */\nMish.className = 'mish';\nserialization.registerClass(Mish);\nexport function serializeActivation(activation) {\n    return activation.getClassName();\n}\nexport function deserializeActivation(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n    if (identifier == null) {\n        const config = {};\n        config['className'] = 'linear';\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    if (typeof identifier === 'string') {\n        const config = {};\n        config['className'] = identifier;\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    else if (identifier instanceof Activation) {\n        return identifier;\n    }\n    else {\n        return deserializeActivation(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvYWN0aXZhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFFSCw2QkFBNkI7QUFDN0IsT0FBTyxLQUFLLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQztBQUM3QyxPQUFPLEVBQUMsYUFBYSxFQUFVLElBQUksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sS0FBSyxDQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFNUMsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFN0Q7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFnQixVQUFXLFNBQVEsYUFBYSxDQUFDLFlBQVk7SUFFakUsU0FBUztRQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztDQUNGO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLEdBQUksU0FBUSxVQUFVO0lBR2pDOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxDQUFTLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFDeEIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDOztBQVhELGtCQUFrQjtBQUNGLGFBQVMsR0FBRyxLQUFLLENBQUM7QUFZcEMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVqQzs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sSUFBSyxTQUFRLFVBQVU7SUFHbEMsS0FBSyxDQUFDLENBQVM7UUFDYixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQzs7QUFKRCxrQkFBa0I7QUFDRixjQUFTLEdBQUcsTUFBTSxDQUFDO0FBS3JDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbEM7O0dBRUc7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b3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vLyBMYXllciBhY3RpdmF0aW9uIGZ1bmN0aW9uc1xuaW1wb3J0ICogYXMgdGZjIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5pbXBvcnQge3NlcmlhbGl6YXRpb24sIFRlbnNvciwgdGlkeX0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCAqIGFzIEsgZnJvbSAnLi9iYWNrZW5kL3RmanNfYmFja2VuZCc7XG5pbXBvcnQge0FjdGl2YXRpb25JZGVudGlmaWVyfSBmcm9tICcuL2tlcmFzX2Zvcm1hdC9hY3RpdmF0aW9uX2NvbmZpZyc7XG5pbXBvcnQge2Rlc2VyaWFsaXplS2VyYXNPYmplY3R9IGZyb20gJy4vdXRpbHMvZ2VuZXJpY191dGlscyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgQWN0aXZhdGlvbnMuXG4gKlxuICogU3BlY2lhbCBub3RlOiBkdWUgdG8gY3Jvc3MtbGFuZ3VhZ2UgY29tcGF0aWJpbGl0eSByZWFzb25zLCB0aGVcbiAqIHN0YXRpYyByZWFkb25seSBjbGFzc05hbWUgZmllbGQgaW4gdGhpcyBmYW1pbHkgb2YgY2xhc3NlcyBtdXN0IGJlIHNldCB0b1xuICogdGhlIGluaXRpYWxMb3dlckNhbWVsQ2FzZSBuYW1lIG9mIHRoZSBhY3RpdmF0aW9uLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aXZhdGlvbiBleHRlbmRzIHNlcmlhbGl6YXRpb24uU2VyaWFsaXphYmxlIHtcbiAgYWJzdHJhY3QgYXBwbHkodGVuc29yOiBUZW5zb3IsIGF4aXM/OiBudW1iZXIpOiBUZW5zb3I7XG4gIGdldENvbmZpZygpOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3Qge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9uZW50aWFsIGxpbmVhciB1bml0IChFTFUpLlxuICogUmVmZXJlbmNlOiBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTUxMS4wNzI4OVxuICovXG5leHBvcnQgY2xhc3MgRWx1IGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ2VsdSc7XG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGFjdGl2YXRpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB4OiBJbnB1dC5cbiAgICogQHBhcmFtIGFscGhhOiBTY2FsaW5nIGZhY3RvciB0aGUgbmVnYXRpdmUgc2VjdGlvbi5cbiAgICogQHJldHVybiBPdXRwdXQgb2YgdGhlIEVMVSBhY3RpdmF0aW9uLlxuICAgKi9cbiAgYXBwbHkoeDogVGVuc29yLCBhbHBoYSA9IDEpOiBUZW5zb3Ige1xuICAgIHJldHVybiBLLmVsdSh4LCBhbHBoYSk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhFbHUpO1xuXG4vKipcbiAqIFNjYWxlZCBFeHBvbmVudGlhbCBMaW5lYXIgVW5pdC4gKEtsYW1iYXVlciBldCBhbC4sIDIwMTcpLlxuICogUmVmZXJlbmNlOiBTZWxmLU5vcm1hbGl6aW5nIE5ldXJhbCBOZXR3b3JrcywgaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE3MDYuMDI1MTVcbiAqIE5vdGVzOlxuICogICAtIFRvIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB0aGUgaW5pdGlhbGl6YXRpb24gXCJsZWN1bk5vcm1hbFwiLlxuICogICAtIFRvIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB0aGUgZHJvcG91dCB2YXJpYW50IFwiQWxwaGFEcm9wb3V0XCIuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWx1IGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ3NlbHUnO1xuICBhcHBseSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0ZmMuc2VsdSh4KTtcbiAgfVxufVxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFNlbHUpO1xuXG4vKipcbiAqICBSZWN0aWZpZWQgbGluZWFyIHVuaXRcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbHUgZXh0ZW5kcyBBY3RpdmF0aW9uIHtcbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHN0YXRpYyByZWFkb25seSBjbGFzc05hbWUgPSAncmVsdSc7XG4gIGFwcGx5KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRmYy5yZWx1KHgpO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoUmVsdSk7XG5cbi8qKlxuICogUmVjdGlmaWVkIGxpbmVhciB1bml0IGFjdGl2YXRpb24gbWF4aW5nIG91dCBhdCA2LjAuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWx1NiBleHRlbmRzIEFjdGl2YXRpb24ge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIHJlYWRvbmx5IGNsYXNzTmFtZSA9ICdyZWx1Nic7XG4gIGFwcGx5KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRpZHkoKCkgPT4gdGZjLm1pbmltdW0oNi4wLCB0ZmMucmVsdSh4KSkpO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoUmVsdTYpO1xuXG4vLyogTGluZWFyIGFjdGl2YXRpb24gKG5vLW9wKSAqL1xuZXhwb3J0IGNsYXNzIExpbmVhciBleHRlbmRzIEFjdGl2YXRpb24ge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIHJlYWRvbmx5IGNsYXNzTmFtZSA9ICdsaW5lYXInO1xuICBhcHBseSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB4O1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoTGluZWFyKTtcblxuLyoqXG4gKiBTaWdtb2lkIGFjdGl2YXRpb24gZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdtb2lkIGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ3NpZ21vaWQnO1xuICBhcHBseSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0ZmMuc2lnbW9pZCh4KTtcbiAgfVxufVxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFNpZ21vaWQpO1xuXG4vKipcbiAqIFNlZ21lbnQtd2lzZSBsaW5lYXIgYXBwcm94aW1hdGlvbiBvZiBzaWdtb2lkLlxuICovXG5leHBvcnQgY2xhc3MgSGFyZFNpZ21vaWQgZXh0ZW5kcyBBY3RpdmF0aW9uIHtcbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHN0YXRpYyByZWFkb25seSBjbGFzc05hbWUgPSAnaGFyZFNpZ21vaWQnO1xuICBhcHBseSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiBLLmhhcmRTaWdtb2lkKHgpO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoSGFyZFNpZ21vaWQpO1xuXG4vKipcbiAqIFNvZnRwbHVzIGFjdGl2YXRpb24gZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTb2Z0cGx1cyBleHRlbmRzIEFjdGl2YXRpb24ge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIHJlYWRvbmx5IGNsYXNzTmFtZSA9ICdzb2Z0cGx1cyc7XG4gIGFwcGx5KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRmYy5zb2Z0cGx1cyh4KTtcbiAgfVxufVxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFNvZnRwbHVzKTtcblxuLyoqXG4gKiBTb2Z0c2lnbiBhY3RpdmF0aW9uIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU29mdHNpZ24gZXh0ZW5kcyBBY3RpdmF0aW9uIHtcbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHN0YXRpYyByZWFkb25seSBjbGFzc05hbWUgPSAnc29mdHNpZ24nO1xuICBhcHBseSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiBLLnNvZnRzaWduKHgpO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoU29mdHNpZ24pO1xuXG4vKipcbiAqIEh5cGVyYm9saWMgdGFuZ2VudCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFRhbmggZXh0ZW5kcyBBY3RpdmF0aW9uIHtcbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHN0YXRpYyByZWFkb25seSBjbGFzc05hbWUgPSAndGFuaCc7XG4gIGFwcGx5KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRmYy50YW5oKHgpO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoVGFuaCk7XG5cbi8qKlxuICogU29mdG1heCBhY3RpdmF0aW9uIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBTb2Z0bWF4IGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ3NvZnRtYXgnO1xuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhY3RpdmF0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geCBUZW5zb3IuXG4gICAqIEBwYXJhbSBheGlzIEludGVnZXIsIGF4aXMgYWxvbmcgd2hpY2ggdGhlIHNvZnRtYXggbm9ybWFsaXphdGlvbiBpcyBhcHBsaWVkLlxuICAgKiBJbnZhbGlkIGlmIDwgMiwgYXMgc29mdG1heCBhY3Jvc3MgMSAodGhlIGJhdGNoIGRpbWVuc2lvbikgaXMgYXNzdW1lZCB0byBiZVxuICAgKiBhbiBlcnJvci5cbiAgICpcbiAgICogQHJldHVybnMgYSBUZW5zb3Igb2YgdGhlIHNhbWUgc2hhcGUgYXMgeFxuICAgKlxuICAgKiBAdGhyb3dzIFZhbHVlRXJyb3I6IEluIGNhc2UgYGRpbSh4KSA8IDJgLlxuICAgKi9cbiAgYXBwbHkoeDogVGVuc29yLCBheGlzOiBudW1iZXIgPSAoLTEpKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGZjLnNvZnRtYXgoeCwgYXhpcyk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhTb2Z0bWF4KTtcblxuLyoqXG4gKiBMb2cgc29mdG1heCBhY3RpdmF0aW9uIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dTb2Z0bWF4IGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ2xvZ1NvZnRtYXgnO1xuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhY3RpdmF0aW9uIGZ1bmN0aW9uIG9mIGxvZyBzb2Z0bWF4OlxuICAgKiBsb2coIGV4cCh4X2kpIC8gc3VtKGV4cCh4KSkgKVxuICAgKlxuICAgKiBAcGFyYW0geCBUZW5zb3IuXG4gICAqIEBwYXJhbSBheGlzIEludGVnZXIsIGF4aXMgYWxvbmcgd2hpY2ggdGhlIHNvZnRtYXggbm9ybWFsaXphdGlvbiBpcyBhcHBsaWVkLlxuICAgKiBJbnZhbGlkIGlmIDwgMiwgYXMgc29mdG1heCBhY3Jvc3MgMSAodGhlIGJhdGNoIGRpbWVuc2lvbikgaXMgYXNzdW1lZCB0byBiZVxuICAgKiBhbiBlcnJvci5cbiAgICpcbiAgICogQHJldHVybnMgYSBUZW5zb3Igb2YgdGhlIHNhbWUgc2hhcGUgYXMgeFxuICAgKlxuICAgKiBAdGhyb3dzIFZhbHVlRXJyb3I6IEluIGNhc2UgYGRpbSh4KSA8IDJgLlxuICAgKi9cbiAgYXBwbHkoeDogVGVuc29yLCBheGlzOiBudW1iZXIgPSAoLTEpKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGZjLmxvZ1NvZnRtYXgoeCwgYXhpcyk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhMb2dTb2Z0bWF4KTtcblxuLyoqXG4gKiBTd2lzaCBhY3RpdmF0aW9uIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBTd2lzaCBleHRlbmRzIEFjdGl2YXRpb24ge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIHJlYWRvbmx5IGNsYXNzTmFtZSA9ICdzd2lzaCc7XG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGFjdGl2YXRpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB4IFRlbnNvci5cbiAgICogQHBhcmFtIGFscGhhIFNjYWxpbmcgZmFjdG9yIGZvciB0aGUgc2lnbW9pZCBmdW5jdGlvbi5cbiAgICogQHJldHVybnMgYSBUZW5zb3Igb2YgdGhlIHNhbWUgc2hhcGUgYXMgeFxuICAgKi9cbiAgYXBwbHkoeDogVGVuc29yLCBhbHBoYSA9IDEpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aWR5KCgpID0+IHRmYy5tdWwodGZjLnNpZ21vaWQodGZjLm11bCh4LCBhbHBoYSkpLCB4KSk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhTd2lzaCk7XG5cbi8qKlxuICogTWlzaCBhY3RpdmF0aW9uIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBNaXNoIGV4dGVuZHMgQWN0aXZhdGlvbiB7XG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkgY2xhc3NOYW1lID0gJ21pc2gnO1xuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhY3RpdmF0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geCBUZW5zb3IuXG4gICAqIEByZXR1cm5zIGEgVGVuc29yIG9mIHRoZSBzYW1lIHNoYXBlIGFzIHhcbiAgICovXG4gIGFwcGx5KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRpZHkoKCkgPT4gdGZjLm11bCh4LCB0ZmMudGFuaCh0ZmMuc29mdHBsdXMoeCkpKSk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhNaXNoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUFjdGl2YXRpb24oYWN0aXZhdGlvbjogQWN0aXZhdGlvbik6IHN0cmluZyB7XG4gIHJldHVybiBhY3RpdmF0aW9uLmdldENsYXNzTmFtZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVBY3RpdmF0aW9uKFxuICAgIGNvbmZpZzogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0LFxuICAgIGN1c3RvbU9iamVjdHM6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCA9IHt9KTogQWN0aXZhdGlvbiB7XG4gIHJldHVybiBkZXNlcmlhbGl6ZUtlcmFzT2JqZWN0KFxuICAgICAgY29uZmlnLCBzZXJpYWxpemF0aW9uLlNlcmlhbGl6YXRpb25NYXAuZ2V0TWFwKCkuY2xhc3NOYW1lTWFwLFxuICAgICAgY3VzdG9tT2JqZWN0cywgJ2FjdGl2YXRpb24nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2YXRpb24oaWRlbnRpZmllcjogQWN0aXZhdGlvbklkZW50aWZpZXJ8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3R8QWN0aXZhdGlvbik6IEFjdGl2YXRpb24ge1xuICBpZiAoaWRlbnRpZmllciA9PSBudWxsKSB7XG4gICAgY29uc3QgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgPSB7fTtcbiAgICBjb25maWdbJ2NsYXNzTmFtZSddID0gJ2xpbmVhcic7XG4gICAgY29uZmlnWydjb25maWcnXSA9IHt9O1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZUFjdGl2YXRpb24oY29uZmlnKTtcbiAgfVxuICBpZiAodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgPSB7fTtcbiAgICBjb25maWdbJ2NsYXNzTmFtZSddID0gaWRlbnRpZmllcjtcbiAgICBjb25maWdbJ2NvbmZpZyddID0ge307XG4gICAgcmV0dXJuIGRlc2VyaWFsaXplQWN0aXZhdGlvbihjb25maWcpO1xuICB9IGVsc2UgaWYgKGlkZW50aWZpZXIgaW5zdGFuY2VvZiBBY3RpdmF0aW9uKSB7XG4gICAgcmV0dXJuIGlkZW50aWZpZXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlc2VyaWFsaXplQWN0aXZhdGlvbihpZGVudGlmaWVyKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n    if (args != null && typeof args !== 'object') {\n        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` +\n            `object, but received: ${args}`);\n    }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {\n}\nexport class L1L2 extends Regularizer {\n    constructor(args) {\n        super();\n        assertObjectArgs(args);\n        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n        this.hasL1 = this.l1 !== 0;\n        this.hasL2 = this.l2 !== 0;\n    }\n    /**\n     * Porting note: Renamed from __call__.\n     * @param x Variable of which to calculate the regularization score.\n     */\n    apply(x) {\n        return tidy(() => {\n            let regularization = zeros([1]);\n            if (this.hasL1) {\n                regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n            }\n            if (this.hasL2) {\n                regularization =\n                    add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n            }\n            return tfc.reshape(regularization, []);\n        });\n    }\n    getConfig() {\n        return { 'l1': this.l1, 'l2': this.l2 };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls({ l1: config['l1'], l2: config['l2'] });\n    }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nexport function l2(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeRegularizer(config);\n    }\n    else if (identifier instanceof Regularizer) {\n        return identifier;\n    }\n    else {\n        return deserializeRegularizer(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n *  Advanced activation layers.\n */\nimport { cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization } from '@tensorflow/tfjs-core';\nimport { Softmax as softmaxActivation } from '../activations';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class ReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.supportsMasking = true;\n        if (args != null) {\n            this.maxValue = args.maxValue;\n        }\n    }\n    call(inputs, kwargs) {\n        inputs = getExactlyOneTensor(inputs);\n        let output = relu(inputs);\n        if (this.maxValue != null) {\n            output = clipByValue(output, 0, this.maxValue);\n        }\n        return output;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { maxValue: this.maxValue };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nReLU.className = 'ReLU';\nserialization.registerClass(ReLU);\nexport class LeakyReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA = 0.3;\n        if (args == null) {\n            args = {};\n        }\n        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return leakyRelu(x, this.alpha);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { alpha: this.alpha };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nLeakyReLU.className = 'LeakyReLU';\nserialization.registerClass(LeakyReLU);\nexport class PReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA_INITIALIZER = 'zeros';\n        if (args == null) {\n            args = {};\n        }\n        this.supportsMasking = true;\n        this.alphaInitializer =\n            getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n        this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n        this.alphaConstraint = getConstraint(args.alphaConstraint);\n        if (args.sharedAxes == null) {\n            this.sharedAxes = null;\n        }\n        else if (Array.isArray(args.sharedAxes)) {\n            this.sharedAxes = args.sharedAxes;\n        }\n        else if (typeof args.sharedAxes === 'number') {\n            this.sharedAxes = [args.sharedAxes];\n        }\n        else {\n            throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, ` +\n                `but got ${args.sharedAxes}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const paramShape = inputShape.slice(1);\n        if (this.sharedAxes != null) {\n            for (const i of this.sharedAxes) {\n                paramShape[i - 1] = 1;\n            }\n        }\n        this.alpha = this.addWeight('alpha', paramShape, 'float32', this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);\n        // Set input spec.\n        const axes = {};\n        if (this.sharedAxes != null) {\n            for (let i = 1; i < inputShape.length; ++i) {\n                axes[i] = inputShape[i];\n            }\n        }\n        this.inputSpec = [new InputSpec({\n                ndim: inputShape.length,\n                axes,\n            })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        inputs = getExactlyOneTensor(inputs);\n        return prelu(inputs, this.alpha.read());\n    }\n    getConfig() {\n        const config = {\n            alphaInitializer: serializeInitializer(this.alphaInitializer),\n            alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n            alphaConstraint: serializeConstraint(this.alphaConstraint),\n            sharedAxes: this.sharedAxes\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nPReLU.className = 'PReLU';\nserialization.registerClass(PReLU);\nexport class ELU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n            throw new NotImplementedError(`Non-default alpha value (${args.alpha}) is not supported by the ` +\n                `ELU layer yet.`);\n        }\n        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return elu(x);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { alpha: this.alpha };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nELU.className = 'ELU';\nserialization.registerClass(ELU);\nexport class ThresholdedReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_THETA = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return mul(x, cast(greater(x, this.theta), 'float32'));\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { theta: this.theta };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nThresholdedReLU.className = 'ThresholdedReLU';\nserialization.registerClass(ThresholdedReLU);\nexport class Softmax extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_AXIS = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        this.softmax = new softmaxActivation().apply;\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return this.softmax(x, this.axis);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { axis: this.axis };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nSoftmax.className = 'Softmax';\nserialization.registerClass(Softmax);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` +\n                ` Received: ${value.length} elements.`);\n        }\n        for (let i = 0; i < n; ++i) {\n            const singleValue = value[i];\n            if (!isInteger(singleValue)) {\n                throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` +\n                    ` integers. Received: ${JSON.stringify(value)} including a` +\n                    ` non-integer number ${singleValue}`);\n            }\n        }\n        return value;\n    }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n    if (inputLength == null) {\n        return inputLength;\n    }\n    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    let outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else { // VALID\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new ValueError(`Unsupport padding mode: ${padding}.`);\n    }\n    return dimSize;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udl91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy91dGlscy9jb252X3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUdyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFNUM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FDMUIsS0FBc0IsRUFBRSxDQUFTLEVBQUUsSUFBWTtJQUNqRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDL0I7U0FBTTtRQUNMLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxJQUFJLFVBQVUsQ0FDaEIsT0FBTyxJQUFJLDRDQUE0QyxDQUFDLFlBQVk7Z0JBQ3BFLGNBQWMsS0FBSyxDQUFDLE1BQU0sWUFBWSxDQUFDLENBQUM7U0FDN0M7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLElBQUksVUFBVSxDQUNoQixPQUFPLElBQUksNENBQTRDLENBQUMsRUFBRTtvQkFDMUQsd0JBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWM7b0JBQzNELHVCQUF1QixXQUFXLEVBQUUsQ0FBQyxDQUFDO2FBQzNDO1NBQ0Y7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQzVCLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxPQUFvQixFQUM3RCxNQUFjLEVBQUUsUUFBUSxHQUFHLENBQUM7SUFDOUIsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1FBQ3ZCLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLEdBQUcsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekUsSUFBSSxZQUFvQixDQUFDO0lBQ3pCLElBQUksT0FBTyxLQUFLLE1BQU0sRUFBRTtRQUN0QixZQUFZLEdBQUcsV0FBVyxDQUFDO0tBQzVCO1NBQU0sRUFBRyxRQUFRO1FBQ2hCLFlBQVksR0FBRyxXQUFXLEdBQUcsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FDeEIsT0FBZSxFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFDdkQsT0FBb0I7SUFDdEIsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE9BQU8sS0FBSyxPQUFPLEVBQUU7UUFDdkIsT0FBTyxHQUFHLE9BQU8sR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxHQUFHLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BFO1NBQU0sSUFBSSxPQUFPLEtBQUssTUFBTSxFQUFFO1FBQzdCLE9BQU8sR0FBRyxPQUFPLEdBQUcsVUFBVSxDQUFDO0tBQ2hDO1NBQU07UUFDTCxNQUFNLElBQUksVUFBVSxDQUFDLDJCQUEyQixPQUFPLEdBQUcsQ0FBQyxDQUFDO0tBQzdEO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VmFsdWVFcnJvcn0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7UGFkZGluZ01vZGV9IGZyb20gJy4uL2tlcmFzX2Zvcm1hdC9jb21tb24nO1xuXG5pbXBvcnQge3B5TGlzdFJlcGVhdH0gZnJvbSAnLi9nZW5lcmljX3V0aWxzJztcbmltcG9ydCB7aXNJbnRlZ2VyLCBtYXh9IGZyb20gJy4vbWF0aF91dGlscyc7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhIHNpbmdsZSBudW1iZXIgb2YgYXJyYXkgb2YgbnVtYmVycyBpbnRvIGFuIGFycmF5IG9mIG51bWJlcnMuXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBuOiBUaGUgc2l6ZSBvZiB0aGUgdHVwbGUgdG8gYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0gbmFtZTogTmFtZSBvZiB0aGUgcGFyYW1ldGVyLCB1c2VkIGZvciBnZW5lcmF0aW5nIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgbnVtYmVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KFxuICAgIHZhbHVlOiBudW1iZXJ8bnVtYmVyW10sIG46IG51bWJlciwgbmFtZTogc3RyaW5nKTogbnVtYmVyW10ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBweUxpc3RSZXBlYXQodmFsdWUsIG4pO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IG4pIHtcbiAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgIGBUaGUgJHtuYW1lfSBhcmd1bWVudCBtdXN0IGJlIGFuIGludGVnZXIgb3IgdHVwbGUgb2YgJHtufSBpbnRlZ2Vycy5gICtcbiAgICAgICAgICBgIFJlY2VpdmVkOiAke3ZhbHVlLmxlbmd0aH0gZWxlbWVudHMuYCk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCBzaW5nbGVWYWx1ZSA9IHZhbHVlW2ldO1xuICAgICAgaWYgKCFpc0ludGVnZXIoc2luZ2xlVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgYFRoZSAke25hbWV9IGFyZ3VtZW50IG11c3QgYmUgYW4gaW50ZWdlciBvciB0dXBsZSBvZiAke259YCArXG4gICAgICAgICAgICBgIGludGVnZXJzLiBSZWNlaXZlZDogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9IGluY2x1ZGluZyBhYCArXG4gICAgICAgICAgICBgIG5vbi1pbnRlZ2VyIG51bWJlciAke3NpbmdsZVZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIG91dHB1dCBsZW5ndGggb2YgYSBjb252b2x1dGlvbiBnaXZlbiBpbnB1dCBsZW5ndGguXG4gKiBAcGFyYW0gaW5wdXRMZW5ndGhcbiAqIEBwYXJhbSBmaWx0ZXJTaXplXG4gKiBAcGFyYW0gcGFkZGluZ1xuICogQHBhcmFtIHN0cmlkZVxuICogQHBhcmFtIGRpbGF0aW9uOiBkaWxhdGlvbiByYXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udk91dHB1dExlbmd0aChcbiAgICBpbnB1dExlbmd0aDogbnVtYmVyLCBmaWx0ZXJTaXplOiBudW1iZXIsIHBhZGRpbmc6IFBhZGRpbmdNb2RlLFxuICAgIHN0cmlkZTogbnVtYmVyLCBkaWxhdGlvbiA9IDEpOiBudW1iZXIge1xuICBpZiAoaW5wdXRMZW5ndGggPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnB1dExlbmd0aDtcbiAgfVxuICBjb25zdCBkaWxhdGVkRmlsdGVyU2l6ZSA9IGZpbHRlclNpemUgKyAoZmlsdGVyU2l6ZSAtIDEpICogKGRpbGF0aW9uIC0gMSk7XG4gIGxldCBvdXRwdXRMZW5ndGg6IG51bWJlcjtcbiAgaWYgKHBhZGRpbmcgPT09ICdzYW1lJykge1xuICAgIG91dHB1dExlbmd0aCA9IGlucHV0TGVuZ3RoO1xuICB9IGVsc2UgeyAgLy8gVkFMSURcbiAgICBvdXRwdXRMZW5ndGggPSBpbnB1dExlbmd0aCAtIGRpbGF0ZWRGaWx0ZXJTaXplICsgMTtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcigob3V0cHV0TGVuZ3RoICsgc3RyaWRlIC0gMSkgLyBzdHJpZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb252TGVuZ3RoKFxuICAgIGRpbVNpemU6IG51bWJlciwgc3RyaWRlU2l6ZTogbnVtYmVyLCBrZXJuZWxTaXplOiBudW1iZXIsXG4gICAgcGFkZGluZzogUGFkZGluZ01vZGUpOiBudW1iZXIge1xuICBpZiAoZGltU2l6ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocGFkZGluZyA9PT0gJ3ZhbGlkJykge1xuICAgIGRpbVNpemUgPSBkaW1TaXplICogc3RyaWRlU2l6ZSArIG1heChba2VybmVsU2l6ZSAtIHN0cmlkZVNpemUsIDBdKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAnc2FtZScpIHtcbiAgICBkaW1TaXplID0gZGltU2l6ZSAqIHN0cmlkZVNpemU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoYFVuc3VwcG9ydCBwYWRkaW5nIG1vZGU6ICR7cGFkZGluZ30uYCk7XG4gIH1cbiAgcmV0dXJuIGRpbVNpemU7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` +\n                `${x.shape.length} instead.`);\n        }\n        if (kernel.shape.length !== 3) {\n            throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias,\n            activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        let y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n    constructor(rank, args) {\n        super(args);\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        this.rank = rank;\n        generic_utils.assertPositiveInteger(this.rank, 'rank');\n        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n            throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` +\n                `not implemented yet.`);\n        }\n        this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n        this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.activation = getActivation(args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (this.rank === 1 &&\n            (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n            throw new ValueError(`dilationRate must be a number or an array of a single number ` +\n                `for 1D convolution, but received ` +\n                `${JSON.stringify(this.dilationRate)}`);\n        }\n        else if (this.rank === 2) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate = [this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 2) {\n                throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n        else if (this.rank === 3) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate =\n                    [this.dilationRate, this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 3) {\n                throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n    }\n    static verifyArgs(args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` +\n                `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n    getConfig() {\n        const config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n    constructor(rank, args) {\n        super(rank, args);\n        this.kernel = null;\n        Conv.verifyArgs(args);\n        this.filters = args.filters;\n        generic_utils.assertPositiveInteger(this.filters, 'filters');\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs;\n            const biasValue = this.bias == null ? null : this.bias.read();\n            const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n            if (fusedActivationName != null && this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n                }\n                else if (this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else if (this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else {\n                    throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (this.activation != null) {\n                    outputs = this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const newSpace = [];\n        const space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (let i = 0; i < space.length; ++i) {\n            const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        let outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    }\n    getConfig() {\n        const config = {\n            filters: this.filters,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    static verifyArgs(args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` +\n                `but got ${JSON.stringify(args.filters)}`);\n        }\n    }\n}\nexport class Conv2D extends Conv {\n    constructor(args) {\n        super(2, args);\n        Conv2D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` +\n                `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n    constructor(args) {\n        super(3, args);\n        Conv3D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new ValueError(`Conv3D expects config.kernelSize to be number or` +\n                    ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n            }\n        }\n    }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelH = this.kernelSize[0];\n            const kernelW = this.kernelSize[1];\n            const strideH = this.strides[0];\n            const strideW = this.strides[1];\n            // Infer the dynamic output shape.\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            const outputShape = [batchSize, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        const kernelH = this.kernelSize[0];\n        const kernelW = this.kernelSize[1];\n        const strideH = this.strides[0];\n        const strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class Conv3DTranspose extends Conv3D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 5) {\n            throw new ValueError('Input should have rank 5; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 5, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 5) {\n                throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            let dAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                dAxis = 2;\n                hAxis = 3;\n                wAxis = 4;\n            }\n            else {\n                dAxis = 1;\n                hAxis = 2;\n                wAxis = 3;\n            }\n            const depth = inputShape[dAxis];\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelD = this.kernelSize[0];\n            const kernelH = this.kernelSize[1];\n            const kernelW = this.kernelSize[2];\n            const strideD = this.strides[0];\n            const strideH = this.strides[1];\n            const strideW = this.strides[2];\n            // Infer the dynamic output shape.\n            const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Same as `conv2dTranspose`. We always assumes channelsLast.\n            const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n            }\n            let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n            }\n            if (this.bias !== null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation !== null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let depthAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            depthAxis = 2;\n            heightAxis = 3;\n            widthAxis = 4;\n        }\n        else {\n            channelAxis = 4;\n            depthAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        const kernelD = this.kernelSize[0];\n        const kernelH = this.kernelSize[1];\n        const kernelW = this.kernelSize[2];\n        const strideD = this.strides[0];\n        const strideH = this.strides[1];\n        const strideW = this.strides[2];\n        outputShape[channelAxis] = this.filters;\n        outputShape[depthAxis] =\n            deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport class SeparableConv extends Conv {\n    constructor(rank, config) {\n        super(rank, config);\n        this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        this.depthwiseKernel = null;\n        this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` +\n                `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n        }\n        this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n        this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n        this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n        this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n        this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n        this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` +\n                `${this.rank + 2}, but received input shape: ` +\n                `${JSON.stringify(inputShape)}`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError(`The channel dimension of the inputs should be defined, ` +\n                `but found ${JSON.stringify(inputShape[channelAxis])}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        const pointwiseKernelShape = [];\n        for (let i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        const trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let output;\n            if (this.rank === 1) {\n                throw new NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (this.rank === 2) {\n                if (this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n            }\n            if (this.useBias) {\n                output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            if (this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            serializeConstraint(this.pointwiseConstraint);\n        return config;\n    }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n    constructor(args) {\n        super(2, args);\n    }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n    constructor(args) {\n        super(1, args);\n        Conv1D.verifyArgs(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` +\n                `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n    constructor(args) {\n        super(args);\n        if (typeof args.cropping === 'number') {\n            this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            this.cropping = args.cropping;\n        }\n        this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        this.inputSpec = [{ ndim: 4 }];\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n            }\n            else {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n            }\n        });\n    }\n    getConfig() {\n        const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_SIZE = [2, 2];\n        this.inputSpec = [{ ndim: 4 }];\n        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.interpolation =\n            args.interpolation == null ? 'nearest' : args.interpolation;\n        checkInterpolationFormat(this.interpolation);\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            if (this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                const height = this.size[0] * inputShape[2];\n                const width = this.size[1] * inputShape[3];\n                const resized = this.interpolation === 'nearest' ?\n                    tfc.image.resizeNearestNeighbor(input, [height, width]) :\n                    tfc.image.resizeBilinear(input, [height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                const height = this.size[0] * inputShape[1];\n                const width = this.size[1] * inputShape[2];\n                return this.interpolation === 'nearest' ?\n                    tfc.image.resizeNearestNeighbor(input, [height, width]) :\n                    tfc.image.resizeBilinear(input, [height, width]);\n            }\n        });\n    }\n    getConfig() {\n        const config = {\n            size: this.size,\n            dataFormat: this.dataFormat,\n            interpolation: this.interpolation\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n                `${x.rank}-D`);\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` +\n                `${depthwiseKernel.rank}-D`);\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexport class DepthwiseConv2D extends BaseConv {\n    constructor(args) {\n        super(2, args);\n        this.depthwiseKernel = null;\n        this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n        this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` +\n                `Received input shape: ${JSON.stringify(inputShape)}.`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                `be defined, but is not (${inputShape[channelAxis]}).`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (this.useBias) {\n                outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        const outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    }\n    getConfig() {\n        const config = super.getConfig();\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n    if (Array.isArray(inputs)) {\n        if (initialState != null || constants != null) {\n            throw new ValueError('When inputs is an array, neither initialState or constants ' +\n                'should be provided');\n        }\n        if (numConstants != null) {\n            constants = inputs.slice(inputs.length - numConstants, inputs.length);\n            inputs = inputs.slice(0, inputs.length - numConstants);\n        }\n        if (inputs.length > 1) {\n            initialState = inputs.slice(1, inputs.length);\n        }\n        inputs = inputs[0];\n    }\n    function toListOrNull(x) {\n        if (x == null || Array.isArray(x)) {\n            return x;\n        }\n        else {\n            return [x];\n        }\n    }\n    initialState = toListOrNull(initialState);\n    constants = toListOrNull(constants);\n    return { inputs, initialState, constants };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n    return tfc.tidy(() => {\n        const ndim = inputs.shape.length;\n        if (ndim < 3) {\n            throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n        }\n        // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n        // ...].\n        const axes = [1, 0].concat(math_utils.range(2, ndim));\n        inputs = tfc.transpose(inputs, axes);\n        if (constants != null) {\n            throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' +\n                'constants yet.');\n        }\n        // Porting Note: the unroll option is ignored by the imperative backend.\n        if (unroll) {\n            console.warn('Backend rnn(): the unroll = true option is not applicable to the ' +\n                'imperative deeplearn.js backend.');\n        }\n        if (mask != null) {\n            mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n            if (mask.rank === ndim - 1) {\n                mask = tfc.expandDims(mask, -1);\n            }\n            mask = tfc.transpose(mask, axes);\n        }\n        if (goBackwards) {\n            inputs = tfc.reverse(inputs, 0);\n            if (mask != null) {\n                mask = tfc.reverse(mask, 0);\n            }\n        }\n        // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n        //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n        //   use the usual TypeScript control flow to iterate over the time steps in\n        //   the inputs.\n        // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n        // outputs.\n        //   This is not idiomatic in TypeScript. The info regarding whether we are\n        //   in a learning (i.e., training) phase for RNN is passed in a different\n        //   way.\n        const perStepOutputs = [];\n        let lastOutput;\n        let states = initialStates;\n        const timeSteps = inputs.shape[0];\n        const perStepInputs = tfc.unstack(inputs);\n        let perStepMasks;\n        if (mask != null) {\n            perStepMasks = tfc.unstack(mask);\n        }\n        for (let t = 0; t < timeSteps; ++t) {\n            const currentInput = perStepInputs[t];\n            const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n            if (mask == null) {\n                lastOutput = stepOutputs[0];\n                states = stepOutputs[1];\n            }\n            else {\n                const maskedOutputs = tfc.tidy(() => {\n                    const stepMask = perStepMasks[t];\n                    const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n                    // TODO(cais): Would tfc.where() be better for performance?\n                    const output = tfc.add(tfc.mul(stepOutputs[0], stepMask), tfc.mul(states[0], negStepMask));\n                    const newStates = states.map((state, i) => {\n                        return tfc.add(tfc.mul(stepOutputs[1][i], stepMask), tfc.mul(state, negStepMask));\n                    });\n                    return { output, newStates };\n                });\n                lastOutput = maskedOutputs.output;\n                states = maskedOutputs.newStates;\n            }\n            if (needPerStepOutputs) {\n                perStepOutputs.push(lastOutput);\n            }\n        }\n        let outputs;\n        if (needPerStepOutputs) {\n            const axis = 1;\n            outputs = tfc.stack(perStepOutputs, axis);\n        }\n        return [lastOutput, outputs, states];\n    });\n}\nexport class RNN extends Layer {\n    constructor(args) {\n        super(args);\n        let cell;\n        if (args.cell == null) {\n            throw new ValueError('cell property is missing for the constructor of RNN.');\n        }\n        else if (Array.isArray(args.cell)) {\n            cell = new StackedRNNCells({ cells: args.cell });\n        }\n        else {\n            cell = args.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +\n                'integers, one integer per RNN state).');\n        }\n        this.cell = cell;\n        this.returnSequences =\n            args.returnSequences == null ? false : args.returnSequences;\n        this.returnState = args.returnState == null ? false : args.returnState;\n        this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n        this._stateful = args.stateful == null ? false : args.stateful;\n        this.unroll = args.unroll == null ? false : args.unroll;\n        this.supportsMasking = true;\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n        this.stateSpec = null;\n        this.states_ = null;\n        // TODO(cais): Add constantsSpec and numConstants.\n        this.numConstants = null;\n        // TODO(cais): Look into the use of initial_state in the kwargs of the\n        //   constructor.\n        this.keptStates = [];\n    }\n    // Porting Note: This is the equivalent of `RNN.states` property getter in\n    //   PyKeras.\n    getStates() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return math_utils.range(0, numStates).map(x => null);\n        }\n        else {\n            return this.states_;\n        }\n    }\n    // Porting Note: This is the equivalent of the `RNN.states` property setter in\n    //   PyKeras.\n    setStates(states) {\n        this.states_ = states;\n    }\n    computeOutputShape(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        // TODO(cais): Remove the casting once stacked RNN cells become supported.\n        let stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        const outputDim = stateSize[0];\n        let outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        }\n        else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            const stateShape = [];\n            for (const dim of stateSize) {\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        }\n        else {\n            return outputShape;\n        }\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (Array.isArray(mask)) {\n                mask = mask[0];\n            }\n            const outputMask = this.returnSequences ? mask : null;\n            if (this.returnState) {\n                const stateMask = this.states.map(s => null);\n                return [outputMask].concat(stateMask);\n            }\n            else {\n                return outputMask;\n            }\n        });\n    }\n    /**\n     * Get the current state tensors of the RNN.\n     *\n     * If the state hasn't been set, return an array of `null`s of the correct\n     * length.\n     */\n    get states() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            const output = [];\n            for (let i = 0; i < numStates; ++i) {\n                output.push(null);\n            }\n            return output;\n        }\n        else {\n            return this.states_;\n        }\n    }\n    set states(s) {\n        this.states_ = s;\n    }\n    build(inputShape) {\n        // Note inputShape will be an Array of Shapes of initial states and\n        // constants if these are passed in apply().\n        const constantShape = null;\n        if (this.numConstants != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        const batchSize = this.stateful ? inputShape[0] : null;\n        const inputDim = inputShape.slice(2);\n        this.inputSpec[0] = new InputSpec({ shape: [batchSize, null, ...inputDim] });\n        // Allow cell (if RNNCell Layer) to build before we set or validate\n        // stateSpec.\n        const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        else {\n            this.cell.build(stepInputShape);\n        }\n        // Set or validate stateSpec.\n        let stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        }\n        else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n                throw new ValueError(`An initialState was passed that is not compatible with ` +\n                    `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n                    `However cell.stateSize is ${this.cell.stateSize}`);\n            }\n        }\n        else {\n            this.stateSpec =\n                stateSize.map(dim => new InputSpec({ shape: [null, dim] }));\n        }\n        if (this.stateful) {\n            this.resetStates();\n        }\n    }\n    /**\n     * Reset the state tensors of the RNN.\n     *\n     * If the `states` argument is `undefined` or `null`, will set the\n     * state tensor(s) of the RNN to all-zero tensors of the appropriate\n     * shape(s).\n     *\n     * If `states` is provided, will set the state tensors of the RNN to its\n     * value.\n     *\n     * @param states Optional externally-provided initial states.\n     * @param training Whether this call is done during training. For stateful\n     *   RNNs, this affects whether the old states are kept or discarded. In\n     *   particular, if `training` is `true`, the old states will be kept so\n     *   that subsequent backpropgataion through time (BPTT) may work properly.\n     *   Else, the old states will be discarded.\n     */\n    resetStates(states, training = false) {\n        tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const batchSize = this.inputSpec[0].shape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.states_ == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training === true) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const dim = Array.isArray(this.cell.stateSize) ?\n                        this.cell.stateSize[index] :\n                        this.cell.stateSize;\n                    const expectedShape = [batchSize, dim];\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    apply(inputs, kwargs) {\n        // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n        let initialState = kwargs == null ? null : kwargs['initialState'];\n        let constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        // If any of `initial_state` or `constants` are specified and are\n        // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n        // the input_spec to include them.\n        let additionalInputs = [];\n        let additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (const state of initialState) {\n                this.stateSpec.push(new InputSpec({ shape: state.shape }));\n            }\n            // TODO(cais): Use the following instead.\n            // this.stateSpec = initialState.map(state => new InputSpec({shape:\n            // state.shape}));\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            // TODO(cais): Add this.constantsSpec.\n            this.numConstants = constants.length;\n        }\n        const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n        if (isTensor) {\n            // Compute full input spec, including state and constants.\n            const fullInput = [inputs].concat(additionalInputs);\n            const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            // Perform the call with temporarily replaced inputSpec.\n            const originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            const output = super.apply(fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return super.apply(inputs, kwargs);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    call(inputs, kwargs) {\n        // Input shape: `[samples, time (padded with zeros), input_dim]`.\n        // Note that the .build() method of subclasses **must** define\n        // this.inputSpec and this.stateSpec owith complete input shapes.\n        return tidy(() => {\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            let initialState = kwargs == null ? null : kwargs['initialState'];\n            inputs = getExactlyOneTensor(inputs);\n            if (initialState == null) {\n                if (this.stateful) {\n                    initialState = this.states_;\n                }\n                else {\n                    initialState = this.getInitialState(inputs);\n                }\n            }\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            if (initialState.length !== numStates) {\n                throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` +\n                    `${initialState.length} initial state(s).`);\n            }\n            if (this.unroll) {\n                console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n            }\n            const cellCallKwargs = { training };\n            // TODO(cais): Add support for constants.\n            const step = (inputs, states) => {\n                // `inputs` and `states` are concatenated to form a single `Array` of\n                // `tf.Tensor`s as the input to `cell.call()`.\n                const outputs = this.cell.call([inputs].concat(states), cellCallKwargs);\n                // Marshall the return value into output and new states.\n                return [outputs[0], outputs.slice(1)];\n            };\n            // TODO(cais): Add support for constants.\n            const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n            const lastOutput = rnnOutputs[0];\n            const outputs = rnnOutputs[1];\n            const states = rnnOutputs[2];\n            if (this.stateful) {\n                this.resetStates(states, training);\n            }\n            const output = this.returnSequences ? outputs : lastOutput;\n            // TODO(cais): Porperty set learning phase flag.\n            if (this.returnState) {\n                return [output].concat(states);\n            }\n            else {\n                return output;\n            }\n        });\n    }\n    getInitialState(inputs) {\n        return tidy(() => {\n            // Build an all-zero tensor of shape [samples, outputDim].\n            // [Samples, timeSteps, inputDim].\n            let initialState = tfc.zeros(inputs.shape);\n            // [Samples].\n            initialState = tfc.sum(initialState, [1, 2]);\n            initialState = K.expandDims(initialState); // [Samples, 1].\n            if (Array.isArray(this.cell.stateSize)) {\n                return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n            }\n            else {\n                return this.cell.stateSize > 1 ?\n                    [K.tile(initialState, [1, this.cell.stateSize])] :\n                    [initialState];\n            }\n        });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        return this.cell.trainableWeights;\n    }\n    get nonTrainableWeights() {\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        if (!this.trainable) {\n            return this.cell.weights;\n        }\n        return this.cell.nonTrainableWeights;\n    }\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.cell != null) {\n            this.cell.setFastWeightInitDuringBuild(value);\n        }\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll,\n        };\n        if (this.numConstants != null) {\n            config['numConstants'] = this.numConstants;\n        }\n        const cellConfig = this.cell.getConfig();\n        if (this.getClassName() === RNN.className) {\n            config['cell'] = {\n                'className': this.cell.getClassName(),\n                'config': cellConfig,\n            };\n        }\n        // this order is necessary, to prevent cell name from replacing layer name\n        return Object.assign({}, cellConfig, baseConfig, config);\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cellConfig = config['cell'];\n        const cell = deserialize(cellConfig, customObjects);\n        return new cls(Object.assign(config, { cell }));\n    }\n}\n/** @nocollapse */\nRNN.className = 'RNN';\nserialization.registerClass(RNN);\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport class RNNCell extends Layer {\n}\nexport class SimpleRNNCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, `units`);\n        this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.dropoutFunc = args.dropoutFunc;\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        // TODO(cais): Use regularizer.\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n    //   `inputs` and `states`. Here, the two tensors are combined into an\n    //   `Tensor[]` Array as the first input argument.\n    //   Similarly, PyKeras' equivalent of this method returns two values:\n    //    `output` and `[output]`. Here the two are combined into one length-2\n    //    `Tensor[]`, consisting of `output` repeated.\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n            }\n            let prevOutput = inputs[1];\n            inputs = inputs[0];\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    dropoutFunc: this.dropoutFunc,\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(prevOutput),\n                    rate: this.recurrentDropout,\n                    training,\n                    dropoutFunc: this.dropoutFunc,\n                });\n            }\n            let h;\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            if (dpMask != null) {\n                h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n            }\n            else {\n                h = K.dot(inputs, this.kernel.read());\n            }\n            if (this.bias != null) {\n                h = K.biasAdd(h, this.bias.read());\n            }\n            if (recDpMask != null) {\n                prevOutput = tfc.mul(prevOutput, recDpMask);\n            }\n            let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            // TODO(cais): Properly set learning phase on output tensor?\n            return [output, output];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport class SimpleRNN extends RNN {\n    constructor(args) {\n        args.cell = new SimpleRNNCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport class GRUCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.resetAfter) {\n            throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.dropoutFunc = args.dropoutFunc;\n        this.implementation = args.implementation;\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            inputs = inputs[0];\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2, regardless of the actual value of\n            // config.implementation.\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 3,\n                    dropoutFunc: this.dropoutFunc,\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 3,\n                    dropoutFunc: this.dropoutFunc,\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            let z;\n            let r;\n            let hh;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            const recurrentKernelValue = this.recurrentKernel.read();\n            const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n            const matrixInner = K.dot(hTMinus1, rk1);\n            const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n            const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n            z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n            r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n            const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n            hh = this.activation.apply(tfc.add(xH, recurrentH));\n            const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n            resetAfter: false\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport class GRU extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new GRUCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport class LSTMCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.unitForgetBias = args.unitForgetBias;\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.dropoutFunc = args.dropoutFunc;\n        this.implementation = args.implementation;\n        this.stateSize = [this.units, this.units];\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        let biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                const capturedBiasInit = this.biasInitializer;\n                const capturedUnits = this.units;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            // TODO(cais): More informative variable names?\n                            const bI = capturedBiasInit.apply([capturedUnits]);\n                            const bF = (new Ones()).apply([capturedUnits]);\n                            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n                            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            inputs = inputs;\n            if (inputs.length !== 3) {\n                throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            inputs = inputs[0];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 4,\n                    dropoutFunc: this.dropoutFunc\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 4,\n                    dropoutFunc: this.dropoutFunc\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2 regardless of the actual value of\n            // config.implementation.\n            let i;\n            let f;\n            let c;\n            let o;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let z = K.dot(inputs, this.kernel.read());\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n            i = this.recurrentActivation.apply(z0);\n            f = this.recurrentActivation.apply(z1);\n            c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n            o = this.recurrentActivation.apply(z3);\n            const h = tfc.mul(o, this.activation.apply(c));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport class LSTM extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new LSTMCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport class StackedRNNCells extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.cells = args.cells;\n    }\n    get stateSize() {\n        // States are a flat list in reverse order of the cell stack.\n        // This allows perserving the requirement `stack.statesize[0] ===\n        // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n        // assuming one LSTM has states `[h, c]`.\n        const stateSize = [];\n        for (const cell of this.cells.slice().reverse()) {\n            if (Array.isArray(cell.stateSize)) {\n                stateSize.push(...cell.stateSize);\n            }\n            else {\n                stateSize.push(cell.stateSize);\n            }\n        }\n        return stateSize;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            let states = inputs.slice(1);\n            // Recover per-cell states.\n            const nestedStates = [];\n            for (const cell of this.cells.slice().reverse()) {\n                if (Array.isArray(cell.stateSize)) {\n                    nestedStates.push(states.splice(0, cell.stateSize.length));\n                }\n                else {\n                    nestedStates.push(states.splice(0, 1));\n                }\n            }\n            nestedStates.reverse();\n            // Call the cells in order and store the returned states.\n            const newNestedStates = [];\n            let callInputs;\n            for (let i = 0; i < this.cells.length; ++i) {\n                const cell = this.cells[i];\n                states = nestedStates[i];\n                // TODO(cais): Take care of constants.\n                if (i === 0) {\n                    callInputs = [inputs[0]].concat(states);\n                }\n                else {\n                    callInputs = [callInputs[0]].concat(states);\n                }\n                callInputs = cell.call(callInputs, kwargs);\n                newNestedStates.push(callInputs.slice(1));\n            }\n            // Format the new states as a flat list in reverse cell order.\n            states = [];\n            for (const cellStates of newNestedStates.slice().reverse()) {\n                states.push(...cellStates);\n            }\n            return [callInputs[0]].concat(states);\n        });\n    }\n    build(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            // TODO(cais): Take care of input constants.\n            // const constantShape = inputShape.slice(1);\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        let outputDim;\n        this.cells.forEach((cell, i) => {\n            nameScope(`RNNCell_${i}`, () => {\n                // TODO(cais): Take care of input constants.\n                cell.build(inputShape);\n                if (Array.isArray(cell.stateSize)) {\n                    outputDim = cell.stateSize[0];\n                }\n                else {\n                    outputDim = cell.stateSize;\n                }\n                inputShape = [inputShape[0], outputDim];\n            });\n        });\n        this.built = true;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const getCellConfig = (cell) => {\n            return {\n                'className': cell.getClassName(),\n                'config': cell.getConfig(),\n            };\n        };\n        const cellConfigs = this.cells.map(getCellConfig);\n        const config = { 'cells': cellConfigs };\n        return Object.assign({}, baseConfig, config);\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cells = [];\n        for (const cellConfig of config['cells']) {\n            cells.push(deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const cell of this.cells) {\n                trainableWeights.push(...cell.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    /**\n     * Retrieve the weights of a the model.\n     *\n     * @returns A flat `Array` of `tf.Tensor`s.\n     */\n    getWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.weights);\n        }\n        return batchGetValue(weights);\n    }\n    /**\n     * Set the weights of the model.\n     *\n     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n     *     the output of `getWeights()`.\n     */\n    setWeights(weights) {\n        const tuples = [];\n        for (const cell of this.cells) {\n            const numParams = cell.weights.length;\n            const inputWeights = weights.splice(numParams);\n            for (let i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        batchSetValue(tuples);\n    }\n}\n/** @nocollapse */\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n    const { ones, rate, training = false, count = 1, dropoutFunc } = args;\n    const droppedInputs = () => dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n    const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n    // just in case count is provided with null or undefined\n    if (!count || count <= 1) {\n        return tfc.keep(createMask().clone());\n    }\n    const masks = Array(count).fill(undefined).map(createMask);\n    return masks.map(m => tfc.keep(m.clone()));\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { Initializer } from '../initializers';\nimport { convOutputLength, normalizeArray } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\nimport { generateDropoutMask, LSTMCell, RNN, RNNCell } from './recurrent';\nclass ConvRNN2DCell extends RNNCell {\n}\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n    constructor(args) {\n        if (args.unroll) {\n            throw new NotImplementedError('Unrolling is not possible with convolutional RNNs.');\n        }\n        if (Array.isArray(args.cell)) {\n            throw new NotImplementedError('It is not possible at the moment to stack convolutional cells.');\n        }\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            if (kwargs && kwargs['constants']) {\n                throw new ValueError('ConvRNN2D cell does not support constants');\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    computeOutputShape(inputShape) {\n        let outShape = this.computeSingleOutputShape(inputShape);\n        if (!this.returnSequences) {\n            outShape = [outShape[0], ...outShape.slice(2)];\n        }\n        if (this.returnState) {\n            outShape =\n                [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n        }\n        return outShape;\n    }\n    getInitialState(inputs) {\n        return tfc.tidy(() => {\n            const { stateSize } = this.cell;\n            const inputShape = inputs.shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const initialState = tfc.zeros(stateShape);\n            if (Array.isArray(stateSize)) {\n                return Array(stateSize.length).fill(initialState);\n            }\n            return [initialState];\n        });\n    }\n    resetStates(states, training = false) {\n        tfc.tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const inputShape = this.inputSpec[0].shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const batchSize = inputShape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.getStates() == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_ = [tfc.zeros(stateShape)];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_[0] = tfc.zeros(stateShape);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const expectedShape = stateShape;\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    computeSingleOutputShape(inputShape) {\n        const { dataFormat, filters, kernelSize, padding, strides, dilationRate } = this.cell;\n        const isChannelsFirst = dataFormat === 'channelsFirst';\n        const h = inputShape[isChannelsFirst ? 3 : 2];\n        const w = inputShape[isChannelsFirst ? 4 : 3];\n        const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n        const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n        const outShape = [\n            ...inputShape.slice(0, 2),\n            ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n        ];\n        return outShape;\n    }\n}\n/** @nocollapse */\nConvRNN2D.className = 'ConvRNN2D';\nexport class ConvLSTM2DCell extends LSTMCell {\n    constructor(args) {\n        const { filters, kernelSize, strides, padding, dataFormat, dilationRate, } = args;\n        super(Object.assign({}, args, { units: filters }));\n        this.filters = filters;\n        assertPositiveInteger(this.filters, 'filters');\n        this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n        this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n        this.strides = normalizeArray(strides || 1, 2, 'strides');\n        this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n        this.padding = padding || 'valid';\n        checkPaddingMode(this.padding);\n        this.dataFormat = dataFormat || 'channelsLast';\n        checkDataFormat(this.dataFormat);\n        this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n        this.dilationRate.forEach(rate => assertPositiveInteger(rate, 'dilationRate'));\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const numOfKernels = 4;\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            let biasInitializer;\n            if (this.unitForgetBias) {\n                const init = this.biasInitializer;\n                const filters = this.filters;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            const biasI = init.apply([filters]);\n                            const biasF = tfc.ones([filters]);\n                            const biasCAndO = init.apply([filters * 2]);\n                            return K.concatenate([biasI, biasF, biasCAndO]);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (inputs.length !== 3) {\n                throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] || false;\n            const x = inputs[0]; // Current input\n            const hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            const numOfKernels = 4;\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(x),\n                    rate: this.dropout,\n                    training,\n                    count: numOfKernels,\n                    dropoutFunc: this.dropoutFunc\n                });\n            }\n            const dropoutMask = this.dropoutMask;\n            const applyDropout = (x, mask, index) => {\n                if (!mask || !mask[index]) {\n                    return x;\n                }\n                return tfc.mul(mask[index], x);\n            };\n            let xI = applyDropout(x, dropoutMask, 0);\n            let xF = applyDropout(x, dropoutMask, 1);\n            let xC = applyDropout(x, dropoutMask, 2);\n            let xO = applyDropout(x, dropoutMask, 3);\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: numOfKernels,\n                    dropoutFunc: this.dropoutFunc\n                });\n            }\n            const recDropoutMask = this.recurrentDropoutMask;\n            let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n            let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n            let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n            let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n            const kernelChannelAxis = 3;\n            const [kernelI, kernelF, kernelC, kernelO] = tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n            const [biasI, biasF, biasC, biasO] = this.useBias ?\n                tfc.split(this.bias.read(), numOfKernels) :\n                [null, null, null, null];\n            xI = this.inputConv(xI, kernelI, biasI, this.padding);\n            xF = this.inputConv(xF, kernelF, biasF, this.padding);\n            xC = this.inputConv(xC, kernelC, biasC, this.padding);\n            xO = this.inputConv(xO, kernelO, biasO, this.padding);\n            const [recKernelI, recKernelF, recKernelC, recKernelO] = tfc.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n            hI = this.recurrentConv(hI, recKernelI);\n            hF = this.recurrentConv(hF, recKernelF);\n            hC = this.recurrentConv(hC, recKernelC);\n            hO = this.recurrentConv(hO, recKernelO);\n            const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n            const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n            const c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n            const h = tfc.mul(this.recurrentActivation.apply(tfc.add(xO, hO)), this.activation.apply(c));\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const _a = super.getConfig(), { 'units': _ } = _a, baseConfig = __rest(_a, ['units']);\n        const config = {\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            strides: this.strides,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n    inputConv(x, w, b, padding) {\n        const out = tfc.conv2d(x, w, this.strides, (padding || 'valid'), this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);\n        if (b) {\n            return K.biasAdd(out, b, this.dataFormat);\n        }\n        return out;\n    }\n    recurrentConv(x, w) {\n        const strides = 1;\n        return tfc.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n    }\n}\n/** @nocollapse */\nConvLSTM2DCell.className = 'ConvLSTM2DCell';\ntfc.serialization.registerClass(ConvLSTM2DCell);\nexport class ConvLSTM2D extends ConvRNN2D {\n    constructor(args) {\n        const cell = new ConvLSTM2DCell(args);\n        super(Object.assign({}, args, { cell }));\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nConvLSTM2D.className = 'ConvLSTM2D';\ntfc.serialization.registerClass(ConvLSTM2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, cast, mul, notEqual, reshape, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Dropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.rate = Math.max(Math.min(args.rate, 1), 0);\n        // So that the scalar doesn't get tidied up between executions.\n        this.noiseShape = args.noiseShape;\n        this.seed = args.seed;\n        this.supportsMasking = true;\n    }\n    getNoiseShape(input) {\n        if (this.noiseShape == null) {\n            return this.noiseShape;\n        }\n        const inputShape = input.shape;\n        const noiseShape = [];\n        for (let i = 0; i < this.noiseShape.length; ++i) {\n            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n        }\n        return noiseShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (0 < this.rate && this.rate < 1) {\n                const training = kwargs['training'] == null ? false : kwargs['training'];\n                const noiseShape = this.getNoiseShape(input);\n                const output = K.inTrainPhase(() => K.dropout(input, this.rate, noiseShape, this.seed), () => input, training);\n                return output;\n            }\n            return inputs;\n        });\n    }\n    getConfig() {\n        const config = {\n            rate: this.rate,\n            noiseShape: this.noiseShape,\n            seed: this.seed,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    dispose() {\n        return super.dispose();\n    }\n}\n/** @nocollapse */\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport class SpatialDropout1D extends Dropout {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getNoiseShape(input) {\n        const inputShape = input.shape;\n        return [inputShape[0], 1, inputShape[2]];\n    }\n}\n/** @nocollapse */\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport class Dense extends Layer {\n    constructor(args) {\n        super(args);\n        // Default activation: Linear (none).\n        this.activation = null;\n        this.useBias = true;\n        this.kernel = null;\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.batchInputShape == null && args.inputShape == null &&\n            args.inputDim != null) {\n            // This logic is copied from Layer's constructor, since we can't\n            // do exactly what the Python constructor does for Dense().\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            this.batchInputShape = [batchSize, args.inputDim];\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation);\n        if (args.useBias != null) {\n            this.useBias = args.useBias;\n        }\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.supportsMasking = true;\n        this.inputSpec = [{ minNDim: 2 }];\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputLastDim = inputShape[inputShape.length - 1];\n        if (this.kernel == null) {\n            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n            if (this.useBias) {\n                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n            }\n        }\n        this.inputSpec = [{ minNDim: 2, axes: { [-1]: inputLastDim } }];\n        this.built = true;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        outputShape[outputShape.length - 1] = this.units;\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Dense layer accepts only a single input.\n            const input = getExactlyOneTensor(inputs);\n            const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n            let output;\n            if (fusedActivationName != null) {\n                output = K.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);\n            }\n            else {\n                output = K.dot(input, this.kernel.read());\n                if (this.bias != null) {\n                    output = K.biasAdd(output, this.bias.read());\n                }\n                if (this.activation != null) {\n                    output = this.activation.apply(output);\n                }\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport class Flatten extends Layer {\n    constructor(args) {\n        args = args || {};\n        super(args);\n        this.inputSpec = [{ minNDim: 3 }];\n        this.dataFormat = args.dataFormat;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        for (const dim of inputShape.slice(1)) {\n            if (dim == null) {\n                throw new ValueError(`The shape of the input to \"Flatten\" is not fully defined ` +\n                    `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n                    `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n                    `layer in your model.`);\n            }\n        }\n        return [inputShape[0], arrayProd(inputShape, 1)];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            let input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n                const permutation = [0];\n                for (let i = 2; i < input.rank; ++i) {\n                    permutation.push(i);\n                }\n                permutation.push(1);\n                input = transpose(input, permutation);\n            }\n            return K.batchFlatten(input);\n        });\n    }\n    getConfig() {\n        const config = {};\n        if (this.dataFormat != null) {\n            config['dataFormat'] = this.dataFormat;\n        }\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport class Activation extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.activation = getActivation(args.activation);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            return this.activation.apply(input);\n        });\n    }\n    getConfig() {\n        const config = { activation: serializeActivation(this.activation) };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport class RepeatVector extends Layer {\n    constructor(args) {\n        super(args);\n        this.n = args.n;\n        this.inputSpec = [{ ndim: 2 }];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], this.n, inputShape[1]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            return K.repeat(inputs, this.n);\n        });\n    }\n    getConfig() {\n        const config = {\n            n: this.n,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport class Reshape extends Layer {\n    constructor(args) {\n        super(args);\n        this.targetShape = args.targetShape;\n        // Make sure that all unknown dimensions are represented as `null`.\n        for (let i = 0; i < this.targetShape.length; ++i) {\n            if (this.isUnknown(this.targetShape[i])) {\n                this.targetShape[i] = null;\n            }\n        }\n    }\n    isUnknown(dim) {\n        return dim < 0 || dim == null;\n    }\n    /**\n     * Finds and replaces a missing dimension in output shape.\n     *\n     * This is a near direct port of the internal Numpy function\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n     *\n     * @param inputShape: Original shape of array begin reshape.\n     * @param outputShape: Target shape of the array, with at most a single\n     * `null` or negative number, which indicates an underdetermined dimension\n     * that should be derived from `inputShape` and the known dimensions of\n     *   `outputShape`.\n     * @returns: The output shape with `null` replaced with its computed value.\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n     */\n    fixUnknownDimension(inputShape, outputShape) {\n        const errorMsg = 'Total size of new array must be unchanged.';\n        const finalShape = outputShape.slice();\n        let known = 1;\n        let unknown = null;\n        for (let i = 0; i < finalShape.length; ++i) {\n            const dim = finalShape[i];\n            if (this.isUnknown(dim)) {\n                if (unknown === null) {\n                    unknown = i;\n                }\n                else {\n                    throw new ValueError('Can only specifiy one unknown dimension.');\n                }\n            }\n            else {\n                known *= dim;\n            }\n        }\n        const originalSize = arrayProd(inputShape);\n        if (unknown !== null) {\n            if (known === 0 || originalSize % known !== 0) {\n                throw new ValueError(errorMsg);\n            }\n            finalShape[unknown] = originalSize / known;\n        }\n        else if (originalSize !== known) {\n            throw new ValueError(errorMsg);\n        }\n        return finalShape;\n    }\n    computeOutputShape(inputShape) {\n        let anyUnknownDims = false;\n        for (let i = 0; i < inputShape.length; ++i) {\n            if (this.isUnknown(inputShape[i])) {\n                anyUnknownDims = true;\n                break;\n            }\n        }\n        if (anyUnknownDims) {\n            return inputShape.slice(0, 1).concat(this.targetShape);\n        }\n        else {\n            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n            return reshape(input, outputShape);\n        });\n    }\n    getConfig() {\n        const config = {\n            targetShape: this.targetShape,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport class Permute extends Layer {\n    constructor(args) {\n        super(args);\n        if (args.dims == null) {\n            throw new Error('Required configuration field `dims` is missing during Permute ' +\n                'constructor call.');\n        }\n        if (!Array.isArray(args.dims)) {\n            throw new Error('Permute constructor requires `dims` to be an Array, but received ' +\n                `${args.dims} instead.`);\n        }\n        // Check the validity of the permutation indices.\n        const expectedSortedIndices = range(1, args.dims.length + 1);\n        if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n            throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n                ' `dims` must contain consecutive integers starting from 1.');\n        }\n        this.dims = args.dims;\n        this.dimsIncludingBatch = [0].concat(this.dims);\n        this.inputSpec = [new InputSpec({ ndim: this.dims.length + 1 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        this.dims.forEach((dim, i) => {\n            outputShape[i + 1] = inputShape[dim];\n        });\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n    }\n    getConfig() {\n        const config = {\n            dims: this.dims,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport class Masking extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.supportsMasking = true;\n        if (args != null) {\n            this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n        }\n        else {\n            this.maskValue = 0;\n        }\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { maskValue: this.maskValue };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeMask(inputs, mask) {\n        const input = getExactlyOneTensor(inputs);\n        const axis = -1;\n        return any(notEqual(input, this.maskValue), axis);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const axis = -1;\n            const keepDims = true;\n            const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n            const output = mul(input, cast(booleanMask, input.dtype));\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMasking.className = 'Masking';\nserialization.registerClass(Masking);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n            return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport class Merge extends Layer {\n    constructor(args) {\n        super(args || {});\n        this.supportsMasking = true;\n    }\n    /**\n     * Logic for merging multiple tensors, to be overridden by subclasses.\n     * @param inputs\n     */\n    mergeFunction(inputs) {\n        throw new NotImplementedError();\n    }\n    /**\n     * Computes the shape of the result of an elementwise operation.\n     *\n     * @param shape1: Shape of the first tensor.\n     * @param shape2: Shape of the second tensor.\n     * @returns Expected output shape when an elementwise operation is carried\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\n     *   element-wise operations.\n     */\n    computeElementwiseOpOutputShape(shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        }\n        else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        }\n        else if (shape2.length === 0) {\n            return shape1;\n        }\n        const outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (let k = 0; k < shape2.length; ++k) {\n            const i = shape1[shape1.length - shape2.length + k];\n            const j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            }\n            else if (i === 1) {\n                outputShape.push(j);\n            }\n            else if (j === 1) {\n                outputShape.push(i);\n            }\n            else {\n                if (i !== j) {\n                    throw new ValueError('Operands could not be broadcast together with shapes ' +\n                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            // Make sure that inputShape is an Array of shape.\n            inputShape = [getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' +\n                ` Got ${inputShape.length} input(s).`);\n        }\n        // Make sure that there is at most one unique batch size among the input\n        // shapes.\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new ValueError(`Can not merge tensors with different batch sizes. ` +\n                `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n        }\n        let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        // If the inputs have different ranks, we have to reshape them to make them\n        // broadcastable.\n        const allRanks = inputShape.map(shape => shape.length);\n        if (inputShape.indexOf(null) === -1 &&\n            generic_utils.unique(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        }\n        else {\n            this.reshapeRequired = true;\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (this.reshapeRequired) {\n                const reshapedInputs = [];\n                const inputDims = inputs.map(input => input.rank);\n                if (inputDims.indexOf(null) === -1) {\n                    // If ranks of all inputs are available, we simply expand each of them\n                    // at axis=1 until all of them have the same rank.\n                    const maxNDim = mathUtils.max(inputDims);\n                    for (let x of inputs) {\n                        const xNDim = x.rank;\n                        for (let k = 0; k < maxNDim - xNDim; ++k) {\n                            x = K.expandDims(x, 1);\n                        }\n                        reshapedInputs.push(x);\n                    }\n                    return this.mergeFunction(reshapedInputs);\n                }\n                else {\n                    // Transpose all inputs so that batch size is the last dimension.\n                    // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n                    let transposed = false;\n                    for (const x of inputs) {\n                        const xNDim = x.rank;\n                        if (xNDim == null) {\n                            const xShape = x.shape;\n                            const batchSize = xShape[0];\n                            const newShape = xShape.slice(1).concat([batchSize]);\n                            let xTransposed = tfc.reshape(x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                            xTransposed = tfc.reshape(xTransposed, newShape);\n                            reshapedInputs.push(xTransposed);\n                            transposed = true;\n                        }\n                        else if (xNDim > 1) {\n                            const dims = mathUtils.range(1, xNDim).concat([0]);\n                            reshapedInputs.push(tfc.transpose(x, dims));\n                            transposed = true;\n                        }\n                        else {\n                            // We don't transpose inputs if they are 1D vectors or scalars.\n                            reshapedInputs.push(x);\n                        }\n                    }\n                    let y = this.mergeFunction(reshapedInputs);\n                    const yNDim = y.rank;\n                    if (transposed) {\n                        // If inputs have been transposed, we have to transpose the output\n                        // too.\n                        if (yNDim == null) {\n                            const yShape = y.shape;\n                            const yNDim = yShape.length;\n                            const batchSize = yShape[yNDim - 1];\n                            const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                            y = tfc.reshape(tfc.transpose(tfc.reshape(y, [-1, batchSize]), [1, 0]), newShape);\n                        }\n                        else if (yNDim > 1) {\n                            const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                            y = tfc.transpose(y, dims);\n                        }\n                    }\n                    return y;\n                }\n            }\n            else {\n                return this.mergeFunction(inputs);\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        let outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        }\n        else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        }\n        else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (mask == null) {\n                return null;\n            }\n            if (!Array.isArray(mask)) {\n                throw new ValueError('`mask` should be an Array');\n            }\n            if (!Array.isArray(inputs)) {\n                throw new ValueError('`inputs` should be an Array');\n            }\n            if (mask.length !== inputs.length) {\n                throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` +\n                    `length, but have different lengths ` +\n                    `(${inputs.length} vs ${mask.length})`);\n            }\n            if (mask.every(m => m == null)) {\n                return null;\n            }\n            mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n            let output = mask[0];\n            for (let i = 1; i < mask.length - 1; ++i) {\n                output = tfc.logicalAnd(output, mask[i]);\n            }\n            return output;\n        });\n    }\n}\nexport class Add extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nAdd.className = 'Add';\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config) {\n    if (Array.isArray(config)) {\n        const layer = new Add({});\n        return layer.apply(config);\n    }\n    else {\n        return new Add(config);\n    }\n}\nexport class Multiply extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.mul(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMultiply.className = 'Multiply';\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config) {\n    if (Array.isArray(config)) {\n        const layer = new Multiply({});\n        return layer.apply(config);\n    }\n    else {\n        return new Multiply(config);\n    }\n}\nexport class Average extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return tfc.mul(1 / inputs.length, output);\n        });\n    }\n}\n/** @nocollapse */\nAverage.className = 'Average';\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config) {\n    if (Array.isArray(config)) {\n        const layer = new Average({});\n        return layer.apply(config);\n    }\n    else {\n        return new Average(config);\n    }\n}\nexport class Maximum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.maximum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMaximum.className = 'Maximum';\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Maximum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Maximum(config);\n    }\n}\nexport class Minimum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.minimum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMinimum.className = 'Minimum';\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Minimum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Minimum(config);\n    }\n}\nexport class Concatenate extends Merge {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_AXIS = -1;\n        if (args == null) {\n            args = {};\n        }\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.]\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n            inputShape.length === 1) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +\n                'inputs');\n        }\n        inputShape = inputShape;\n        let allNoneShape = true;\n        for (const shape of inputShape) {\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        const shapeSet = [];\n        for (let i = 0; i < inputShape.length; ++i) {\n            const shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            let exists = false;\n            for (const shape of shapeSet) {\n                if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' +\n                'except for the concat axis. Got input shapes: ' +\n                JSON.stringify(inputShape));\n        }\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            return K.concatenate(inputs, this.axis);\n        });\n    }\n    computeOutputShape(inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        const inputShapes = inputShape;\n        const outputShape = inputShapes[0].slice();\n        const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        // Porting Note: the line above is because TypeScript doesn't support\n        //   negative indices.\n        for (const shape of inputShapes.slice(1)) {\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        if (mask == null) {\n            return null;\n        }\n        if (!Array.isArray(mask)) {\n            throw new ValueError('`mask` should be an array for Concatenate');\n        }\n        if (!Array.isArray(inputs)) {\n            throw new ValueError('`inputs` should be an array for Concatenate');\n        }\n        if (mask.length !== inputs.length) {\n            throw new ValueError(`Mismatch in the length of mask (${mask.length}) ` +\n                `and the legnth of inputs (${inputs.length})`);\n        }\n        return tfc.tidy(() => {\n            let allNullMasks = true;\n            mask.forEach(m => {\n                if (m != null) {\n                    allNullMasks = false;\n                    return;\n                }\n            });\n            if (allNullMasks) {\n                return null;\n            }\n            const outputMasks = [];\n            for (let i = 0; i < inputs.length; ++i) {\n                if (mask[i] == null) {\n                    // Input is unmasked. Append all 1's to masks.\n                    outputMasks.push(tfc.cast(tfc.onesLike(inputs[i]), 'bool'));\n                }\n                else if (mask[i].rank < inputs[i].rank) {\n                    // Mask is smaller than the input, expand it.\n                    outputMasks.push(tfc.expandDims(mask[i], -1));\n                }\n                else {\n                    outputMasks.push(mask[i]);\n                }\n            }\n            const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n            return tfc.all(concatenatedMasks, -1, false);\n        });\n    }\n    getConfig() {\n        const config = {\n            'axis': this.axis,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nConcatenate.className = 'Concatenate';\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config) {\n    if (Array.isArray(config)) {\n        const layer = new Concatenate({});\n        return layer.apply(config);\n    }\n    else {\n        return new Concatenate(config);\n    }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis, dim) {\n    while (axis < 0) {\n        axis += dim;\n    }\n    return axis;\n}\nfunction batchDot(x, y, axes) {\n    if (x.shape.length > 3 || y.shape.length > 3) {\n        throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n    }\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` +\n        `but got ${x.shape.length}`);\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` +\n        `but got ${y.shape.length}`);\n    if (typeof axes === 'number') {\n        axes = [axes, axes];\n    }\n    if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n        throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n    }\n    const xNDim = x.shape.length;\n    const yNDim = y.shape.length;\n    if (axes == null) {\n        // Behave like batchMatmul by default.\n        axes = [xNDim - 1, yNDim - 2];\n    }\n    const axesArray = axes;\n    return tfc.tidy(() => {\n        let diff;\n        if (xNDim > yNDim) {\n            diff = xNDim - yNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            y = tfc.reshape(y, y.shape.concat(diffShape));\n        }\n        else if (yNDim > xNDim) {\n            diff = yNDim - xNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            x = tfc.reshape(x, x.shape.concat(diffShape));\n        }\n        else {\n            diff = 0;\n        }\n        let out;\n        if (x.shape.length === 2 && y.shape.length === 2) {\n            if (axesArray[0] === axesArray[1]) {\n                out = tfc.sum(tfc.mul(x, y), axesArray[0]);\n            }\n            else {\n                out = tfc.sum(tfc.mul(tfc.transpose(x, [1, 0]), y), axesArray[1]);\n            }\n        }\n        else {\n            const adjX = axesArray[0] !== x.shape.length - 1;\n            const adjY = axesArray[1] === y.shape.length - 1;\n            out = tfc.matMul(x, y, adjX, adjY);\n        }\n        if (diff > 0) {\n            let idx;\n            if (xNDim > yNDim) {\n                idx = xNDim + yNDim - 3;\n            }\n            else {\n                idx = xNDim - 1;\n            }\n            const squeezeAxes = [];\n            for (let i = idx; i < idx + diff; ++i) {\n                squeezeAxes.push(i);\n            }\n            out = tfc.squeeze(out, squeezeAxes);\n        }\n        if (out.shape.length === 1) {\n            out = tfc.expandDims(out, 1);\n        }\n        return out;\n    });\n}\nexport class Dot extends Merge {\n    constructor(args) {\n        super(args);\n        this.axes = args.axes;\n        this.normalize = args.normalize == null ? false : args.normalize;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0];\n        const shape2 = inputShape[1];\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        if (shape1[axes[0]] !== shape2[axes[1]]) {\n            throw new ValueError(`Dimension incompatibility: ` +\n                `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n        }\n    }\n    mergeFunction(inputs) {\n        if (inputs.length !== 2) {\n            throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' +\n                `but received ${inputs.length} input(s).`);\n        }\n        let x1 = inputs[0];\n        let x2 = inputs[1];\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            axes = [\n                interpretAxis(this.axes, x1.shape.length),\n                interpretAxis(this.axes, x2.shape.length)\n            ];\n        }\n        else {\n            axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n        }\n        if (this.normalize) {\n            x1 = l2Normalize(x1, axes[0]);\n            x2 = l2Normalize(x2, axes[1]);\n        }\n        return batchDot(x1, x2, axes);\n    }\n    interpretAxes(shape1, shape2) {\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            // `this.axes` is a single integer.\n            axes = [\n                interpretAxis(this.axes, shape1.length),\n                interpretAxis(this.axes, shape2.length)\n            ];\n        }\n        else {\n            // `this.axes` is an Array of integers.\n            axes = this.axes;\n        }\n        return axes;\n    }\n    computeOutputShape(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0].slice();\n        const shape2 = inputShape[1].slice();\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        shape1.splice(axes[0], 1);\n        shape2.splice(axes[1], 1);\n        shape2.splice(0, 1);\n        const outputShape = shape1.concat(shape2);\n        if (outputShape.length === 1) {\n            outputShape.push(1);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return null;\n    }\n    getConfig() {\n        const config = {\n            'axes': this.axes,\n            'normalize': this.normalize\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDot.className = 'Dot';\nserialization.registerClass(Dot);\n// TODO(cais): Add functional interfaces for the merge layers.\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { add, greaterEqual, mul, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.stddev = args.stddev;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { stddev: this.stddev };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const noised = () => add(K.randomNormal(input.shape, 0, this.stddev), input);\n            const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (this.rate > 0 && this.rate < 1) {\n                const noised = () => {\n                    const stddev = Math.sqrt(this.rate / (1 - this.rate));\n                    return mul(input, K.randomNormal(input.shape, 1, stddev));\n                };\n                return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            }\n            return input;\n        });\n    }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n        this.noiseShape = args.noiseShape;\n    }\n    _getNoiseShape(inputs) {\n        return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.rate < 1 && this.rate > 0) {\n                const noiseShape = this._getNoiseShape(inputs);\n                const droppedInputs = () => {\n                    const input = getExactlyOneTensor(inputs);\n                    const alpha = 1.6732632423543772848170429916717;\n                    const scale = 1.0507009873554804934193349852946;\n                    const alphaP = -alpha * scale;\n                    let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n                    keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n                    // Get affine transformation params.\n                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n                    const b = -a * alphaP * this.rate;\n                    // Apply mask.\n                    const x = add(mul(input, keptIdx), mul(add(keptIdx, -1), alphaP));\n                    return add(mul(x, a), b);\n                };\n                return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n            }\n            return inputs;\n        });\n    }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Normalization layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { moments, reshape, serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {\n    let out;\n    if (x.rank === 2) {\n        out = tfc.batchNorm2d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else if (x.rank === 3) {\n        // TODO(cais): Check rank; give proper error message.\n        out = tfc.batchNorm3d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else if (x.rank === 4) {\n        out = tfc.batchNorm4d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else {\n        throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} ` +\n            `yet`);\n    }\n    return out;\n}\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    return tidy(() => {\n        const meanAndVariance = tfc.moments(x, reductionAxes);\n        const mean = meanAndVariance.mean;\n        const variance = meanAndVariance.variance;\n        const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);\n        return [normed, mean, variance];\n    });\n}\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    return tidy(() => {\n        const meanAndVariance = tfc.moments(x, reductionAxes);\n        const mean = meanAndVariance.mean;\n        const variance = meanAndVariance.variance;\n        const targetShape = [];\n        for (const axis of math_utils.range(0, x.rank)) {\n            if (reductionAxes.indexOf(axis) !== -1) {\n                targetShape.push(1);\n            }\n            else {\n                targetShape.push(x.shape[axis]);\n            }\n        }\n        const broadcastMean = reshape(mean, targetShape);\n        const broadcastVariance = reshape(variance, targetShape);\n        const broadcastGamma = gamma == null ? null : reshape(gamma, targetShape);\n        const broadcastBeta = beta == null ? null : reshape(beta, targetShape);\n        const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);\n        return [normed, mean, variance];\n    });\n}\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    if (util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n        return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n    }\n    else {\n        return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n    }\n}\nexport class BatchNormalization extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.supportsMasking = true;\n        this.axis = args.axis == null ? -1 : args.axis;\n        this.momentum = args.momentum == null ? 0.99 : args.momentum;\n        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n        this.center = args.center == null ? true : args.center;\n        this.scale = args.scale == null ? true : args.scale;\n        this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n        this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n        this.movingMeanInitializer =\n            getInitializer(args.movingMeanInitializer || 'zeros');\n        this.movingVarianceInitializer =\n            getInitializer(args.movingVarianceInitializer || 'ones');\n        this.betaConstraint = getConstraint(args.betaConstraint);\n        this.gammaConstraint = getConstraint(args.gammaConstraint);\n        this.betaRegularizer = getRegularizer(args.betaRegularizer);\n        this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n        const dim = inputShape[axis];\n        if (dim == null) {\n            throw new ValueError(`Axis ${axis} of input tensor should have a defined dimension but ` +\n                `the layer received an input with shape ` +\n                `${JSON.stringify(inputShape)}.`);\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: inputShape.length, axes: { [axis]: dim } })];\n        const shape = [dim];\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n        }\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            const input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            const ndim = inputShape.length;\n            const reductionAxes = math_utils.range(0, ndim);\n            const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n            reductionAxes.splice(axis, 1);\n            const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n            broadcastShape[axis] = inputShape[axis];\n            const sortedReductionAxes = reductionAxes.slice();\n            sortedReductionAxes.sort();\n            const needsBroadcasting = !util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n            const normalizeInference = () => {\n                if (needsBroadcasting) {\n                    const broadcastMovingMean = reshape(this.movingMean.read(), broadcastShape);\n                    const broadcastMovingVariance = reshape(this.movingVariance.read(), broadcastShape);\n                    const broadcastBeta = this.center ? reshape(this.beta.read(), broadcastShape) : null;\n                    const broadcastGamma = this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n                    return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);\n                }\n                else {\n                    return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);\n                }\n            };\n            if (!training) {\n                return normalizeInference();\n            }\n            const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);\n            const doMovingAverage = (variable, value, momentum) => {\n                tfc.tidy(() => {\n                    const decay = 1 - momentum;\n                    const origValue = variable.read();\n                    const updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n                    variable.write(tfc.sub(origValue, updateDelta));\n                });\n            };\n            // Perform updates to moving mean and moving variance for training.\n            // Porting Note: In PyKeras, these updates to `movingMean` and\n            //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n            //   `update`s using the `add_update()` method. Here we do it imperatively\n            //   and encapsulate the updates in a function that is invoked\n            //   immediately.\n            const updateMovingMeanAndVariance = () => {\n                doMovingAverage(this.movingMean, mean, this.momentum);\n                doMovingAverage(this.movingVariance, variance, this.momentum);\n            };\n            updateMovingMeanAndVariance();\n            return normedTraining;\n        });\n    }\n    getConfig() {\n        const config = {\n            axis: this.axis,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: serializeInitializer(this.betaInitializer),\n            gammaInitializer: serializeInitializer(this.gammaInitializer),\n            movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n            movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n            betaRegularizer: serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n            betaConstraint: serializeConstraint(this.betaConstraint),\n            gammaConstraint: serializeConstraint(this.gammaConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nBatchNormalization.className = 'BatchNormalization';\nserialization.registerClass(BatchNormalization);\nexport class LayerNormalization extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.axis = args.axis == null ? -1 : args.axis;\n        if (typeof this.axis === 'number') {\n            if (!Number.isInteger(this.axis)) {\n                throw new Error(`Expected axis to be an integer, but received ${this.axis}`);\n            }\n        }\n        else if (Array.isArray(this.axis)) {\n            for (const axis of this.axis) {\n                if (!Number.isInteger(axis)) {\n                    throw new Error(`Expected axis to be an array of integers, ` +\n                        `but received ${JSON.stringify(this.axis)}`);\n                }\n            }\n        }\n        else {\n            throw new Error(`Expected axis to be an integer or an array of integers, ` +\n                `but received ${JSON.stringify(this.axis)}`);\n        }\n        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n        this.center = args.center == null ? true : args.center;\n        this.scale = args.scale == null ? true : args.scale;\n        this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n        this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n        this.betaRegularizer = getRegularizer(args.betaRegularizer);\n        this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n        this.supportsMasking = true;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const nDims = inputShape.length;\n        // Convert axis to array and resolve negatives.\n        if (typeof this.axis === 'number') {\n            this.axis = [this.axis];\n        }\n        for (let i = 0; i < this.axis.length; ++i) {\n            if (this.axis[i] < 0) {\n                this.axis[i] += nDims;\n            }\n        }\n        // Further validate axes.\n        for (const axis of this.axis) {\n            if (axis < 0 || axis >= nDims) {\n                throw new Error(`Invalid axis: ${axis}`);\n            }\n        }\n        if (this.axis.length !== generic_utils.unique(this.axis).length) {\n            throw new Error(`Found duplicate axes in: ${this.axis}`);\n        }\n        const paramShape = this.axis.map(axis => inputShape[axis]);\n        const trainable = true;\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);\n        }\n        else {\n            this.gamma = null;\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);\n        }\n        else {\n            this.beta = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        const input = getExactlyOneTensor(inputs);\n        const inputShape = input.shape;\n        const nDims = inputShape.length;\n        return tidy(() => {\n            const keepDims = true;\n            let { mean, variance } = moments(input, this.axis, keepDims);\n            const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n            for (const dim of this.axis) {\n                broadcastShape[dim] = inputShape[dim];\n            }\n            const broadcast = (v) => {\n                if (v != null && v.shape.length !== nDims) {\n                    return tfc.reshape(v, broadcastShape);\n                }\n                else {\n                    return v;\n                }\n            };\n            let scale = this.scale ? broadcast(this.gamma.read()) : null;\n            let offset = this.center ? broadcast(this.beta.read()) : null;\n            // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n            // is a workaround for the limitation of core's batchNormalization?d don't\n            // support broadcasting in their gradients. In addition, the tiling is\n            // necessary to ensure correctness on the browser CPU backend regardless\n            // of forward or backward computation. Remove this workaround once the\n            // limitation is addressed. See .\n            const momentsTiling = [];\n            const scaleOffsetTiling = [];\n            for (let i = 0; i < nDims; ++i) {\n                if (this.axis.indexOf(i) !== -1) {\n                    momentsTiling.push(inputShape[i]);\n                    scaleOffsetTiling.push(1);\n                }\n                else {\n                    momentsTiling.push(1);\n                    scaleOffsetTiling.push(inputShape[i]);\n                }\n            }\n            mean = tfc.tile(mean, momentsTiling);\n            variance = tfc.tile(variance, momentsTiling);\n            if (scale != null) {\n                scale = tfc.tile(scale, scaleOffsetTiling);\n            }\n            if (offset != null) {\n                offset = tfc.tile(offset, scaleOffsetTiling);\n            }\n            return batchNormalization(input, mean, variance, offset, scale, this.epsilon);\n        });\n    }\n    getConfig() {\n        const config = {\n            axis: this.axis,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: serializeInitializer(this.betaInitializer),\n            gammaInitializer: serializeInitializer(this.gammaInitializer),\n            betaRegularizer: serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nLayerNormalization.className = 'LayerNormalization';\nserialization.registerClass(LayerNormalization);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x, padding) {\n    return tidy(() => {\n        if (x.rank !== 3) {\n            throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [1, 1];\n        }\n        if (padding.length !== 2) {\n            throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` +\n                `array, but received a length-${padding.length} array.`);\n        }\n        const pattern = [[0, 0], padding, [0, 0]];\n        return tfc.pad(x, pattern);\n    });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(x, padding, dataFormat) {\n    return tidy(() => {\n        if (x.rank !== 4) {\n            throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [[1, 1], [1, 1]];\n        }\n        if (padding.length !== 2 || padding[0].length !== 2 ||\n            padding[1].length !== 2) {\n            throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n                'each of which is an Array of two integers.');\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n            throw new ValueError(`Unknown data format: ${dataFormat}. ` +\n                `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n        }\n        let pattern;\n        if (dataFormat === 'channelsFirst') {\n            pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n        }\n        else {\n            pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n        }\n        return tfc.pad(x, pattern);\n    });\n}\nexport class ZeroPadding2D extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n        // TODO(cais): Maybe refactor the following logic surrounding `padding`\n        //   into a helper method.\n        if (args.padding == null) {\n            this.padding = [[1, 1], [1, 1]];\n        }\n        else if (typeof args.padding === 'number') {\n            this.padding =\n                [[args.padding, args.padding], [args.padding, args.padding]];\n        }\n        else {\n            args.padding = args.padding;\n            if (args.padding.length !== 2) {\n                throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` +\n                    `received a length-${args.padding.length} array.`);\n            }\n            let heightPadding;\n            let widthPadding;\n            if (typeof args.padding[0] === 'number') {\n                heightPadding = [args.padding[0], args.padding[0]];\n                widthPadding = [args.padding[1], args.padding[1]];\n            }\n            else {\n                args.padding = args.padding;\n                if (args.padding[0].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[0].length} array.`);\n                }\n                heightPadding = args.padding[0];\n                if (args.padding[1].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[1].length} array.`);\n                }\n                widthPadding = args.padding[1];\n            }\n            this.padding = [heightPadding, widthPadding];\n        }\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows;\n        let cols;\n        if (this.dataFormat === 'channelsFirst') {\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[3] != null && inputShape[3] >= 0) {\n                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            if (inputShape[1] != null && inputShape[1] >= 0) {\n                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n    }\n    getConfig() {\n        const config = {\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = preprocessConv3DInput(x, dataFormat);\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport class Pooling1D extends Layer {\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        super(args);\n        if (typeof args.poolSize === 'number') {\n            this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            this.poolSize = args.poolSize;\n        }\n        else {\n            throw new ValueError(`poolSize for 1D convolutional layer must be a number or an ` +\n                `Array of a single number, but received ` +\n                `${JSON.stringify(args.poolSize)}`);\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                this.strides = args.strides;\n            }\n            else {\n                throw new ValueError(`strides for 1D convolutional layer must be a number or an ` +\n                    `Array of a single number, but received ` +\n                    `${JSON.stringify(args.strides)}`);\n            }\n        }\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n            const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport class AveragePooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport class Pooling2D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new ValueError(`If the strides property of a 2D pooling layer is an Array, ` +\n                    `it is expected to have a length of 2, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport class AveragePooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport class Pooling3D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new ValueError(`If the strides property of a 3D pooling layer is an Array, ` +\n                    `it is expected to have a length of 3, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport class AveragePooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport class GlobalPooling1D extends Layer {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n}\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport class GlobalPooling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n    getConfig() {\n        const config = { dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Layers that augment the functionality of a base layer.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { InputSpec, Layer, SymbolicTensor } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { VALID_BIDIRECTIONAL_MERGE_MODES } from '../keras_format/common';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { rnn, standardizeArgs } from './recurrent';\nimport { deserialize } from './serialization';\n/**\n * Abstract wrapper base class.\n *\n * Wrappers take another layer and augment it in various ways.\n * Do not use this class as a layer, it is only an abstract base class.\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\n */\nexport class Wrapper extends Layer {\n    constructor(args) {\n        // Porting Note: In PyKeras, `self.layer` is set prior to the calling\n        //   `super()`. But we can't do that here due to TypeScript's restriction.\n        //   See: https://github.com/Microsoft/TypeScript/issues/8277\n        //   As a result, we have to add checks in `get trainable()` and\n        //   `set trainable()` below in order to prevent using `this.layer` when\n        //   its value is `undefined`. The super constructor does use the getter\n        //   and the setter of `this.layer`.\n        super(args);\n        this.layer = args.layer;\n    }\n    build(inputShape) {\n        this.built = true;\n    }\n    // TODO(cais): Implement activityRegularizer getter.\n    get trainable() {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        if (this.layer != null) {\n            return this.layer.trainable;\n        }\n        else {\n            return false;\n        }\n    }\n    set trainable(value) {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        if (this.layer != null) {\n            this.layer.trainable = value;\n        }\n    }\n    get trainableWeights() {\n        return this.layer.trainableWeights;\n    }\n    // TODO(cais): Implement setter for trainableWeights.\n    get nonTrainableWeights() {\n        return this.layer.nonTrainableWeights;\n    }\n    // TODO(cais): Implement setter for nonTrainableWeights.\n    get updates() {\n        // tslint:disable-next-line:no-any\n        return this.layer._updates;\n    }\n    // TODO(cais): Implement getUpdatesFor().\n    get losses() {\n        return this.layer.losses;\n    }\n    // TODO(cais): Implement getLossesFor().\n    getWeights() {\n        return this.layer.getWeights();\n    }\n    setWeights(weights) {\n        this.layer.setWeights(weights);\n    }\n    getConfig() {\n        const config = {\n            'layer': {\n                'className': this.layer.getClassName(),\n                'config': this.layer.getConfig(),\n            }\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.layer != null) {\n            this.layer.setFastWeightInitDuringBuild(value);\n        }\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const layerConfig = config['layer'];\n        const layer = deserialize(layerConfig, customObjects);\n        delete config['layer'];\n        const newConfig = { layer };\n        Object.assign(newConfig, config);\n        return new cls(newConfig);\n    }\n}\nexport class TimeDistributed extends Wrapper {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 3) {\n            throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received ` +\n                `input shape ${JSON.stringify(inputShape)}`);\n        }\n        this.inputSpec = [{ shape: inputShape }];\n        const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (!this.layer.built) {\n            this.layer.build(childInputShape);\n            this.layer.built = true;\n        }\n        super.build(inputShape);\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        const childOutputShape = this.layer.computeOutputShape(childInputShape);\n        const timesteps = inputShape[1];\n        return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\n            inputs = getExactlyOneTensor(inputs);\n            // Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n            // values. Hence the inputs can't have an undetermined first (batch)\n            // dimension, which is why we always use the K.rnn approach here.\n            const step = (inputs, states) => {\n                // TODO(cais): Add useLearningPhase.\n                // NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n                //   some cases (e.g., `layer` is a `Sequential` instance), which is\n                //   why `getExactlyOneTensor` is used below.\n                const output = getExactlyOneTensor(this.layer.call(inputs, kwargs));\n                return [output, []];\n            };\n            const rnnOutputs = rnn(step, inputs, [], false /* goBackwards */, null /* mask */, null /* constants */, false /* unroll */, true /* needPerStepOutputs */);\n            const y = rnnOutputs[1];\n            // TODO(cais): Add activity regularization.\n            // TODO(cais): Add useLearningPhase.\n            return y;\n        });\n    }\n}\n/** @nocollapse */\nTimeDistributed.className = 'TimeDistributed';\nserialization.registerClass(TimeDistributed);\nexport function checkBidirectionalMergeMode(value) {\n    generic_utils.checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);\n}\nconst DEFAULT_BIDIRECTIONAL_MERGE_MODE = 'concat';\nexport class Bidirectional extends Wrapper {\n    constructor(args) {\n        super(args);\n        // Note: When creating `this.forwardLayer`, the original Layer object\n        //   (`config.layer`) ought to be cloned. This is why we call\n        //   `getConfig()` followed by `deserialize()`. Without this cloning,\n        //   the layer names saved during serialization will incorrectly contain\n        //   the 'forward_' prefix. In Python Keras, this is done using\n        //   `copy.copy` (shallow copy), which does not have a simple equivalent\n        //   in JavaScript. JavaScript's `Object.assign()` does not copy\n        //   methods.\n        const layerConfig = args.layer.getConfig();\n        const forwDict = {};\n        forwDict['className'] = args.layer.getClassName();\n        forwDict['config'] = layerConfig;\n        this.forwardLayer = deserialize(forwDict);\n        layerConfig['goBackwards'] =\n            layerConfig['goBackwards'] === true ? false : true;\n        const backDict = {};\n        backDict['className'] = args.layer.getClassName();\n        backDict['config'] = layerConfig;\n        this.backwardLayer = deserialize(backDict);\n        this.forwardLayer.name = 'forward_' + this.forwardLayer.name;\n        this.backwardLayer.name = 'backward_' + this.backwardLayer.name;\n        this.mergeMode = args.mergeMode === undefined ?\n            DEFAULT_BIDIRECTIONAL_MERGE_MODE :\n            args.mergeMode;\n        checkBidirectionalMergeMode(this.mergeMode);\n        if (args.weights) {\n            throw new NotImplementedError('weights support is not implemented for Bidirectional layer yet.');\n        }\n        this._stateful = args.layer.stateful;\n        this.returnSequences = args.layer.returnSequences;\n        this.returnState = args.layer.returnState;\n        this.supportsMasking = true;\n        this._trainable = true;\n        this.inputSpec = args.layer.inputSpec;\n        this.numConstants = null;\n    }\n    get trainable() {\n        return this._trainable;\n    }\n    set trainable(value) {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        this._trainable = value;\n        if (this.forwardLayer != null) {\n            this.forwardLayer.trainable = value;\n        }\n        if (this.backwardLayer != null) {\n            this.backwardLayer.trainable = value;\n        }\n    }\n    getWeights() {\n        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());\n    }\n    setWeights(weights) {\n        const numWeights = weights.length;\n        const numeightsOver2 = Math.floor(numWeights / 2);\n        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n        this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n    }\n    computeOutputShape(inputShape) {\n        let layerShapes = this.forwardLayer.computeOutputShape(inputShape);\n        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n            layerShapes = [layerShapes];\n        }\n        layerShapes = layerShapes;\n        let outputShape;\n        let outputShapes;\n        let stateShape;\n        if (this.returnState) {\n            stateShape = layerShapes.slice(1);\n            outputShape = layerShapes[0];\n        }\n        else {\n            outputShape = layerShapes[0];\n        }\n        outputShape = outputShape;\n        if (this.mergeMode === 'concat') {\n            outputShape[outputShape.length - 1] *= 2;\n            outputShapes = [outputShape];\n        }\n        else if (this.mergeMode == null) {\n            outputShapes = [outputShape, outputShape.slice()];\n        }\n        else {\n            outputShapes = [outputShape];\n        }\n        if (this.returnState) {\n            if (this.mergeMode == null) {\n                return outputShapes.concat(stateShape).concat(stateShape.slice());\n            }\n            return [outputShape].concat(stateShape).concat(stateShape.slice());\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    }\n    apply(inputs, kwargs) {\n        let initialState = kwargs == null ? null : kwargs['initialState'];\n        let constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        if (Array.isArray(inputs)) {\n            initialState = inputs.slice(1);\n            inputs = inputs[0];\n        }\n        if ((initialState == null || initialState.length === 0) &&\n            constants == null) {\n            return super.apply(inputs, kwargs);\n        }\n        const additionalInputs = [];\n        const additionalSpecs = [];\n        if (initialState != null) {\n            const numStates = initialState.length;\n            if (numStates % 2 > 0) {\n                throw new ValueError('When passing `initialState` to a Bidrectional RNN, ' +\n                    'the state should be an Array containing the states of ' +\n                    'the underlying RNNs.');\n            }\n            kwargs['initialState'] = initialState;\n            additionalInputs.push(...initialState);\n            const stateSpecs = initialState\n                .map(state => new InputSpec({ shape: state.shape }));\n            this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n            this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n            additionalSpecs.push(...stateSpecs);\n        }\n        if (constants != null) {\n            throw new NotImplementedError('Support for constants in Bidirectional layers is not ' +\n                'implemented yet.');\n        }\n        const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n        for (const tensor of additionalInputs) {\n            if (tensor instanceof SymbolicTensor !== isSymbolicTensor) {\n                throw new ValueError('The initial state of a Bidirectional layer cannot be ' +\n                    'specified as a mix of symbolic and non-symbolic tensors');\n            }\n        }\n        if (isSymbolicTensor) {\n            // Compute the full input and specs, including the states.\n            const fullInput = [inputs].concat(additionalInputs);\n            const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            // Perform the call temporarily and replace inputSpec.\n            // Note: with initial states symbolic calls and non-symbolic calls to\n            // this method differ in how the initial states are passed. For\n            // symbolic calls, the initial states are passed in the first arg, as\n            // an Array of SymbolicTensors; for non-symbolic calls, they are\n            // passed in the second arg as a part of the kwargs. Hence the need to\n            // temporarily modify inputSpec here.\n            // TODO(cais): Make refactoring so that this hacky code below is no\n            // longer needed.\n            const originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            const output = super.apply(fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return super.apply(inputs, kwargs);\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const initialState = kwargs['initialState'];\n            let y;\n            let yRev;\n            if (initialState == null) {\n                y = this.forwardLayer.call(inputs, kwargs);\n                yRev = this.backwardLayer.call(inputs, kwargs);\n            }\n            else {\n                const forwardState = initialState.slice(0, initialState.length / 2);\n                const backwardState = initialState.slice(initialState.length / 2);\n                y = this.forwardLayer.call(inputs, Object.assign(kwargs, { initialState: forwardState }));\n                yRev = this.backwardLayer.call(inputs, Object.assign(kwargs, { initialState: backwardState }));\n            }\n            let states;\n            if (this.returnState) {\n                if (Array.isArray(y)) {\n                    states = y.slice(1).concat(yRev.slice(1));\n                }\n                else {\n                }\n                y = y[0];\n                yRev = yRev[0];\n            }\n            if (this.returnSequences) {\n                yRev = tfc.reverse(yRev, 1);\n            }\n            let output;\n            if (this.mergeMode === 'concat') {\n                output = K.concatenate([y, yRev]);\n            }\n            else if (this.mergeMode === 'sum') {\n                output = tfc.add(y, yRev);\n            }\n            else if (this.mergeMode === 'ave') {\n                output = tfc.mul(.5, tfc.add(y, yRev));\n            }\n            else if (this.mergeMode === 'mul') {\n                output = tfc.mul(y, yRev);\n            }\n            else if (this.mergeMode == null) {\n                output = [y, yRev];\n            }\n            // TODO(cais): Properly set learning phase.\n            if (this.returnState) {\n                if (this.mergeMode == null) {\n                    return output.concat(states);\n                }\n                return [output].concat(states);\n            }\n            return output;\n        });\n    }\n    resetStates(states) {\n        this.forwardLayer.resetStates();\n        this.backwardLayer.resetStates();\n    }\n    build(inputShape) {\n        nameScope(this.forwardLayer.name, () => {\n            this.forwardLayer.build(inputShape);\n        });\n        nameScope(this.backwardLayer.name, () => {\n            this.backwardLayer.build(inputShape);\n        });\n        this.built = true;\n    }\n    computeMask(inputs, mask) {\n        if (Array.isArray(mask)) {\n            mask = mask[0];\n        }\n        let outputMask;\n        if (this.returnSequences) {\n            if (this.mergeMode == null) {\n                outputMask = [mask, mask];\n            }\n            else {\n                outputMask = mask;\n            }\n        }\n        else {\n            if (this.mergeMode == null) {\n                outputMask = [null, null];\n            }\n            else {\n                outputMask = null;\n            }\n        }\n        if (this.returnState) {\n            const states = this.forwardLayer.states;\n            const stateMask = states.map(state => null);\n            if (Array.isArray(outputMask)) {\n                return outputMask.concat(stateMask).concat(stateMask);\n            }\n            else {\n                return [outputMask].concat(stateMask).concat(stateMask);\n            }\n        }\n        else {\n            return outputMask;\n        }\n    }\n    get trainableWeights() {\n        return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);\n    }\n    get nonTrainableWeights() {\n        return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);\n    }\n    // TODO(cais): Implement constraints().\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.forwardLayer != null) {\n            this.forwardLayer.setFastWeightInitDuringBuild(value);\n        }\n        if (this.backwardLayer != null) {\n            this.backwardLayer.setFastWeightInitDuringBuild(value);\n        }\n    }\n    getConfig() {\n        const config = {\n            'mergeMode': this.mergeMode,\n        };\n        // TODO(cais): Add logic for `numConstants` once the property is added.\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        const rnnLayer = deserialize(config['layer']);\n        delete config['layer'];\n        // TODO(cais): Add logic for `numConstants` once the property is added.\n        if (config['numConstants'] != null) {\n            throw new NotImplementedError(`Deserialization of a Bidirectional layer with numConstants ` +\n                `present is not supported yet.`);\n        }\n        // tslint:disable-next-line:no-any\n        const newConfig = config;\n        newConfig['layer'] = rnnLayer;\n        return new cls(newConfig);\n    }\n}\n/** @nocollapse */\nBidirectional.className = 'Bidirectional';\nserialization.registerClass(Bidirectional);\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '3.18.0';\nexport { version };\n//# sourceMappingURL=version.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/register_all_gradients';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops';\nexport * from '@tensorflow/tfjs-core';\nexport * from '@tensorflow/tfjs-layers';\nexport * from '@tensorflow/tfjs-converter';\n// Export data api as tf.data\nimport * as data from '@tensorflow/tfjs-data';\nexport { data };\n// Import and register backends.\nimport '@tensorflow/tfjs-backend-cpu';\nimport '@tensorflow/tfjs-backend-webgl';\n// Import versions of all sub-packages.\nimport { version_core } from '@tensorflow/tfjs-core';\nimport { version_cpu } from '@tensorflow/tfjs-backend-cpu';\nimport { version_webgl } from '@tensorflow/tfjs-backend-webgl';\nimport { version_data } from '@tensorflow/tfjs-data';\nimport { version_layers } from '@tensorflow/tfjs-layers';\nimport { version_converter } from '@tensorflow/tfjs-converter';\nimport { version as version_union } from './version';\nexport const version = {\n    'tfjs-core': version_core,\n    'tfjs-backend-cpu': version_cpu,\n    'tfjs-backend-webgl': version_webgl,\n    'tfjs-data': version_data,\n    'tfjs-layers': version_layers,\n    'tfjs-converter': version_converter,\n    'tfjs': version_union\n};\n//# sourceMappingURL=index.js.map"],"names":["AttributeError","Error","constructor","message","super","Object","setPrototypeOf","this","prototype","RuntimeError","AssertionError","LruCache","maxEntries","cache","Map","get","key","entry","has","delete","set","put","value","size","keyToDelete","keys","next","getMaxEntries","setMaxEntries","i","pyListRepeat","numValues","Array","isArray","newArray","concat","fill","assert","val","count","array","refernce","counter","item","singletonOrArray","xs","length","toList","x","toSnakeCase","name","intermediate","replace","insecure","toLowerCase","toCamelCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","instance","undefined","dict","getClassName","getConfig","convertNDArrayScalarsInConfig","config","forEach","configItem","fields","field","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","functionName","fn","JSON","stringify","className","cls","fromConfig","customObjectsCombined","nestedConfig","backupCustomObjects","assign","returnObj","numberCompare","a","b","reverseNumberCompare","unique","out","push","isObjectEmpty","obj","hasOwnProperty","checkStringTypeUnionValue","values","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","Infinity","every","e","assertPositiveInteger","util","v","Number","isInteger","formatAsFriendlyString","map","join","debounce","f","waitMs","nowFunc","lastResult","lastTime","f2","args","now","mapActivationToFusedKernel","activationName","_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","prefix","toString","VALID_DATA_FORMAT_VALUES","VALID_INTERPOLATION_FORMAT_VALUES","VALID_PADDING_MODE_VALUES","VALID_POOL_MODE_VALUES","VALID_BIDIRECTIONAL_MERGE_MODES","nameMap","checkInterpolationFormat","checkPaddingMode","checkPoolMode","_nameScopeStack","_nameScopeDivider","nameScope","pop","currentNameScopePrefix","getScopedTensorName","tensorName","isValidTensorName","getUniqueTensorName","scopedName","index","result","tensorNameRegex","RegExp","match","parseInt","arrayProd","begin","end","prod","min","NaN","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","range","_epsilon","epsilon","backend","imageDataFormat","cast","dtype","expandDims","axis","outShape","shape","slice","splice","repeat","n","tidy","y","tile","flatten","newShape","batchFlatten","rank","sliceAlongFirstAxis","start","sliceAlongLastAxis","sliceAlongAxis","concatenate","tensors","concatAlongFirstAxis","randomNormal","mean","stddev","seed","dot","activation","bias","xLastDim","ySecondLastDim","transposeA","transposeB","reshapeBias","aFirstDims","aLastDim","bShape","bLastDim","yOtherDims","perm","from","_","outputShape","gather","reference","indices","tensor1d","square","xRank","dataFormat","biasShape","biasAdd","elu","alpha","softsign","dropout","level","noiseShape","hardSigmoid","inTrainPhase","alt","training","VALID_FAN_MODE_VALUES","VALID_DISTRIBUTION_VALUES","checkFanMode","checkDistribution","Initializer","serialization","fromConfigUsesCustomObjects","apply","zeros","ones","mul","scalar","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","randomUniform","DEFAULT_MEAN","DEFAULT_STDDEV","truncatedNormal","gain","eye","computeFans","fanIn","fanOut","receptiveFieldSize","shapeProd","Math","sqrt","scale","mode","distribution","fans","limit","DEFAULT_GAIN","console","warn","normalizedShape","q","linalg","gramSchmidt","transpose","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","getMap","classNameMap","serializeInitializer","initializer","getInitializer","isArrayOfShapes","normalizeShapeList","getExactlyOneTensor","getExactlyOneShape","shapes","countParamsInWeights","weights","weight","reduce","DEFAULT_VARIABLE_NAME_PREFIX","LayerVariable","trainable","constraint","id","originalName","trainable_","read","assertNotDisposed","write","newVal","checkShapesMatch","dispose","isDisposed","batchGetValue","batchSetValue","variablesAndValues","variableAndValue","variable","InputSpec","ndim","maxNDim","minNDim","axes","SymbolicTensor","sourceLayer","inputs","callArgs","outputTensorIndex","_nextNodeID","Node","outboundLayer","inboundLayers","nodeIndices","tensorIndices","inputTensors","outputTensors","inputMasks","outputMasks","inputShapes","outputShapes","layer","outboundNodes","inboundNodes","inboundNames","_nextLayerID","Layer","_callHook","_addedWeightNames","_stateful","activityRegularizer","inputSpec","supportsMasking","_trainableWeights","_nonTrainableWeights","_losses","_updates","_built","inputShape","batchInputShape","batchSize","inputDType","initialWeights","_refCount","fastWeightInitDuringBuild","nodeKey","nodeIndex","getNodeAtIndex","attrName","getInputAt","getOutputAt","input","output","losses","calculateLosses","lossFn","updates","built","w","trainableWeights","filter","nonTrainableWeights","stateful","resetStates","assertInputCompatibility","inputIndex","spec","xShape","xShapeAtAxis","specDim","dim","call","kwargs","invokeCallHook","setCallHook","callHook","clearCallHook","inputsList","allAreSymbolic","noneAreSymbolic","xElem","build","setWeights","outputList","outputListCopy","clone","collectInputShape","computeOutputShape","outputDType","guessOutputDType","warnOnIncompatibleInputShape","addInboundNode","dimMismatch","dimension","allOutputShapes","node","shapeString","countParams","getWeights","trainableOnly","params","weightValueTuples","paramValues","pv","p","addWeight","regularizer","getInitializerFunc","initValue","addLoss","setFastWeightInitDuringBuild","computeMask","mask","TypeError","maskElement","inputTensorList","tensorIndex","disposeWeights","numDisposedVariables","refCountAfterDispose","getSourceInputs","tensor","sourceTensors","previousSources","sparse","inputTensor","batchShape","inputLayer","outputs","assertFeedCompatibility","err","FeedDict","feeds","id2Value","id2Mask","name2Id","feed","add","addFeed","hasKey","names","getValue","getMask","disposeMasks","cachedSorted","cachedRecipientCounts","updateCacheMaxEntries","execute","fetches","feedDict","probe","arrayFetches","fetchArray","outputNames","t","finalOutputs","feedNames","outputName","maxNumTensors","minNumTensors","fetchAndFeedKey","sort","recipientCounts","sorted","getTopologicalSortAndRecipientCounts","internalFeedDict","numTensors","memory","symbolic","srcLayer","inputValues","tensorsToDispose","maskExists","outputMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","Set","fetch","symbolicTensor","recipient","recipientMap2Counts","stack","marks","top","topIsMarked","outputTensor","ENV","env","calcL2Norms","registerFlag","Constraint","defaultMaxValue","defaultAxis","maxValue","norms","desired","defaultMinValue","defaultRate","minValue","rate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","deserializeConstraint","getConstraint","async","resolveScalarsInLogs","logs","promises","scalarsToDispose","valueScalar","data","Promise","all","disposeTensorsInLogs","ModelLoggingVerbosity","DEFAULT_YIELD_EVERY_MS","BaseCallback","validationData","setParams","onEpochBegin","epoch","onEpochEnd","onBatchBegin","batch","onBatchEnd","onTrainBegin","onTrainEnd","setModel","model","CallbackList","callbacks","queueLength","append","callback","BaseLogger","seen","totals","oldTotalsToDispose","total","log","div","keep","History","history","syncData","valueArray","tensorToDispose","CustomCallback","yieldEvery","currentEpoch","nextFrameFunc","nextFrame","onYield","maybeWait","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","ps","standardizeCallbacks","callbackConfigs","callbackConfig","registerCallbackConstructor","verbosityLevel","callbackConstructor","checkForDuplicate","constructors","levelName","ctor","clear","createCallbacks","configureCallbacks","verbose","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","callbackList","samples","steps","metrics","l2Normalize","squareSum","epsilonTensor","norm","meanSquaredError","yTrue","yPred","meanAbsoluteError","meanAbsolutePercentageError","diff","clippedTrue","MAX_VALUE","absResult","meanSquaredLogarithmicError","clippedPred","firstLog","secondLog","squaredHinge","maxResult","hinge","categoricalHinge","pos","neg","logcosh","log2","predictionDiff","logcoshResult","categoricalCrossentropy","target","fromLogits","outputSum","sparseCategoricalCrossentropy","flatTarget","oneHotTarget","sigmoidCrossEntropyWithLogits","labels","logits","reluLogits","negAbsLogits","binaryCrossentropy","kullbackLeiblerDivergence","poisson","logPred","cosineProximity","trueNormalized","predNormalized","trueXPred","lossesMap","identifierOrFn","errMsg","includes","binaryAccuracy","threshold","yPredThresholded","categoricalAccuracy","truePositives","falsePositives","precision","tp","fp","denominator","sparseCategoricalAccuracy","metricsMap","mse","MSE","mae","MAE","mape","MAPE","cosine","getLossOrMetricName","fnName","getOptimizer","optimizerMap","train","adagrad","adadelta","adam","adamax","rmsprop","sgd","MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH","checkUserDefinedMetadata","userDefinedMetadata","modelName","checkSize","getPrototypeOf","plainObjectCheck","xType","printSummary","lineLength","positions","printFn","sequentialLike","isModelSequentialLike","toDisplay","relevantNodes","floor","depth","nodesByDepth","printRow","layers","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","collectedTrainableWeights","nodes","depthNodes","flag","line","connections","inboundLayer","inboundLayerIndex","inboundTensorIndex","firstConnection","isArrayItemInputOrOutputName","pythonicConfig","tsArray","arrayLength","tsDict","pythonicKey","pythonicValue","tsKey","convertTsToPythonic","tsConfig","pyArray","pyDict","tsValue","pyKey","version","Container","containerNodes","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","internalContainerRefs","inputNames","feedInputShapes","feedInputNames","feedOutputNames","internalInputShapes","internalOutputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","finishedNodes","nodesInProgress","numInboundLayers","reversedNodesInDecreasingDepth","reverse","previousDepth","inboundNode","nodeID","layersByDepth","layerID","depthKeys","layersForDepth","aIndex","bIndex","computableTensors","layersWithCompleteInput","allNames","numOccurrences","container","loadWeights","strict","nameToWeight","totalWeightsCount","validatedName","tokens","split","shortenNameArray","unsetNames","updatedConfig","theConfig","modelConfig","toJSON","unused","returnString","masks","runInternalGraph","layersToOutputShapes","shapeKey","j","outputShapeKeys","tensorMap","referenceInputTensors","referenceOutputTensors","computedData","computedTensors","computedMasks","computedTensor","computedMask","buildNodeConversionMap","nodeConversionMap","keptNodes","originalNodeIndex","getLayer","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","nodeData","newNodeIndex","modelInputs","modelOutputs","createdLayers","unprocessedNodes","addUnprocessedNode","processNode","inputData","inboundLayerName","inboundNodeIndex","processLayer","layerData","layerName","inboundNodesData","layersFromConfig","currentUnprocessedNodesForLayer","inputLayersFromConfig","layerOutputTensors","outputLayersFromConfig","standardizeSampleOrClassWeights","xWeight","weightType","numOutputs","standardizeClassWeights","classWeight","standardizeWeights","sampleWeight","sampleWeightMode","yClasses","argMax","reshape","yClassIndices","classSampleWeight","classIndex","computeWeightedLoss","sampleWeights","DEFAULT_VALIDATION_BATCH_SIZE","standardizeDataIteratorOutput","iteratorOut","ys","iteratorOutObj","flattenedXs","flattenTensorOrArrayOrMap","flattenedYs","xIndex","yIndex","inputOrOutput","standardizeTensorValidationData","fitDataset","dataset","hasBatchesPerEpoch","batchesPerEpoch","optimizer","isTraining","valXs","valYs","isDatasetObject","validationBatches","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","getStepsPerEpoch","stopTraining_","dataIterator","iterator","epochLogs","stepsDone","batchIndex","done","batchLogs","standardClassWeights","ins","outs","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","isFinite","isLazyIteratorObject","hasBatches","testFunction","numExamples","xsAndYs","batchOuts","batchOut","oldScalar","checkBatchSize","sliceArrays","arrays","stop","sliceArraysByIndices","makeBatches","batchStart","fitLoop","valF","valIns","shuffle","validationSteps","checkNumSamples","indexArray","epochIndexArray1D","batchIds","insBatch","testLoop","fitTensors","targets","originalInputs","originalTargets","inputValX","inputValY","valX","valY","checkBatchAxis","standardizedOuts","standardizeUserData","valStandardized","validationSplit","splitAt","originalBatchSize","valFunction","makeTestFunction","disposeNewTensors","ensureTensorsRank2OrHigher","Tensor","refTensors","oldTensorIds","oldTensor","isDataTensor","isDataArray","isDataDict","standardizeInputData","exceptionPrefix","gotUnexpectedData","refDim","checkArrayLengths","setX","setY","checkLossAndTargetCompatibility","lossFns","keyLosses","loss","slicedYShape","slicedShape","targetDim","outDim","checkInputData","collectMetrics","wrappedMetrics","nestedMetrics","outputMetrics","LAYERS_MODEL_FORMAT_NAME","summary","compile","optimizer_","isOptimizerOwned","Optimizer","lossFunctions","theLosses","l","lossFunction","feedOutputShapes","feedLossFns","skipTargetIndices","metricsTensors","weightedLoss","appendMetric","outputIndex","metricName","metricTensor","handleMetrics","metricNamePrefix","accFn","weightedMetricFn","metric","suffix","metricFn","metricResult","standardizeUserDataXY","testOuts","stepsName","numSamples","outputsIsArray","retrieveSymbolicTensors","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layerOutputNames","remainingNames","predictLoop","outsBatches","predict","xsRank2OrHigher","predictOnBatch","standardXs","standardYs","standardSampleWeights","classWeights","dedupedOutLabels","newLabel","dupIndex","lossValues","metricsValues","totalLossFunction","totalLoss","meanLoss","weightedMetric","regularizerLoss","variables","param","returnCost","totalLossValue","minimize","valOutputs","meanMetric","fit","trainOnBatch","standardizeOut","getNamedWeights","namedWeights","weightValues","stopTraining","numTensorsBeforeOptmizerDisposal","getLossIdentifiers","lossNames","getMetricIdentifiers","metricsIdentifiers","getTrainingConfig","optimizer_config","class_name","loadTrainingConfig","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","lossEntry","save","handlerOrURL","handlers","io","weightDataAndSpecs","unusedArg","modelArtifacts","modelTopology","format","generatedBy","convertedBy","includeOptimizer","optimizerWeightData","specs","optimizerWeightSpecs","weightData","weightSpecs","setUserDefinedMetadata","getUserDefinedMetadata","Functional","checkShape","some","isLayerModelInstance","modelLayer","lastLayerIndex","configArray","extraModelConfig","conf","Elu","Selu","Relu","Relu6","Linear","Sigmoid","HardSigmoid","Softplus","Softsign","Tanh","LogSoftmax","Swish","Mish","serializeActivation","deserializeActivation","getActivation","assertObjectArgs","Regularizer","l1","l2","hasL1","hasL2","regularization","sum","abs","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeRegularizer","deserializeRegularizer","getRegularizer","relu","clipByValue","baseConfig","DEFAULT_ALPHA","leakyRelu","DEFAULT_ALPHA_INITIALIZER","alphaInitializer","alphaRegularizer","alphaConstraint","sharedAxes","paramShape","prelu","DEFAULT_THETA","theta","greater","DEFAULT_AXIS","softmax","normalizeArray","singleValue","convOutputLength","inputLength","filterSize","padding","stride","dilation","dilatedFilterSize","outputLength","deconvLength","dimSize","strideSize","kernelSize","preprocessConv2DInput","preprocessConv3DInput","conv1dWithBias","kernel","strides","dilationRate","conv2dWithBiasActivation","pad","dilations","conv3dWithBias","BaseConv","DEFAULT_KERNEL_INITIALIZER","DEFAULT_BIAS_INITIALIZER","verifyArgs","useBias","biasInitializer","biasConstraint","biasRegularizer","Conv","filters","kernelInitializer","kernelConstraint","kernelRegularizer","channelAxis","inputDim","kernelShape","biasValue","fusedActivationName","newSpace","space","newDim","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","outHeight","outWidth","heightAxis","widthAxis","dAxis","kernelD","strideD","outDepth","depthAxis","SeparableConv","DEFAULT_DEPTHWISE_INITIALIZER","DEFAULT_POINTWISE_INITIALIZER","depthwiseKernel","pointwiseKernel","depthMultiplier","depthwiseInitializer","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","cropping","hSliced","DEFAULT_SIZE","interpolation","resized","resizeNearestNeighbor","resizeBilinear","depthwiseConv2d","rows","cols","outFilters","outRows","outCols","standardizeArgs","initialState","constants","numConstants","toListOrNull","rnn","stepFunction","initialStates","goBackwards","unroll","needPerStepOutputs","perStepOutputs","lastOutput","states","timeSteps","perStepInputs","perStepMasks","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","newStates","state","cell","cells","stateSize","returnSequences","returnState","stateSpec","states_","keptStates","getStates","numStates","setStates","outputDim","stateShape","stateMask","s","constantShape","stepInputShape","expectedShape","standardized","additionalInputs","additionalSpecs","isTensor","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","step","rnnOutputs","cellConfig","DEFAULT_ACTIVATION","DEFAULT_RECURRENT_INITIALIZER","units","recurrentInitializer","recurrentRegularizer","recurrentConstraint","recurrentDropout","dropoutFunc","dropoutMask","recurrentDropoutMask","recurrentKernel","prevOutput","h","generateDropoutMask","dpMask","recDpMask","DEFAULT_RECURRENT_ACTIVATION","resetAfter","recurrentActivation","implementation","hTMinus1","z","r","hh","matrixX","recurrentKernelValue","rk1","rk2","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","unitForgetBias","_a","capturedBiasInit","capturedUnits","bI","bF","bCAndH","cTMinus1","c","o","z0","z1","z2","z3","nestedStates","newNestedStates","callInputs","cellStates","getCellConfig","cellConfigs","tuples","numParams","inputWeights","droppedInputs","createMask","__rest","getOwnPropertySymbols","propertyIsEnumerable","ConvRNN2D","computeSingleOutputShape","isChannelsFirst","hOut","wOut","numOfKernels","recurrentKernelShape","init","biasI","biasF","biasCAndO","applyDropout","xI","xF","xC","xO","recDropoutMask","hI","hF","hC","hO","kernelChannelAxis","kernelI","kernelF","kernelC","kernelO","biasC","biasO","inputConv","recKernelI","recKernelF","recKernelC","recKernelO","recurrentConv","getNoiseShape","inputLastDim","permutation","targetShape","isUnknown","fixUnknownDimension","errorMsg","finalShape","known","unknown","originalSize","anyUnknownDims","dims","expectedSortedIndices","dimsIncludingBatch","maskValue","any","notEqual","keepDims","booleanMask","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsInitializer","embeddingsRegularizer","embeddingsConstraint","maskZero","zerosLike","inLens","k","s1","s2","Merge","mergeFunction","computeElementwiseOpOutputShape","shape1","shape2","batchSizes","allRanks","reshapeRequired","reshapedInputs","inputDims","xNDim","transposed","xTransposed","yNDim","yShape","allNoneShape","shapeSet","shapeWithoutConcatAxis","exists","allNullMasks","concatenatedMasks","interpretAxis","batchDot","axesArray","diffShape","adjX","adjY","idx","squeezeAxes","normalize","interpretAxes","x1","x2","noised","_getNoiseShape","alphaP","keptIdx","greaterEqual","batchNormalization","variance","beta","gamma","regularNormalizeBatchInTraining","reductionAxes","meanAndVariance","normed","broadcastNormalizeBatchInTraining","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","normalizeBatchInTraining","momentum","center","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","movingMean","movingVariance","broadcastShape","sortedReductionAxes","needsBroadcasting","normalizeInference","broadcastMovingMean","broadcastMovingVariance","normedTraining","doMovingAverage","decay","origValue","updateDelta","updateMovingMeanAndVariance","nDims","moments","broadcast","offset","momentsTiling","scaleOffsetTiling","spatial2dPadding","pattern","heightPadding","widthPadding","pool2d","poolSize","poolMode","paddingString","pool3d","Pooling1D","poolingFunction","Pooling2D","Pooling3D","depths","GlobalPooling1D","GlobalPooling2D","Wrapper","newConfig","childInputShape","childOutputShape","timesteps","checkBidirectionalMergeMode","DEFAULT_BIDIRECTIONAL_MERGE_MODE","forwDict","forwardLayer","backDict","backwardLayer","mergeMode","_trainable","numWeights","numeightsOver2","layerShapes","stateSpecs","isSymbolicTensor","yRev","forwardState","backwardState","rnnLayer","version_core"],"sourceRoot":""}