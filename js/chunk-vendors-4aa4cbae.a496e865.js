"use strict";(self["webpackChunkstudent1"]=self["webpackChunkstudent1"]||[]).push([[534],{60336:function(t,e,s){s.d(e,{Gc4:function(){return i.ready}});var i=s(64243);s(72608),s(46542);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class n extends Error{constructor(t){super(t),Object.setPrototypeOf(this,n.prototype)}}class r extends Error{constructor(t){super(t),Object.setPrototypeOf(this,r.prototype)}}class a extends Error{constructor(t){super(t),Object.setPrototypeOf(this,a.prototype)}}class o extends Error{constructor(t){super(t),Object.setPrototypeOf(this,o.prototype)}}class l extends Error{constructor(t){super(t),Object.setPrototypeOf(this,l.prototype)}}Error;
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class h{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const t=this.cache.keys().next().value;this.cache.delete(t)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const t=this.cache.keys().next().value;this.cache.delete(t)}this.maxEntries=t}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function u(t,e){if(Array.isArray(t)){let s=[];for(let i=0;i<e;i++)s=s.concat(t);return s}{const s=new Array(e);return s.fill(t),s}}function c(t,e){if(!t)throw new l(e)}function p(t,e){let s=0;for(const i of t)i===e&&s++;return s}function d(t){return 1===t.length?t[0]:t}function g(t){return Array.isArray(t)?t:[t]}function f(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2"),s=e.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==s[0]?s:"private"+s}function m(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}let y={};function b(t){if(null===t||void 0===t)return null;const e={};return e["className"]=t.getClassName(),e["config"]=t.getConfig(),e}function w(t){if(null!=t&&"object"===typeof t)if(Array.isArray(t))t.forEach((t=>w(t)));else{const e=Object.keys(t);for(const s of e){const e=t[s];null!=e&&"object"===typeof e&&(Array.isArray(e)||"ndarray"!==e["type"]||"number"!==typeof e["value"]?w(e):t[s]=e["value"])}}}function z(t,e={},s={},i="object",n=!1){if("string"===typeof t){const n=t;let r;if(n in s)r=s[n];else if(n in y)r=y[n];else if(r=e[n],null==r)throw new a(`Unknown ${i}: ${t}. This may be due to one of the following reasons:\n1. The ${i} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${i} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=t;if(null==r["className"]||null==r["config"])throw new a(`${i}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const o=r["className"];let l,h;if(o in s?[l,h]=s[o]:o in y?[l,h]=y["className"]:o in e&&([l,h]=e[o]),null==l)throw new a(`Unknown ${i}: ${o}. This may be due to one of the following reasons:\n1. The ${i} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${i} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=h){const t={};for(const s of Object.keys(y))t[s]=y[s];for(const n of Object.keys(s))t[n]=s[n];const e=r["config"];e["customObjects"]=t;const i=Object.assign({},y);for(const n of Object.keys(s))y[n]=s[n];w(r["config"]);const a=h(l,r["config"],s,n);return y=Object.assign({},i),a}{const t=Object.assign({},y);for(const i of Object.keys(s))y[i]=s[i];const e=new l(r["config"]);return y=Object.assign({},t),e}}}function k(t,e){return t<e?-1:t>e?1:0}function S(t,e){return-1*k(t,e)}function N(t){if(null==t)return t;const e=[];for(const s of t)-1===e.indexOf(s)&&e.push(s);return e}function v(t){if(null==t)throw new a(`Invalid value in obj: ${JSON.stringify(t)}`);for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function A(t,e,s){if(null!=s&&t.indexOf(s)<0)throw new a(`${s} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function C(t,e,s=0,i=1/0){return c(s>=0),c(i>=s),Array.isArray(t)&&t.length>=s&&t.length<=i&&t.every((t=>typeof t===e))}function I(t,e){Array.isArray(t)?(i.util.assert(t.length>0,(()=>`${e} is unexpectedly an empty array.`)),t.forEach(((t,s)=>I(t,`element ${s+1} of ${e}`)))):i.util.assert(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got ${x(t)}.`))}function x(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>x(t))).join(",")+"]":"string"===typeof t?`"${t}"`:`${t}`}function T(t,e,s){let n,r=null!=s?s():i.util.now();const a=(...a)=>{const o=null!=s?s():i.util.now();return o-r<e||(r=o,n=t(...a)),n};return a}function L(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let E=0;function $(){return E++}const D={};function F(t=""){return t in D||(D[t]=0),D[t]+=1,t+D[t].toString()}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const R=["channelsFirst","channelsLast"],O=["nearest","bilinear"],_=["valid","same","causal"],M=["max","avg"],B=["sum","mul","concat","ave"],W=new Map;function U(t){A(R,"DataFormat",t)}function j(t){A(O,"InterpolationFormat",t)}function V(t){A(_,"PaddingMode",t)}function P(t){A(M,"PoolMode",t)}const q=[],J="/";function H(t,e){q.push(t);try{const t=e();return q.pop(),t}catch(s){throw q.pop(),s}}function Z(){return 0===q.length?"":q.join(J)+J}function K(t){if(!X(t))throw new Error("Not a valid tensor name: '"+t+"'");return Z()+t}function G(t){if(!X(t))throw new Error("Not a valid tensor name: '"+t+"'");W.has(t)||W.set(t,0);const e=W.get(t);if(W.set(t,W.get(t)+1),e>0){const s=`${t}_${e}`;return W.set(s,1),s}return t}const Y=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function X(t){return!!t.match(Y)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Q(t){return t===parseInt(t.toString(),10)}function tt(t,e,s){null==e&&(e=0),null==s&&(s=t.length);let i=1;for(let n=e;n<s;++n)i*=t[n];return i}function et(t){if(0===t.length)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let s=0;s<t.length;s++){const i=t[s];i<e&&(e=i)}return e}function st(t){if(0===t.length)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let s=0;s<t.length;s++){const i=t[s];i>e&&(e=i)}return e}function it(t,e){if(e<t)throw new a(`end (${e}) < begin (${t}) is forbidden.`);const s=[];for(let i=t;i<e;++i)s.push(i);return s}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let nt;function rt(){return null==nt&&(nt=(0,i.backend)().epsilon()),nt}function at(){return"channelsLast"}function ot(t,e){return i.cast(t,e)}function lt(t,e=-1){const s=t.shape.slice();return e<0&&(e=s.length+e+1),s.splice(e,0,1),i.reshape(t,s)}function ht(t,e){return(0,i.tidy)((()=>{if(2!==t.shape.length)throw new a(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);const s=lt(t,1);return yt(s,[1,e,1])}))}function ut(t){const e=[tt(t.shape)];return i.reshape(t,e)}function ct(t){if(t.rank<=1)throw new a(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],tt(t.shape,1)];return i.reshape(t,e)}function pt(t,e,s){return(0,i.tidy)((()=>{switch(t.rank){case 1:return i.slice1d(t,e,s);case 2:return i.slice2d(t,[e,0],[s,t.shape[1]]);case 3:return i.slice3d(t,[e,0,0],[s,t.shape[1],t.shape[2]]);case 4:return i.slice4d(t,[e,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3]]);case 5:return i.slice(t,[e,0,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return i.slice(t,[e,0,0,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new a(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function dt(t,e,s){return(0,i.tidy)((()=>{switch(t.rank){case 1:return i.slice1d(t,e,s);case 2:return i.slice2d(t,[0,e],[t.shape[0],s]);case 3:return i.slice3d(t,[0,0,e],[t.shape[0],t.shape[1],s]);case 4:return i.slice4d(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],s]);default:throw new a(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function gt(t,e,s,n){return(0,i.tidy)((()=>{switch(t.rank){case 1:return i.slice1d(t,e,s);case 2:switch(n){case 1:return pt(t,e,s);case 2:return dt(t,e,s);default:throw new a(`The axis is not within the rank of the tensor ${n}`)}case 3:switch(n){case 1:return pt(t,e,s);case 2:return i.slice3d(t,[0,e,0],[t.shape[0],s,t.shape[2]]);case 3:return dt(t,e,s);default:throw new a(`The axis is not within the rank of the tensor ${n}`)}case 4:switch(n){case 1:return pt(t,e,s);case 2:return i.slice4d(t,[0,e,0,0],[t.shape[0],s,t.shape[2],t.shape[3]]);case 3:return i.slice4d(t,[0,0,e,0],[t.shape[0],t.shape[1],s,t.shape[3]]);case 4:return dt(t,e,s);default:throw new a(`The axis is not within the rank of the tensor ${n}`)}default:throw new a(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function ft(t,e=-1){let s;return e<0&&(s=t[0].rank,e=0!==s?s:0),e===t[0].rank&&(e=-1),i.concat(t,e)}function mt(t,e){switch(t.rank){case 1:return i.concat1d([t,e]);case 2:return i.concat2d([t,e],0);case 3:return i.concat3d([t,e],0);case 4:return i.concat4d([t,e],0);default:throw new a(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function yt(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new a(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return i.tile(t,e)}function bt(t,e=0,s=1,n,r){return i.randomNormal(t,e,s,n,r)}function wt(t,e,s,n){if(t.rank<2||e.rank<2)throw new o(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){const s=t.shape.slice(-1)[0],i=e.shape.slice(-2)[0];if(s!==i)throw new o(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`)}if(2===t.rank&&2===e.rank){const r=!1,a=!1;return i.fused.matMul({a:t,b:e,transposeA:r,transposeB:a,bias:n?St(t.rank,n,at()):null,activation:s})}{const r=t.shape.slice(),a=r.pop();t=i.reshape(t,[-1,a]);const o=e.shape.slice(),l=o.pop(),h=o.pop(),u=[...o,l],c=Array.from({length:e.rank},((t,s)=>0===s?e.rank-2:s<=e.rank-2?s-1:s));e=i.reshape(i.transpose(e,c),[h,-1]);const p=[...r,...u],d=!1,g=!1;return i.reshape(i.fused.matMul({a:t,b:e,transposeA:d,transposeB:g,bias:n?St(t.rank,n,at()):null,activation:s}),p)}}function zt(t,e,s){return(0,i.tidy)((()=>(e=Array.isArray(e)?(0,i.tensor1d)(e,"int32"):i.cast(e,"int32"),i.gather(t,e,s))))}function kt(t){return i.mul(t,t)}function St(t,e,s){const n=e.shape;if(1!==e.rank&&e.rank!==t)throw new a(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);if(5===t){if("channelsFirst"===s)return 1===n.length?i.reshape(e,[1,n[0],1,1,1]):i.reshape(e,[1,n[3],n[0],n[1],n[2]]);if("channelsLast"===s)return 1===n.length?i.reshape(e,[1,1,1,1,n[0]]):i.reshape(e,[1].concat(n))}else if(4===t){if("channelsFirst"===s)return 1===n.length?i.reshape(e,[1,n[0],1,1]):i.reshape(e,[1,n[2],n[0],n[1]]);if("channelsLast"===s)return 1===n.length?i.reshape(e,[1,1,1,n[0]]):i.reshape(e,[1].concat(n))}else if(3===t){if("channelsFirst"===s)return 1===n.length?i.reshape(e,[1,n[0],1]):i.reshape(e,[1,n[1],n[0]]);if("channelsLast"===s)return 1===n.length?i.reshape(e,[1,1,n[0]]):i.reshape(e,[1].concat(n))}else if(t<3)return e;throw new a(`Unsupported input rank by biasAdd: ${e.rank}`)}function Nt(t,e,s){return(0,i.tidy)((()=>(null==s&&(s=at()),U(s),i.add(t,St(t.rank,e,s)))))}function vt(t,e=1){if(1!==e)throw new o(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return i.elu(t)}function At(t){return(0,i.tidy)((()=>i.div(t,i.add(i.abs(t),1))))}function Ct(t,e,s,n){return(0,i.tidy)((()=>i.dropout(t,e,s,n)))}function It(t){return(0,i.tidy)((()=>{const e=i.add(.5,i.mul(.2,t));return i.clipByValue(e,0,1)}))}function xt(t,e,s=!1){return s?t():e()}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Tt=["fanIn","fanOut","fanAvg"],Lt=["normal","uniform","truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Et(t){A(Tt,"FanMode",t)}function $t(t){A(Lt,"Distribution",t)}class Dt extends i.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Ft extends Dt{apply(t,e){return(0,i.zeros)(t,e)}}Ft.className="Zeros",i.serialization.registerClass(Ft);class Rt extends Dt{apply(t,e){return(0,i.ones)(t,e)}}Rt.className="Ones",i.serialization.registerClass(Rt);class Ot extends Dt{constructor(t){if(super(),"object"!==typeof t)throw new a(`Expected argument of type ConstantConfig but got ${t}`);if(void 0===t.value)throw new a(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return(0,i.tidy)((()=>(0,i.mul)((0,i.scalar)(this.value),(0,i.ones)(t,e))))}getConfig(){return{value:this.value}}}Ot.className="Constant",i.serialization.registerClass(Ot);class _t extends Dt{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return(0,i.randomUniform)(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}_t.className="RandomUniform",i.serialization.registerClass(_t);class Mt extends Dt{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32","float32"!==e&&"int32"!==e)throw new o(`randomNormal does not support dType ${e}.`);return bt(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Mt.className="RandomNormal",i.serialization.registerClass(Mt);class Bt extends Dt{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32","float32"!==e&&"int32"!==e)throw new o(`truncatedNormal does not support dType ${e}.`);return(0,i.truncatedNormal)(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Bt.className="TruncatedNormal",i.serialization.registerClass(Bt);class Wt extends Dt{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return(0,i.tidy)((()=>{if(2!==t.length||t[0]!==t[1])throw new a("Identity matrix initializer can only be used for 2D square matrices.");return(0,i.mul)(this.gain,(0,i.eye)(t[0]))}))}getConfig(){return{gain:this.gain}}}function Ut(t,e="channelsLast"){let s,i;if(U(e),2===t.length)s=t[0],i=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=tt(t,2);s=t[1]*e,i=t[0]*e}else if("channelsLast"===e){const e=tt(t,0,t.length-2);s=t[t.length-2]*e,i=t[t.length-1]*e}}else{const e=tt(t);s=Math.sqrt(e),i=Math.sqrt(e)}return[s,i]}Wt.className="Identity",i.serialization.registerClass(Wt);class jt extends Dt{constructor(t){if(super(),t.scale<0)throw new a(`scale must be a positive float. Got: ${t.scale}`);this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,Et(this.mode),this.distribution=null==t.distribution?"normal":t.distribution,$t(this.distribution),this.seed=t.seed}apply(t,e){const s=Ut(t),n=s[0],r=s[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,n):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(n+r)/2),"normal"===this.distribution){const s=Math.sqrt(a);if(e=e||"float32","float32"!==e&&"int32"!==e)throw new o(`${this.getClassName()} does not support dType ${e}.`);return(0,i.truncatedNormal)(t,0,s,e,this.seed)}{const s=Math.sqrt(3*a);return(0,i.randomUniform)(t,-s,s,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}jt.className="VarianceScaling",i.serialization.registerClass(jt);class Vt extends jt{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return jt.className}}Vt.className="GlorotUniform",i.serialization.registerClass(Vt);class Pt extends jt{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return jt.className}}Pt.className="GlorotNormal",i.serialization.registerClass(Pt);class qt extends jt{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return jt.className}}qt.className="HeNormal",i.serialization.registerClass(qt);class Jt extends jt{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return jt.className}}Jt.className="HeUniform",i.serialization.registerClass(Jt);class Ht extends jt{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return jt.className}}Ht.className="LeCunNormal",i.serialization.registerClass(Ht);class Zt extends jt{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return jt.className}}Zt.className="LeCunNormal",i.serialization.registerClass(Zt);class Kt extends Dt{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new o("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return(0,i.tidy)((()=>{if(t.length<2)throw new o("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=t[0]>t[1]?[t[1],t[0]]:t,s=bt(e,0,1,"float32");let n=i.linalg.gramSchmidt(s);return t[0]>t[1]&&(n=(0,i.transpose)(n)),(0,i.mul)(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Kt.className="Orthogonal",i.serialization.registerClass(Kt);const Gt={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Yt(t,e={}){return z(t,i.serialization.SerializationMap.getMap().classNameMap,e,"initializer")}function Xt(t){return b(t)}function Qt(t){if("string"===typeof t){const e=t in Gt?Gt[t]:t;if("GlorotNormal"===e)return new Pt;if("GlorotUniform"===e)return new Vt;if("HeNormal"===e)return new qt;if("HeUniform"===e)return new Jt;if("LeCunNormal"===e)return new Ht;if("LeCunUniform"===e)return new Zt;{const t={};return t["className"]=e,t["config"]={},Yt(t)}}return t instanceof Dt?t:Yt(t)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function te(t){return Array.isArray(t)&&Array.isArray(t[0])}function ee(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function se(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new a(`Expected Tensor length to be 1; got ${t.length}`);e=t[0]}else e=t;return e}function ie(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return t[0];throw new a(`Expected exactly 1 Shape; got ${t.length}`)}return t}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ne(t){let e=0;for(const s of t)0===s.shape.length?e+=1:e+=s.shape.reduce(((t,e)=>t*e));return e}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const re="Variable";class ae{constructor(t,e="float32",s=re,n=!0,r=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=$(),s=null==s?re:s,this.originalName=K(s),this.name=G(this.originalName),this.trainable_=n,this.constraint=r,this.val=i.variable(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),oe(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function oe(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}function le(t){return t.map((t=>t.read()))}function he(t){t.forEach((t=>{const e=t[0];e.write(t[1])}))}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ue{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class ce{constructor(t,e,s,i,n,r,a){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=i,this.callArgs=n,this.outputTensorIndex=a,this.id=$(),null!=r&&(this.originalName=K(r),this.name=G(this.originalName)),this.rank=e.length}}let pe=0;class de{constructor(t,e){this.callArgs=e,this.id=pe++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)null!=s&&s.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ge=0;class fe extends i.serialization.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ge++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=f(t)+"_"+F(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let s=null;null!=t.batchSize&&(s=t.batchSize),e=[s].concat(t.inputShape)}this.batchInputShape=e;let s=t.dtype;null==s&&(s=t.inputDType),null==s&&(s="float32"),this.dtype=s}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new r(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new a(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return d(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return d(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new n(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new n(`Layer ${this.name} is not connected, no input to return.`);return d(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new n(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new n(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return d(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=g(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=g(this.inputSpec);if(t.length!==e.length)throw new a(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const i=t[s],n=e[s];if(null==n)continue;const r=i.rank;if(null!=n.ndim&&r!==n.ndim)throw new a(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${n.ndim}, found ndim=${r}`);if(null!=n.maxNDim&&r>n.maxNDim)throw new a(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${n.maxNDim}, found ndim=${r}`);if(null!=n.minNDim&&r<n.minNDim)throw new a(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${n.minNDim}, found ndim=${r}.`);if(null!=n.dtype&&i.dtype!==n.dtype)throw new a(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${n.dtype}, found dtype=${i.dtype}.`);if(n.axes){const t=i.shape;for(const e in n.axes){const i=Number(e),r=n.axes[e],o=i>=0?t[i]:t[t.length+i];if(null!=r&&-1===[r,null].indexOf(o))throw new a(`Input ${s} is incompatible with layer ${this.name}: expected axis ${i} of input shape to have value ${r} but got shape ${t}.`)}}if(null!=n.shape)for(let t=0;t<n.shape.length;++t){const e=n.shape[t],r=i.shape[t];if(null!=e&&null!=r&&e!==r)throw new a(`Input ${s} is incompatible with layer ${this.name}: expected shape=${n.shape}, found shape=${i.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=g(t);let i=!0;for(const r of s)if(!(r instanceof ce)){i=!1;break}let n=!0;for(const r of s)if(r instanceof ce){n=!1;break}if(i===n)throw new a("Arguments to apply() must be all SymbolicTensors or all Tensors");return H(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const s of g(t))e.push(s.shape);this.build(d(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&n&&(this._refCount=1)}if(this.assertInputCompatibility(t),n){let i=this.call(t,e);const n=g(i),r=[];for(let t of n)-1!==s.indexOf(t)&&(t=t.clone()),r.push(t);if(i=d(r),null!=this.activityRegularizer)throw new o("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}{const s=me(t),i=this.computeOutputShape(s);let n;const r=ye(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?s[0]:s),n=null!=i&&i.length>0&&Array.isArray(i[0])?i.map(((s,i)=>new ce(r,s,this,g(t),e,this.name,i))):new ce(r,i,this,g(t),e,this.name),this.addInboundNode(t,n,null,null,s,i,e),this._refCount++,null!=this.activityRegularizer)throw new o("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return n}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach(((s,i)=>{null!=s&&null!=t[i]&&t[i]!==s&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new n(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new n(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new r(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ne(this.weights)}build(t){this.built=!0}getWeights(t=!1){return le(t?this.trainableWeights:this.weights)}setWeights(t){(0,i.tidy)((()=>{const e=this.weights;if(e.length!==t.length)throw new a(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],n=le(e);for(let r=0;r<n.length;++r){const o=n[r],l=e[r],h=t[r];if(!i.util.arraysEqual(o.shape,h.shape))throw new a(`Layer weight shape ${o.shape} not compatible with provided weight shape ${h.shape}`);s.push([l,h])}he(s)}))}addWeight(t,e,s,i,n,r,o,l){if(-1!==this._addedWeightNames.indexOf(t))throw new a(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(i=null!=l?l():Qt("zeros"));const h=i.apply(e,s),u=new ae(h,s,t,r,o);return h.dispose(),null!=n&&this.addLoss((()=>n.apply(u.read()))),null==r&&(r=!0),r?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=g(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,s,i,n,r,a=null){const o=g(t);e=g(e),s=g(s),i=g(i),n=ee(n),r=ee(r);const l=[],h=[],u=[];for(const c of o)l.push(c.sourceLayer),h.push(c.nodeIndex),u.push(c.tensorIndex);new de({outboundLayer:this,inboundLayers:l,nodeIndices:h,tensorIndices:u,inputTensors:o,outputTensors:e,inputMasks:s,outputMasks:i,inputShapes:n,outputShapes:r},a);for(let c=0;c<e.length;c++)e[c].sourceLayer=this,e[c].nodeIndex=this.inboundNodes.length-1,e[c].tensorIndex=c}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t["batchInputShape"]=this.batchInputShape),null!=this.dtype&&(t["dtype"]=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0===--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function me(t){t=g(t);const e=[];for(const s of t)e.push(s.shape);return d(e)}function ye(t){return"float32"}function be(t,e,s){if((null==e||null!=s&&s>0)&&(e=t.sourceLayer,s=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[s];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let s=0;s<t.inboundLayers.length;s++){const i=t.inputTensors[s],n=t.inboundLayers[s],r=t.nodeIndices[s],a=be(i,n,r);for(const t of a)-1===e.indexOf(t)&&e.push(t)}return e}}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class we extends fe{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:F("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new a("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new a("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new a("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const s=t.dtype||"float32";this.batchInputShape=e,this.dtype=s,this.inputSpec=[{shape:e}];const i=new ce(this.dtype,this.batchInputShape,this,[],{},this.name);i.nodeIndex=0,i.tensorIndex=0,new de({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[i],outputTensors:[i],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new a(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ze(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new a("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let s=t.dtype;null==s&&(s="float32");const i=new we({batchInputShape:e,name:t.name,dtype:s,sparse:t.sparse}),n=i.inboundNodes[0].outputTensors;return n[0]}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ke(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return(0,i.cast)(e,t.dtype)}catch(s){throw new a(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}we.className="InputLayer",i.serialization.registerClass(we);class Se{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Se)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new a(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=ke(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof ce){if(null==this.id2Value[t.id])throw new a(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new a(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof ce){if(null==this.id2Value[t.id])throw new a(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new a(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&(0,i.dispose)(this.id2Mask)}}const Ne=new h,ve=new h;function Ae(t){null!=Ne&&Ne.setMaxEntries(t),null!=ve&&ve.setMaxEntries(t)}function Ce(t,e,s,n){const r=null!=s&&s["training"],a=Array.isArray(t),o=a?t:[t],l=o.map((t=>t.name)),h=[],u=e.names();for(const i of l)-1!==u.indexOf(i)?h.push(e.getValue(i)):h.push(null);null!=n&&(n.maxNumTensors=-1/0,n.minNumTensors=1/0);const c=l.join(",")+"|"+e.names().sort().join(",");let p,d=Ne.get(c);if(null==d){const t=Ie(o,e);d=t.sorted,p=t.recipientCounts,Ne.put(c,d),ve.put(c,p)}p={},r||Object.assign(p,ve.get(c));const f=new Se(e);for(let m=0;m<d.length;++m){if(null!=n){const t=(0,i.memory)().numTensors;t>n.maxNumTensors&&(n.maxNumTensors=t),t<n.minNumTensors&&(n.minNumTensors=t)}const t=d[m],a=t.sourceLayer;if(a instanceof we)continue;const o=[],u=[],c=[];let y=!1;for(const s of t.inputs){const t=f.getValue(s),i=f.getMask(s);o.push(t),u.push(i),null!=i&&(y=!0),r||(p[s.name]--,0!==p[s.name]||e.hasKey(s)||-1!==l.indexOf(s.name)||t.isDisposed||!0===s.sourceLayer.stateful||c.push(t))}y&&(s=s||{},s["mask"]=u[0]);const b=g(a.apply(o,s));let w=null;a.supportsMasking&&(w=a.computeMask(o,u));const z=Le(t),k=Array.isArray(z)?z:[z];for(let e=0;e<k.length;++e){f.hasKey(k[e])||f.add(k[e],b[e],Array.isArray(w)?w[0]:w);const t=l.indexOf(k[e].name);-1!==t&&(h[t]=b[e])}r||(0,i.dispose)(c)}return f.disposeMasks(),a?h:h[0]}function Ie(t,e){i.util.assert(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let s=[],n={};if(1===t.length){const i=Te(t[0],e);s=i.sorted,n=i.recipientMap}else{const i=new Set;for(const r of t){const{sorted:t,recipientMap:a}=Te(r,e);for(const e of t)i.has(e.name)||(s.push(e),i.add(e.name));for(const e in a)null==n[e]&&(n[e]=new Set),a[e].forEach((t=>n[e].add(t)))}}return{sorted:s,recipientCounts:xe(n)}}function xe(t){const e={};for(const s in t)e[s]=t[s].size;return e}function Te(t,e){const s=new Set,i=[],n={};for(const o of e.names())s.add(o);const r=[],a=[];r.push(t);while(r.length>0){const t=r[r.length-1];if(s.has(t.name)){r.pop();continue}const e=a[a.length-1]===r.length-1;if(0===t.inputs.length||e)r.pop(),i.push(t),s.add(t.name),e&&a.pop();else{a.push(r.length-1);for(const e of t.inputs)null==n[e.name]&&(n[e.name]=new Set),n[e.name].add(t.name),s.has(e.name)||r.push(e)}}return{sorted:i,recipientMap:n}}function Le(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let s=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const i of t.sourceLayer.inboundNodes[e].outputTensors)if(i.id===t.id){s=e;break}e=t.sourceLayer.getOutputAt(s)}return e}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ee=(0,i.env)();
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function $e(t,e){return(0,i.tidy)((()=>i.sqrt(i.sum(i.mul(t,t),e,!0))))}Ee.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),Ae);class De extends i.serialization.Serializable{getConfig(){return{}}}class Fe extends De{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return(0,i.tidy)((()=>{const e=$e(t,this.axis),s=i.clipByValue(e,0,this.maxValue);return i.mul(t,i.div(s,i.add(rt(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Fe.className="MaxNorm",i.serialization.registerClass(Fe);class Re extends De{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return(0,i.tidy)((()=>i.div(t,i.add(rt(),$e(t,this.axis)))))}getConfig(){return{axis:this.axis}}}Re.className="UnitNorm",i.serialization.registerClass(Re);class Oe extends De{apply(t){return i.relu(t)}}Oe.className="NonNeg",i.serialization.registerClass(Oe);class _e extends De{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return(0,i.tidy)((()=>{const e=$e(t,this.axis),s=i.add(i.mul(this.rate,i.clipByValue(e,this.minValue,this.maxValue)),i.mul(1-this.rate,e));return i.mul(t,i.div(s,i.add(rt(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}_e.className="MinMaxNorm",i.serialization.registerClass(_e);const Me={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Be(t){return b(t)}function We(t,e={}){return z(t,i.serialization.SerializationMap.getMap().classNameMap,e,"constraint")}function Ue(t){if(null==t)return null;if("string"===typeof t){const e=t in Me?Me[t]:t,s={className:e,config:{}};return We(s)}return t instanceof De?t:We(t)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function je(t){if(null==t)return;const e=[],s=[],n=[];for(const i in t){const r=t[i];if("number"!==typeof r){const t=r;e.push(t.data()),s.push(i),n.push(t)}}if(e.length>0){const r=await Promise.all(e);for(let e=0;e<r.length;++e)t[s[e]]=r[e][0];(0,i.dispose)(n)}}function Ve(t){if(null!=t)for(const e in t){const s=t[e];"number"!==typeof s&&s.dispose()}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var Pe;(function(t){t[t["SILENT"]=0]="SILENT",t[t["VERBOSE"]=1]="VERBOSE"})(Pe||(Pe={}));const qe=125;class Je{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class He{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const s of this.callbacks)await s.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const s of this.callbacks)await s.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const s of this.callbacks)await s.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const s of this.callbacks)await s.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Ze extends Je{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const s=null==e["size"]?0:e["size"];this.seen+=s;for(const n in e){const t=e[n];if("number"===typeof t)this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+t*s;else{let e;n in this.totals?e=this.totals[n]:this.totals[n]=0;const r=(0,i.tidy)((()=>(0,i.add)(this.totals[n],(0,i.mul)(t,s))));this.totals[n]=r,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const s of this.params["metrics"])null!=this.totals[s]&&("number"===typeof this.totals[s]?e[s]=this.totals[s]/this.seen:(0,i.tidy)((()=>{const t=(0,i.mul)((0,i.div)(1,this.seen),this.totals[s]);e[s]=t,this.totals[s].dispose(),(0,i.keep)(e[s])})))}}class Ke extends Je{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const s in e)null==this.history[s]&&(this.history[s]=[]),this.history[s].push(e[s])}async syncData(){const t=[],e=[],s=[];for(const n in this.history){const i=this.history[n];for(let r=0;r<i.length;++r)if("number"!==typeof i[r]){const a=i[r];t.push(a.data()),e.push(n),s.push(r)}}const i=await Promise.all(t);for(let n=0;n<i.length;++n){const t=this.history[e[n]][s[n]];t.dispose(),this.history[e[n]][s[n]]=i[n][0]}}}class Ge extends Je{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||i.nextFrame,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=qe),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");i.util.isNumber(this.yieldEvery)&&(this.maybeWait=T(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,s){const i=[];null!=this.yield&&(await je(s),i.push(this.yield(t,e,s))),i.push(this.nextFrameFunc()),await Promise.all(i)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await je(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const s=[];null!=this.epochEnd&&(await je(e),s.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&s.push(this.nextFrameFunc()),await Promise.all(s)}async onBatchBegin(t,e){null!=this.batchBegin&&(await je(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const s=[];null!=this.batchEnd&&(await je(e),s.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?s.push(this.nextFrameFunc()):i.util.isNumber(this.yieldEvery)&&s.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(s)}async onTrainBegin(t){null!=this.trainBegin&&(await je(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await je(t),await this.trainEnd(t))}}function Ye(t,e){if(null==t&&(t={}),t instanceof Je)return[t];if(Array.isArray(t)&&t[0]instanceof Je)return t;const s=g(t);return s.map((t=>new Ge(t,e)))}class Xe{constructor(){}static registerCallbackConstructor(t,e){i.util.assert(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),Xe.checkForDuplicate(e),null==Xe.constructors[t]&&(Xe.constructors[t]=[]),Xe.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Xe.constructors){const s=Xe.constructors[+e];s.forEach((e=>{if(e===t)throw new a("Duplicate callback constructor.")}))}}static clear(){Xe.constructors={}}static createCallbacks(t){const e=[];for(const s in Xe.constructors){const i=+s;t>=i&&e.push(...Xe.constructors[i])}return e.map((t=>new t))}}function Qe(t,e,s,i,n,r,a,o,l){const h=new Ke,u=[new Ze,...Xe.createCallbacks(e)];null!=t&&u.push(...t),u.push(h);const c=new He(u);return c.setParams({epochs:s,initialEpoch:i,samples:n,steps:r,batchSize:a,verbose:e,doValidation:o,metrics:l}),{callbackList:c,history:h}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ts(t,e={},s=!1){return z(t,i.serialization.SerializationMap.getMap().classNameMap,e,"layer",s)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function es(t,e){return(0,i.tidy)((()=>{"float32"!==t.dtype&&(t=i.cast(t,"float32"));const s=i.sum(kt(t),e,!0),n=i.fill(s.shape,rt()),r=i.sqrt(i.maximum(s,n));return i.div(t,r)}))}function ss(t,e){return(0,i.tidy)((()=>i.mean(kt(i.sub(e,t)),-1)))}function is(t,e){return(0,i.tidy)((()=>i.mean(i.abs(i.sub(e,t)),-1)))}function ns(t,e){return(0,i.tidy)((()=>{const s=i.sub(t,e),n=i.clipByValue(i.abs(t),rt(),Number.MAX_VALUE),r=i.abs(i.div(s,n));return i.mul(100,i.mean(r,-1))}))}function rs(t,e){return(0,i.tidy)((()=>{const s=i.clipByValue(e,rt(),Number.MAX_VALUE),n=i.log(i.add(1,s)),r=i.clipByValue(t,rt(),Number.MAX_VALUE),a=i.log(i.add(1,r));return i.mean(kt(i.sub(n,a)),-1)}))}function as(t,e){return(0,i.tidy)((()=>{const s=i.maximum(0,i.sub(1,i.mul(t,e)));return i.mean(kt(s),-1)}))}function os(t,e){return(0,i.tidy)((()=>{const s=i.maximum(0,i.sub(1,i.mul(t,e)));return i.mean(s,-1)}))}function ls(t,e){return(0,i.tidy)((()=>{const s=i.sum(i.mul(t,e),-1),n=i.max(i.mul(i.sub(1,t),e),-1);return i.maximum(0,i.add(1,i.sub(n,s)))}))}function hs(t,e){return(0,i.tidy)((()=>{const s=Math.log(2),n=i.sub(e,t),r=i.sub(i.add(n,i.softplus(i.mul(-2,n))),s);return i.mean(r,-1)}))}function us(t,e,s=!1){return(0,i.tidy)((()=>{if(s)e=i.softmax(e);else{const t=i.sum(e,e.shape.length-1,!0);e=i.div(e,t)}return e=i.clipByValue(e,rt(),1-rt()),i.neg(i.sum(i.mul(i.cast(t,"float32"),i.log(e)),e.shape.length-1))}))}function cs(t,e,s=!1){return(0,i.tidy)((()=>{const n=i.cast(i.floor(ut(t)),"int32");e=i.clipByValue(e,rt(),1-rt());const r=e.shape,a=i.reshape(i.oneHot(n,r[r.length-1]),r);return us(a,e,s)}))}function ps(t,e){if(!i.util.arraysEqual(t.shape,e.shape))throw new a(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return(0,i.tidy)((()=>{const s=i.relu(e),n=i.neg(i.abs(e));return i.add(i.sub(s,i.mul(e,t)),i.log1p(i.exp(n)))}))}function ds(t,e){return(0,i.tidy)((()=>{let s;return s=i.clipByValue(e,rt(),1-rt()),s=i.log(i.div(s,i.sub(1,s))),i.mean(ps(t,s),-1)}))}function gs(t,e){return(0,i.tidy)((()=>{const s=i.clipByValue(t,rt(),1),n=i.clipByValue(e,rt(),1);return i.sum(i.mul(t,i.log(i.div(s,n))),-1)}))}function fs(t,e){return(0,i.tidy)((()=>{const s=i.log(i.add(rt(),e));return i.mean(i.sub(e,i.mul(t,s)),-1)}))}function ms(t,e){return(0,i.tidy)((()=>{const s=es(t,-1),n=es(e,-1),r=i.mul(s,n);return i.neg(i.sum(r,-1))}))}Xe.constructors={};const ys={meanSquaredError:ss,meanAbsoluteError:is,meanAbsolutePercentageError:ns,meanSquaredLogarithmicError:rs,squaredHinge:as,hinge:os,categoricalHinge:ls,logcosh:hs,categoricalCrossentropy:us,sparseCategoricalCrossentropy:cs,binaryCrossentropy:ds,kullbackLeiblerDivergence:gs,poisson:fs,cosineProximity:ms};function bs(t){if("string"===typeof t){if(t in ys)return ys[t];let e=`Unknown loss ${t}`;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new a(e)}return t}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ws(t,e){return(0,i.tidy)((()=>{const s=i.mul(.5,i.onesLike(e)),n=ot(i.greater(e,s),t.dtype);return i.mean(i.equal(t,n),-1)}))}function zs(t,e){return(0,i.tidy)((()=>ot(i.equal(i.argMax(t,-1),i.argMax(e,-1)),"float32")))}function ks(t,e){return(0,i.tidy)((()=>i.cast(i.sum(i.logicalAnd(i.equal(t,1),i.equal(e,1))),"float32")))}function Ss(t,e){return(0,i.tidy)((()=>i.cast(i.sum(i.logicalAnd(i.equal(t,0),i.equal(e,1))),"float32")))}function Ns(t,e){return(0,i.tidy)((()=>{const s=ks(t,e),n=Ss(t,e),r=i.add(s,n);return i.cast(i.where(i.greater(r,0),i.div(s,r),0),"float32")}))}function vs(t,e){return ds(t,e)}function As(t,e){return t.rank===e.rank&&(t=i.squeeze(t,[t.rank-1])),e=i.argMax(e,-1),e.dtype!==t.dtype&&(e=i.cast(e,t.dtype)),i.cast(i.equal(t,e),"float32")}const Cs=ss,Is=ss,xs=is,Ts=is,Ls=ns,Es=ns,$s=us,Ds=ms,Fs=cs,Rs={binaryAccuracy:ws,categoricalAccuracy:zs,precision:Ns,categoricalCrossentropy:$s,sparseCategoricalCrossentropy:Fs,mse:Cs,MSE:Is,mae:xs,MAE:Ts,mape:Ls,MAPE:Es,cosine:Ds};function Os(t){if("string"===typeof t&&t in Rs)return Rs[t];if("string"!==typeof t&&null!=t)return t;throw new a(`Unknown metric ${t}`)}function _s(t){if(c(null!==t,`Unknown LossOrMetricFn ${t}`),"string"===typeof t)return t;{let e;for(const s of Object.keys(ys))if(ys[s]===t){e=s;break}if(void 0!==e)return e;for(const s of Object.keys(Rs))if(Rs[s]===t){e=s;break}return void 0!==e?e:t.name}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ms(t){const e={Adagrad:()=>i.train.adagrad(.01),Adadelta:()=>i.train.adadelta(1,.95,rt()),Adam:()=>i.train.adam(.001,.9,.999,rt()),Adamax:()=>i.train.adamax(.002,.9,.999,rt(),0),RMSProp:()=>i.train.rmsprop(.001,.9,0,rt()),SGD:()=>i.train.sgd(.01)};if(e["adagrad"]=e["Adagrad"],e["adadelta"]=e["Adadelta"],e["adam"]=e["Adam"],e["adamax"]=e["Adamax"],e["rmsprop"]=e["RMSProp"],e["sgd"]=e["SGD"],t in e)return e[t]();throw new a(`Unknown Optimizer ${t}`)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Bs=1048576;function Ws(t,e,s=!1){if(null==t||"object"!==typeof t||Object.getPrototypeOf(t)!==Object.prototype||!Us(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(s){const s=JSON.stringify(t);s.length>Bs&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${Bs}.`)}}function Us(t){if(null===t)return!0;if("object"===typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const s of e){if("string"!==typeof s)return!1;if(!Us(t[s]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!Us(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function js(t,e,s,i=console.log){const n=Ps(t),r=["Layer (type)","Input Shape","Output shape","Param #"];let a;if(n?(e=e||90,s=s||[.32,.61,.89,1]):(e=e||115,s=s||[.24,.48,.7,.8,1]),s[s.length-1]<=1&&(s=s.map((t=>Math.floor(e*t)))),!n){r.push("Receives inputs"),a=[];for(const e in t.nodesByDepth)a.push(...t.nodesByDepth[e])}i("_".repeat(e)),qs(r,s,i),i("=".repeat(e));const o=t.layers;for(let u=0;u<o.length;++u)n?Js(o[u],s,i):Hs(o[u],s,a,i),i((u===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=Vs(t),h=ne(t.nonTrainableWeights);i(`Total params: ${l+h}`),i(`Trainable params: ${l}`),i(`Non-trainable params: ${h}`),i("_".repeat(e))}function Vs(t){let e;return e=null!=t.collectedTrainableWeights?ne(t.collectedTrainableWeights):ne(t.trainableWeights),e}function Ps(t){let e=!0;const s=[],i=[];for(const n in t.nodesByDepth)s.push(t.nodesByDepth[n]);for(const n of s){if(n.length>1||1===n.length&&n[0].inboundLayers.length>1){e=!1;break}i.push(...n)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==i.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}function qs(t,e,s=console.log){let i="";for(let n=0;n<t.length;++n)n>0&&(i=i.slice(0,i.length-1)+" "),i+=t[n],i=i.slice(0,e[n]),i+=" ".repeat(e[n]-i.length);s(i)}function Js(t,e,s){let i,n;try{n=t.inboundNodes.map((t=>JSON.stringify(t.inputShapes))).join(",")}catch(l){n="multiple"}try{i=JSON.stringify(t.outputShape)}catch(l){i="multiple"}const r=t.name,a=t.getClassName(),o=[`${r} (${a})`,n,i,t.countParams().toString()];qs(o,e,s)}function Hs(t,e,s,i){let n,r;try{r=t.inboundNodes.map((t=>JSON.stringify(t.inputShapes))).join(",")}catch(c){r="multiple"}try{n=JSON.stringify(t.outputShape)}catch(c){n="multiple"}const a=[];for(const p of t.inboundNodes)if(!(null!=s&&s.length>0&&-1===s.indexOf(p)))for(let t=0;t<p.inboundLayers.length;++t){const e=p.inboundLayers[t].name,s=p.nodeIndices[t],i=p.tensorIndices[t];a.push(`${e}[${s}][${i}]`)}const o=t.name,l=t.getClassName(),h=0===a.length?"":a[0],u=[`${o} (${l})`,r,n,t.countParams().toString(),h];qs(u,e,i);for(let p=1;p<a.length;++p)qs(["","","","",a[p]],e,i)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Zs(t,e,s){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"===typeof s}function Ks(t,e){if(null===t)return null;if("string"===typeof t)return m(t);if("number"===typeof t||"boolean"===typeof t)return t;if(t instanceof Array){const s=[],i=t.length;for(let n=0;n<i;++n){const i=t[n];Zs(e,n,i)?s.push(i):s.push(Ks(i,e))}return s}{const e={};for(const s of Object.keys(t)){const i=t[s];if("name"===s&&"string"===typeof i)e[s]=i;else{const t=m(s);e[t]=Ks(i,t)}}return e}}function Gs(t,e){if(null===t||void 0===t)return null;if("string"===typeof t)return f(t);if("number"===typeof t||"boolean"===typeof t)return t;if(t instanceof Array){const s=[],i=t.length;for(let n=0;n<i;++n){const i=t[n];Zs(e,n,i)?s.push(i):s.push(Gs(i,e))}return s}{const e={};for(const s of Object.keys(t)){const i=t[s],n=f(s);e[n]="name"!==s&&"className"!==s||"string"!==typeof i?Gs(i,s):i}return e}}
/** @license See the LICENSE file. */
const Ys="3.18.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Xs extends fe{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=F(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],N(this.inputs).length!==this.inputs.length)throw new a(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((t=>t.name))}`);N(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((t=>t.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const r of this.outputs){const t=r.sourceLayer,e=r.nodeIndex,s=r.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(s)}for(const r of this.inputs){const t=r.sourceLayer,e=r.nodeIndex,s=r.tensorIndex;c(0===e,"input layer has >1 nodes"),c(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(e),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let r=0;r<this.inputLayers.length;r++){const e=this.inputLayers[r];if(!(e instanceof we))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${r} (0-based) originates from layer type ${e.getClassName()}.`);this.inputNames.push(e.name),this.feedInputShapes.push(e.batchInputShape),this.feedInputNames.push(e.name)}for(const r of this.outputLayers)this.outputNames.push(r.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},s={},i={},n={},o={},l=[],h=(t,e,s,i,n,a)=>{null!=i&&null!=n&&null!=a||(i=t.sourceLayer,n=t.nodeIndex,a=t.tensorIndex);const u=i.inboundNodes[n];if(-1!==s.indexOf(u))throw new r(`The tensor ${t.name} at layer "${i.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(Xs.nodeKey(i,n)),i.id in o||(o[i.id]=Object.keys(o).length),-1===s.indexOf(u)&&s.push(u);const c=u.inboundLayers.length;for(let r=0;r<c;r++){const t=u.inputTensors[r],i=u.inboundLayers[r],n=u.nodeIndices[r],a=u.tensorIndices[r];h(t,e,s,i,n,a)}e.push(u);while(s.indexOf(u)>=0)s.splice(s.indexOf(u),1);l.push(u)},u=[],p=[];for(const r of this.outputs)h(r,u,p);const d=l.slice().reverse();for(const r of d){s[r.id]=r,r.id in e||(e[r.id]=0);let t=e[r.id];const a=null==i[r.outboundLayer.id]?0:i[r.outboundLayer.id];t=Math.max(t,a),i[r.outboundLayer.id]=t,n[r.outboundLayer.id]=r.outboundLayer,e[r.id]=t;for(let i=0;i<r.inboundLayers.length;i++){const n=r.inboundLayers[i],a=r.nodeIndices[i],o=n.inboundNodes[a],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(t+1,l),s[o.id]=o}}const g={};for(const r in e){const t=e[r];t in g||(g[t]=[]),g[t].push(s[r])}const f={};for(const r in i){const t=i[r];t in f||(f[t]=[]),f[t].push(n[r])}let m=Object.keys(f).map((t=>parseInt(t,10))).sort(S);this.layers=[];for(const r of m){const t=f[r];t.sort(((t,e)=>{const s=o[t.id],i=o[e.id];return s<i?-1:s>i?1:0}));for(const e of t)e instanceof Xs&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=f,m=Object.keys(g).map((t=>parseInt(t,10))).sort(S);const y=this.inputs.slice(),b=[];for(const a of m)for(const t of g[a]){const e=t.outboundLayer;if(null!=e){for(const s of t.inputTensors)if(-1===y.indexOf(s))throw new r(`Graph disconnected: cannot obtain value for tensor ${s} at layer "${e.name}". The following previous layers were accessed without issue: ${b}`);for(const e of t.outputTensors)y.push(e);b.push(e.name)}}this.nodesByDepth=g;const w=this.layers.map((t=>t.name));for(const a of w){const t=w.filter((t=>t===a)).length;if(1!==t)throw new r(`The name "${a}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(w))}this.outboundNodes=[],this.inboundNodes=[],new de({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new a("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let i=0;for(const r of this.layers)for(const t of r.weights){if(null!=s[t.originalName])throw new a(`Duplicate weight name: ${t.originalName}`);s[t.originalName]=t,i++}const n=[];for(const r in t){let i=r;if(null==s[r]){const t=r.split("/"),e=t.slice(0,-2).concat([t[t.length-1]]);i=e.join("/")}if(null!=s[i])n.push([s[i],t[r]]);else if(e)throw new a(`Provided weight data has no target variable: ${r}`);delete s[i]}if(e){const t=[];for(const e in s)t.push(e);if(t.length>0)throw new a(`${t.length} of ${i} weights are not set: ${t}`)}he(n)}updatedConfig(){const t=this.getConfig(),e={};return e["className"]=this.getClassName(),e["config"]=t,e["kerasVersion"]=`tfjs-layers ${Ys}`,e["backend"]="TensorFlow.js",e}toJSON(t,e=!0){const s=Gs(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return(0,i.tidy)((()=>{t=g(t);const s=new Se;for(let e=0;e<this.inputs.length;++e)s.add(this.inputs[e],t[e]);return Ce(this.outputs,s,e)}))}computeMask(t,e){return(0,i.tidy)((()=>{let s;return t=g(t),s=null==e?u(null,t.length):g(e),this.runInternalGraph(t,s)[1]}))}computeOutputShape(t){const e=ee(t);if(e.length!==this.inputLayers.length)throw new a(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let a=0;a<e.length;a++){const t=this.inputLayers[a],i=e[a],n=t.name+"_0_0";s[n]=i}const i=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(S);if(i.length>1)for(const a of i){const t=this.nodesByDepth[a];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(t.id))continue;const i=[];for(let o=0;o<e.inboundLayers.length;o++){const t=e.inboundLayers[o],n=e.nodeIndices[o],r=e.tensorIndices[o],a=`${t.name}_${n}_${r}`,l=s[a];i.push(l)}const n=t.computeOutputShape(d(i)),r=ee(n),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){const i=`${t.name}_${a}_${e}`;s[i]=r[e]}}}const n=[],r=[];for(let a=0;a<this.outputLayers.length;a++){const t=this.outputLayers[a],e=this.outputLayersNodeIndices[a],s=this.outputLayersTensorIndices[a],i=`${t.name}_${e}_${s}`;r.push(i)}for(let a=0;a<r.length;a++){const t=r[a];c(t in s),n.push(s[t])}return d(n)}runInternalGraph(t,e){null==e&&(e=u(null,t.length));const s={};for(let o=0;o<this.inputs.length;++o){const i=this.inputs[o],n=t[o],r=e[o];s[i.id]=[n,r]}const i=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(S);for(const l of i){const t=this.nodesByDepth[l];for(const e of t){const t=e.outboundLayer,i=e.inputTensors,n=e.outputTensors,r=new Array;for(const e of i)e.id in s&&r.push(s[e.id]);if(r.length===i.length){let i,a,l,h,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,s]=r[0];null==u["mask"]&&(u["mask"]=s),l=g(t.call(e,u)),h=g(t.computeMask(e,s)),i=[e],a=[s]}else i=r.map((t=>t[0])),a=r.map((t=>t[1])),null==u["mask"]&&(u["mask"]=a),l=g(t.call(i,u)),h=g(t.computeMask(i,a));if(t.activityRegularizer)throw new o("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<n.length;++t){const e=n[t],i=l[t],r=h[t];s[e.id]=[i,r]}}}}const n=[],r=[],a=[];for(const o of this.outputs){c(o.id in s,`Could not compute output ${o.name} : ${o.id}`);const[t,e]=s[o.id];a.push(t.shape),n.push(t),r.push(e)}return[n,r,a]}buildNodeConversionMap(t){const e={};let s;for(const i of this.layers){s=i instanceof Xs?1:0;for(let t=0;t<i.inboundNodes.length;t++){const n=Xs.nodeKey(i,t);this.containerNodes.has(n)&&(e[n]=s,s+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new a(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new a("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===t)return s;throw new a(`No such layer: ${t}`)}calculateLosses(){return(0,i.tidy)((()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const i=Xs.nodeKey(e,s);this.containerNodes.has(i)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const t=a.getClassName(),i=a.getConfig(),n=[];for(let s=0;s<a.inboundNodes.length;s++){const t=a.inboundNodes[s],i=Xs.nodeKey(a,s);let o={};if(this.containerNodes.has(i)){if(t.callArgs)try{JSON.stringify(t.callArgs),o=t.callArgs}catch(r){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${t.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(t.inboundLayers.length>0){const s=[];for(let i=0;i<t.inboundLayers.length;i++){const n=t.inboundLayers[i],r=t.nodeIndices[i],a=t.tensorIndices[i],l=Xs.nodeKey(n,r);let h=e[l];null==h&&(h=0),s.push([n.name,h,a,o])}n.push(s)}}}const o={};o["name"]=a.name,o["className"]=t,o["config"]=i,o["inboundNodes"]=n,s.push(o)}t["layers"]=s;const i=[];for(let a=0;a<this.inputLayers.length;a++){const t=this.inputLayers[a],s=this.inputLayersNodeIndices[a],n=Xs.nodeKey(t,s);if(!this.containerNodes.has(n))continue;let r=e[n];null!==r&&void 0!==r||(r=0);const o=this.inputLayersTensorIndices[a];i.push([t.name,r,o])}t["inputLayers"]=i;const n=[];for(let a=0;a<this.outputLayers.length;a++){const t=this.outputLayers[a],s=this.outputLayersNodeIndices[a],i=Xs.nodeKey(t,s);if(!this.containerNodes.has(i))continue;let r=e[i];null!==r&&void 0!==r||(r=0);const o=this.outputLayersTensorIndices[a];n.push([t.name,r,o])}return t["outputLayers"]=n,t}static fromConfig(t,e,s={},i=!1){const n={},r={};function o(t,e){t.name in r?r[t.name].push(e):r[t.name]=[e]}function l(t,e){const s=[];let i;for(const r of e){const a=r[0],l=r[1],h=r[2];if(i=null==r[3]?{}:r[3],!(a in n))return void o(t,e);const u=n[a];if(u.inboundNodes.length<=l)return void o(t,e);const c=u.inboundNodes[l];s.push(c.outputTensors[h])}s.length>0&&t.apply(d(s),i)}function h(t){const s=t["name"],r=ts(t,null!=e["customObjects"]?e["customObjects"]:{});r.setFastWeightInitDuringBuild(i),n[s]=r;const l=t["inboundNodes"];l.forEach((t=>{if(!(t instanceof Array))throw new a(`Corrupted configuration, expected array for nodeData: ${t}`);o(r,t)}))}const u=e["name"],p=e["layers"];for(const a of p)h(a);while(!v(r))for(const t of p){const e=n[t["name"]];if(e.name in r){const t=r[e.name];delete r[e.name];for(const s of t)l(e,s)}}const g=[],f=[],m=e["inputLayers"];for(const a of m){const t=a[0],e=a[1],s=a[2];c(t in n);const i=n[t],r=i.inboundNodes[e].outputTensors;g.push(r[s])}const y=e["outputLayers"];for(const a of y){const t=a[0],e=a[1],s=a[2];c(t in n);const i=n[t],r=i.inboundNodes[e].outputTensors;f.push(r[s])}return new t({inputs:g,outputs:f,name:u})}get stateful(){if(this._stateful)throw new a("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){(0,i.tidy)((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Qs(t,e,s){const i=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===i)return Array.isArray(t)&&1===t.length?t:"object"===typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==i)throw new Error(`Provided ${s} is an array of ${t.length} element(s), but the model has ${i} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"===typeof t&&Object.keys(t).length>0&&"object"===typeof t[Object.keys(t)[0]]){const s=[];return e.forEach((e=>{e in t?s.push(t[e]):s.push(null)})),s}throw new Error(`The model has multiple (${i}) outputs, so ${s} must be either an array with ${i} elements or an object with ${e} keys. Provided ${s} not understood: ${JSON.stringify(t)}`)}function ti(t,e){return Qs(t,e,"classWeight")}async function ei(t,e,s,n){if(null!=e||null!=n)throw new Error("Support sampleWeight is not implemented yet");if(null!=s){const e=(0,i.tidy)((()=>{if(1===t.shape.length)return(0,i.clone)(t);if(2===t.shape.length){if(t.shape[1]>1){const e=1;return(0,i.argMax)(t,e)}if(1===t.shape[1])return(0,i.reshape)(t,[t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),n=Array.from(await e.data());(0,i.dispose)(e);const r=[];return n.forEach((t=>{if(null==s[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);r.push(s[t])})),(0,i.tensor1d)(r,"float32")}return null}function si(t,e){return(0,i.mul)(t,e)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const ii=32;function ni(t,e){let s,n;const r=e;s=r["xs"],n=r["ys"],i.util.assert(null!=s&&null!=n,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`));const a=ri("input",t.inputNames,s),o=ri("output",t.outputNames,n),l=a[0].shape[0];i.util.assert(a.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),i.util.assert(o.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let h=0;h<a.length;h++)i.util.assert(a[h].shape[0]===l,(()=>`Batch size mismatch: input ${t.inputNames[h]} has ${a[h].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`));for(let h=0;h<o.length;h++)i.util.assert(o[h].shape[0]===l,(()=>`Batch size mismatch: output ${t.outputNames[h]} has ${o[h].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`));return{xs:a,ys:o}}function ri(t,e,s){if(s instanceof i.Tensor)return[s];if(Array.isArray(s))return i.util.assert(s.length===e.length,(()=>`Received an array of ${s.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),s;{const i=[];for(const n of e){if(null==s[n])throw new a(`The feature data generated by the dataset lacks the required ${t} key '${n}'.`);i.push(s[n])}return i}}function ai(t){if(3===t.length)throw new o("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}async function oi(t,e,s){const n=null!=s.batchesPerEpoch;if(i.util.assert(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),i.util.assert(null!=s,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),i.util.assert(null!=s.epochs&&s.epochs>0&&Number.isInteger(s.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${s.epochs}`)),i.util.assert(!n||s.batchesPerEpoch>0&&Number.isInteger(s.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${s.batchesPerEpoch}`)),i.util.assert(null==s["validationSplit"],(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=s.validationData;let a,o;if(r)if(hi(s.validationData))i.util.assert(null==s.validationBatches||s.validationBatches>0&&Number.isInteger(s.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${s.validationBatches}`));else{const t=ai(s.validationData);a=t.xs,o=t.ys}const l=t.makeTrainFunction(),h=t.getDedupedMetricsNames();let u;u=r?h.slice().concat(h.map((t=>"val_"+t))):h.slice();const c=Ye(s.callbacks,s.yieldEvery),p=null==s.verbose?1:s.verbose,{callbackList:d,history:f}=Qe(c,p,s.epochs,null,null,li(e,s),null,r,u);d.setModel(t),t.history=f,await d.onTrainBegin(),t.stopTraining_=!1;let m=null==s.initialEpoch?0:s.initialEpoch,y=await e.iterator();while(m<s.epochs){const u={};await d.onEpochBegin(m);let c=0,p=0;n||(y=await e.iterator());while(!n||c<s.batchesPerEpoch){const e=await y.next();if(n&&e.done){console.warn(`You provided \`batchesPerEpoch\` as ${s.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+s.batchesPerEpoch*s.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:n,ys:r}=ni(t,e.value),a={};a["batch"]=p,a["size"]=n[0].shape[0],await d.onBatchBegin(p,a);const o=[];if(null!=s.classWeight){const e=ti(s.classWeight,t.outputNames);for(let t=0;t<e.length;++t)o.push(await ei(r[t],null,e[t]))}const u=n.concat(r).concat(o),g=l(u);i.dispose(u);for(let t=0;t<h.length;++t){const e=h[t],s=g[t];a[e]=s,i.keep(s)}await d.onBatchEnd(p,a),Ve(a),p++,c++}if(n?c>=s.batchesPerEpoch:e.done){if(r){let e;e=hi(s.validationData)?g(await t.evaluateDataset(s.validationData,{batches:s.validationBatches})):g(t.evaluate(a,o,{batchSize:null==s.validationBatchSize?ii:s.validationBatchSize,verbose:0}));for(let s=0;s<t.metricsNames.length;++s)u[`val_${t.metricsNames[s]}`]=e[s]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(m,u),m++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function li(t,e){let s=null;return null!=e.batchesPerEpoch?s=e.batchesPerEpoch:Number.isFinite(t.size)&&(s=t.size),s}function hi(t){return"function"===typeof t.iterator}function ui(t){return"function"===typeof t.next}async function ci(t,e,s){s=s||{};const n=null!=s.batches,r=t.testFunction;let a=[];if(s.verbose>0)throw new o("Verbose mode is not implemented yet.");i.util.assert(!n||s.batches>0&&Number.isInteger(s.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(s.batches)}`));const l=ui(e)?e:await e.iterator();let h=0,u=0;while(!n||u<s.batches){const e=await l.next();if(a=i.tidy((()=>{if(e.value){const{xs:s,ys:n}=ni(t,e.value),o=s.concat(n),l=i.tidy((()=>r(o)));if(i.dispose(o),0===u)for(let t=0;t<l.length;++t)a.push((0,i.scalar)(0));const c=o[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],s=a[t];a[t]=i.tidy((()=>i.add(a[t],i.mul(c,e)))),u>0&&i.dispose(s)}i.dispose(l),h+=c,++u}return a})),e.done){n&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${s.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let o=0;o<a.length;++o){const t=a[o];a[o]=i.div(a[o],h),i.dispose(t)}return d(a)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function pi(t){i.util.assert(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function di(t,e,s){return null==t?[null]:Array.isArray(t)?t.map((t=>pt(t,e,s-e))):pt(t,e,s-e)}function gi(t,e){return i.tidy((()=>null==t?null:Array.isArray(t)?t.map((t=>gi(t,e))):zt(t,"int32"===e.dtype?e:i.cast(e,"int32"))))}function fi(t,e){const s=[];let i=0,n=null;while(i<t)n=i+e,n>=t&&(n=t),s.push([i,n]),i=n;return s}async function mi(t,e,s,n,r,l,h,u,c,p,d,g,f,m,y){null==r&&(r=32),null==l&&(l=1),null==d&&(d=!0),null==f&&(f=0);let b=!1;if(null!=c&&null!=p&&(b=!0),null!=y&&(b=!0,null==m))throw new a("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const w=t.checkNumSamples(s,r,m,"steps_per_epoch");let z;null!=w&&(z=it(0,w)),null==h&&(h=1);const{callbackList:k,history:S}=Qe(u,h,l,f,w,m,r,b,g);k.setModel(t),t.history=S,await k.onTrainBegin(),t.stopTraining_=!1;for(let a=f;a<l;++a){await k.onEpochBegin(a);const l={};if(null!=m)throw new o("stepsPerEpoch mode is not implemented yet.");{if("batch"===d)throw new o("batch shuffling is not implemneted yet");d&&i.util.shuffle(z);const a=(0,i.tensor1d)(z),h=fi(w,r);for(let o=0;o<h.length;++o){const u={};if(await k.onBatchBegin(o,u),i.tidy((()=>{const d=h[o][0],g=h[o][1],f=pt(a,d,g-d);u["batch"]=o,u["size"]=g-d;const m=gi(s,f),y=e(m);for(let t=0;t<n.length;++t){const e=n[t],s=y[t];u[e]=s,i.keep(s)}if(o===h.length-1&&b){const e=t.testLoop(c,p,r);for(let t=0;t<n.length;++t){const s=n[t],r=e[t];i.keep(r),l["val_"+s]=r}}})),await k.onBatchEnd(o,u),Ve(u),t.stopTraining_)break}a.dispose()}if(await k.onEpochEnd(a,l),t.stopTraining_)break}return await k.onTrainEnd(),await t.history.syncData(),t.history}async function yi(t,e,s,n={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,l,h,u,c,p,d,g,f;t.isTraining=!0;try{const i=null==n.batchSize?32:n.batchSize;pi(i);const m=!1,y=await t.standardizeUserData(e,s,n.sampleWeight,n.classWeight,m,i);r=y[0],l=y[1],f=y[2];let b,w=!1;if(null!=n.validationData&&n.validationData.length>0){if(w=!0,2!==n.validationData.length)throw 3===n.validationData.length?new o("validationData including sample weights is not supported yet."):new a(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);c=n.validationData[0],p=n.validationData[1];const e=!0,s=await t.standardizeUserData(c,p,null,null,e,i);d=s[0],g=s[1],b=d.concat(g)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){w=!0;const t=Math.floor(r[0].shape[0]*(1-n.validationSplit)),e=r[0].shape[0];d=di(r,t,e),h=r,r=di(r,0,t),g=di(l,t,e),u=l,l=di(l,0,t),b=d.concat(g)}else null!=n.validationSteps&&(w=!0);const z=r.concat(l).concat(f);t.checkTrainableWeightsConsistency();const k=t.makeTrainFunction(),S=t.getDedupedMetricsNames();let N,v;w?(t.makeTestFunction(),N=t.testFunction,v=S.slice().concat(S.map((t=>"val_"+t)))):(N=null,b=[],v=S.slice());const A=Ye(n.callbacks,n.yieldEvery),C=await mi(t,k,z,S,i,n.epochs,n.verbose,A,N,b,n.shuffle,v,n.initialEpoch,null,null);return C}finally{t.isTraining=!1,wi(r,e),wi(l,s),wi(h,e),wi(u,s),wi(d,c),wi(g,p),null!=f&&i.dispose(f)}}function bi(t){const e=[];t instanceof i.Tensor&&(t=[t]);for(let s=0;s<t.length;++s){const i=t[s];if(1===i.rank)e.push(lt(i,1));else{if(0===i.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(i)}}return e}function wi(t,e){if(null==t)return;const s=[];if(e instanceof i.Tensor)s.push(e.id);else if(Array.isArray(e))e.forEach((t=>s.push(t.id)));else if(null!=e)for(const i in e){const t=e[i];s.push(t.id)}const n=[];if(t instanceof i.Tensor)-1===s.indexOf(t.id)&&n.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===s.indexOf(t.id)&&n.push(t)}));else if(null!=t)for(const i in t){const e=t[i];-1===s.indexOf(e.id)&&n.push(e)}n.forEach((t=>{t.isDisposed||t.dispose()}))}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function zi(t){return t instanceof i.Tensor}function ki(t){return Array.isArray(t)}function Si(t){return!zi(t)&&!ki(t)}function Ni(t,e,s,i=!0,n=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(ki(t)&&t.length>0)e=!0;else if(Si(t)){for(const s in t)if(t.hasOwnProperty(s)){e=!0;break}}else e=!0;if(e)throw new a(`Error when checking model ${n} expected no data, but got ${t}`)}return[]}if(null==t)return e.map((t=>null));let r;if(Si(t)){r=[];for(const s of e){if(null==t[s])throw new a(`No data provided for "${s}". Need data for each key in: ${e}`);r.push(t[s])}}else if(ki(t)){if(t.length!==e.length)throw new a(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);r=t}else{if(e.length>1)throw new a(`The model ${n} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);r=[t]}if(r=bi(r),null!=s)for(let o=0;o<e.length;++o){if(null==s[o])continue;const t=r[o];if(t.shape.length!==s[o].length)throw new a(`Error when checking ${n}: expected ${e[o]} to have ${s[o].length} dimension(s). but got array with shape ${t.shape}`);for(let e=0;e<s[o].length;++e){if(0===e&&!i)continue;const r=t.shape[e],l=s[o][e];if(null!=l&&l>=0&&r!==l)throw new a(`${n} expected a batch of elements where each example has shape [${s[o].slice(1,s[o].length)}] (i.e.,tensor shape [*,${s[o].slice(1,s[o].length)}]) but the ${n} received an input with ${t.shape[0]} examples, each with shape [${t.shape.slice(1,t.shape.length)}] (tensor shape [${t.shape}])`)}}return r}function vi(t,e,s){const n=N(t.map((t=>t.shape[0])));n.sort();const r=N(e.map((t=>t.shape[0])));if(r.sort(),n.length>1)throw new a(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((t=>t.shape)))}`);if(r.length>1)throw new a(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((t=>t.shape)))}`);if(n.length>0&&r.length>0&&!i.util.arraysEqual(n,r))throw new a(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${r[0]} target sample(s).`)}function Ai(t,e,s){const i=[ss,ds,us];for(let n=0;n<t.length;++n){const r=t[n],o=e[n],l=s[n];if(null!=o){if(o===us&&1===r.shape[r.shape.length-1])throw new a(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==i.indexOf(o)){const t=r.shape.slice(1),e=l.slice(1);for(let s=0;s<t.length;++s){const i=t[s],n=e[s];if(null!=n&&i!==n)throw new a(`A target Tensor with shape ${r.shape} was passed for an output of shape ${l}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function Ci(t,e,s,i=!0,n=""){let r;if(Array.isArray(t)){if(t.length!==e.length)throw new a(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);r=t}else{if(e.length>1)throw new a(`The model expects ${e.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);r=[t]}if(null!=s)for(let o=0;o<e.length;++o){if(null==s[o])continue;const t=r[o];if(t.shape.length!==s[o].length)throw new a(`Error when checking ${n}: expected ${e[o]} to have ${s[o].length} dimension(s), but got array with shape ${JSON.stringify(t.shape)}`);for(let r=0;r<s[o].length;++r){if(0===r&&!i)continue;const l=t.shape[r],h=s[o][r];if(null!=h&&h!==l)throw new a(`Error when checking ${n}: expected ${e[o]} to have shape ${JSON.stringify(s[o])} but got array with shape ${JSON.stringify(t.shape)}.`)}}}function Ii(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let s;if("string"===typeof t||"function"===typeof t)s=[t];else{if(!Array.isArray(t)&&"object"!==typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);s=t}if(Array.isArray(s))return e.map((t=>s));{const t=[];for(const i of e){let e=s.hasOwnProperty(i)?s[i]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}const xi="layers-model";class Ti extends Xs{constructor(t){super(t),this.isTraining=!1}summary(t,e,s=console.log){if(!this.built)throw new a("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");js(this,t,e,s)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"===typeof t.optimizer)this.optimizer_=Ms(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof i.Optimizer))throw new a("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"===typeof t.loss||"function"===typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new a(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const s=t.loss;e=s.map((t=>bs(t)))}else{const s=bs(t.loss);this.outputs.forEach((t=>{e.push(s)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new a(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: ${this.outputNames}`);for(const s of this.outputNames)null==t.loss[s]&&console.warn(`Output "${s}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${s} during training`),e.push(bs(t.loss[s]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const t=this.internalOutputShapes[i],e=this.outputNames[i];this.feedOutputNames.push(e),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[i])}const s=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],H("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==s.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const n=Ii(t.metrics,this.outputNames),r=(t,e,s)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([s,t])};H("metric",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==s.indexOf(t))continue;const e=n[t],i=e=>{const s="";let i,n,a;for(const o of e){if("string"===typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const e=this.internalOutputShapes[t];let r;1===e[e.length-1]||this.lossFunctions[t]===ds?-1!==["accuracy","acc"].indexOf(o)?n=ws:-1!==["crossentropy","ce"].indexOf(o)&&(n=vs):this.lossFunctions[t]===cs?-1!==["accuracy","acc"].indexOf(o)?n=As:-1!==["crossentropy","ce"].indexOf(o)&&(n=Fs):-1!==["accuracy","acc"].indexOf(o)?n=zs:-1!==["crossentropy","ce"].indexOf(o)&&(n=$s),-1!==["accuracy","acc"].indexOf(o)?r="acc":-1!==["crossentropy","ce"].indexOf(o)&&(r="ce"),a=n,i=s+r}else{const t=Os(o);a=t,i=s+_s(o)}let e;H(i,(()=>{e=a})),r(t,i,e)}};i(e)}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,s={}){const i=null==s.batchSize?32:s.batchSize;pi(i);const n=!0,r=this.standardizeUserDataXY(t,e,n,i);try{const t=r[0].concat(r[1]);this.makeTestFunction();const e=this.testFunction,n=this.testLoop(e,t,i,s.verbose,s.steps);return d(n)}finally{wi(r[0],t),wi(r[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),ci(this,t,e)}checkNumSamples(t,e,s,i="steps"){let n;if(null!=s){if(n=null,null!=e)throw new a(`If ${i} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==t)throw new a(`Either the input data should have a defined shape, or ${i} shoud be specified.`);n=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return n}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new a("`outputs` is an empty Array, which is not allowed.");const s=Array.isArray(e),n=s?e:[e],r=this.retrieveSymbolicTensors(n),o=new Se;if(t instanceof i.Tensor&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new a(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)o.add(this.inputs[e],t[e])}else for(const i of this.inputs){const e=t[i.name];if(null==e)throw new a(`No value is provided for the model's input ${i.name}`);o.add(i,e)}const l=Ce(r,o);return s?l:l[0]}retrieveSymbolicTensors(t){const e=u(null,t.length);let s=t.length;for(const i of this.layers){const n=Array.isArray(i.output)?i.output:[i.output],r=n.map((t=>t.name));for(let i=0;i<t.length;++i){const a=r.indexOf(t[i]);if(-1!==a&&(e[i]=n[a],s--),0===s)break}if(0===s)break}if(s>0){const s=[];throw e.forEach(((e,i)=>{null==e&&s.push(t[i])})),new a(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(s)}`)}return e}predictLoop(t,e=32,s=!1){return i.tidy((()=>{const n=this.checkNumSamples(t);if(s)throw new o("Verbose predictLoop() is not implemented yet.");const r=fi(n,e),a=this.outputs.map((t=>[]));for(let e=0;e<r.length;++e){const s=i.tidy((()=>{const s=r[e][0],i=r[e][1],n=di(t,s,i),a=[];if(Array.isArray(n))for(let t=0;t<n.length;++t)a.push({key:this.inputs[t],value:n[t]});else a.push({key:this.inputs[0],value:n});const o=new Se(a);return Ce(this.outputs,o)}));s.forEach(((t,e)=>a[e].push(t)))}return d(a.map((t=>i.concat(t,0))))}))}predict(t,e={}){const s=bi(t);Ci(s,this.inputNames,this.feedInputShapes,!1);try{const t=null==e.batchSize?32:e.batchSize;return pi(t),this.predictLoop(s,t)}finally{wi(s,t)}}predictOnBatch(t){Ci(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,s=!0,i){if(null==this.optimizer_)throw new r("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const n=[];for(let r=0;r<this.feedOutputShapes.length;++r){const t=this.feedOutputShapes[r],e=this.feedLossFns[r];e===cs?n.push(t.slice(0,t.length-1).concat([1])):n.push(t)}if(t=Ni(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Ni(e,this.feedOutputNames,n,!1,"target"),vi(t,e,null),Ai(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=i&&i>0&&t[0].shape[0]%i!==0)throw new a(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${i}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,s,i,n=!0,r){const[a,o]=this.standardizeUserDataXY(t,e,n,r);if(null!=s)throw new Error("sample weight is not supported yet.");let l=null;if(null!=i){const t=ti(i,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await ei(o[e],null,t[e]))}return[a,o,l]}testLoop(t,e,s,n=0,r){return i.tidy((()=>{const a=this.checkNumSamples(e,s,r,"steps"),l=[];if(n>0)throw new o("Verbose mode is not implemented yet.");if(null!=r)throw new o("steps mode in testLoop() is not implemented yet");{const n=fi(a,s),r=(0,i.tensor1d)(it(0,a));for(let s=0;s<n.length;++s){const a=n[s][0],o=n[s][1],h=pt(r,a,o-a),u=gi(e,h),c=t(u);if(0===s)for(let t=0;t<c.length;++t)l.push((0,i.scalar)(0));for(let t=0;t<c.length;++t){const e=c[t];l[t]=i.add(l[t],i.mul(o-a,e))}}for(let t=0;t<l.length;++t)l[t]=i.div(l[t],a)}return l}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let s=0;s<t.length;++s){const i=t[s];let n=i;if(p(t,i)>1){const e=p(t.slice(0,s),i);n+=`_${e}`}e.push(n)}return e}makeTrainFunction(){return t=>{const e=[],s=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:s[e]});const o=new Se(t),l=Ce(this.outputs,o,{training:!0});let h;for(let s=0;s<this.lossFunctions.length;++s){const t=this.lossFunctions[s];let a=t(n[s],l[s]);null!=r[s]&&(a=si(a,r[s]));const o=i.mean(a);e.push(o),h=0===s?a:i.add(h,a)}for(let s=0;s<this.metricsTensors.length;++s){let t;if(this.outputs.length>1&&s<this.outputs.length)t=e[s];else{const e=this.metricsTensors[s][0],r=this.metricsTensors[s][1];t=i.mean(e(n[r],l[r]))}i.keep(t),a.push(t)}return h=i.mean(h),this.calculateLosses().forEach((t=>{h=i.add(h,t)})),h},l=this.collectedTrainableWeights.map((t=>t.read())),h=!0,u=this.optimizer_.minimize(o,h,l);return[u].concat(a)}}makeTestFunction(){this.testFunction=t=>i.tidy((()=>{const e=[];let s;const n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:n[t]});const o=new Se(a),l=Ce(this.outputs,o);for(let t=0;t<this.lossFunctions.length;++t){const n=this.lossFunctions[t],a=i.mean(n(r[t],l[t]));s=0===t?a:i.add(s,a),e.push(s)}for(let t=0;t<this.metricsTensors.length;++t){const s=this.metricsTensors[t][0],n=this.metricsTensors[t][1],a=i.mean(s(r[n],l[n]));e.push(a)}return e}))}async fit(t,e,s={}){return yi(this,t,e,s)}async fitDataset(t,e){return oi(this,t,e)}async trainOnBatch(t,e){const s=await this.standardizeUserData(t,e),n=s[0],r=s[1],a=this.makeTrainFunction(),o=a(n.concat(r)),l=[];for(const i of o){const t=await i.data();l.push(t[0])}return i.dispose(o),wi(s[0],t),wi(s[1],e),d(l)}getNamedWeights(t){const e=[],s=null!=t&&t.trainableOnly,i=s?this.trainableWeights:this.weights,n=this.getWeights(s);for(let r=0;r<i.length;++r)s&&!i[r].trainable||e.push({name:i[r].originalName,tensor:n[r]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=i.memory().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-i.memory().numTensors}return t}getLossIdentifiers(){let t;if("string"===typeof this.loss)t=f(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!==typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>f(t)))}else{const e=Object.keys(this.loss);t={};const s=this.loss;for(const i of e){if("string"!==typeof s[i])throw new Error("Serialization of non-string loss is not supported.");t[i]=f(s[i])}}return t}getMetricIdentifiers(){if("string"===typeof this.metrics||"function"===typeof this.metrics)return[f(_s(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>f(_s(t))));{const t={};for(const e in this.metrics)t[e]=f(_s(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Ks(t.optimizer_config),s=ts(e);let i,n;if("string"===typeof t.loss)i=m(t.loss);else if(Array.isArray(t.loss))i=t.loss.map((t=>m(t)));else if(null!=t.loss){i={};for(const e in t.loss)i[e]=m(t.loss[e])}if(Array.isArray(t.metrics))n=t.metrics.map((t=>m(t)));else if(null!=t.metrics){n={};for(const e in t.metrics)n[e]=m(t.metrics[e])}this.compile({loss:i,metrics:n,optimizer:s})}async save(t,e){if("string"===typeof t){const e=i.io.getSaveHandlers(t);if(0===e.length)throw new a(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new a(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new a("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await i.io.encodeWeights(this.getNamedWeights(e)),n=!1,r=null,o=this.toJSON(r,n),l={modelTopology:o,format:xi,generatedBy:`TensorFlow.js tfjs-layers v${Ys}`,convertedBy:null},h=null!=e&&e.includeOptimizer;if(h&&null!=this.optimizer){l.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:n}=await i.io.encodeWeights(await this.optimizer.getWeights(),t);s.specs.push(...n),s.data=i.io.concatenateArrayBuffers([s.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Ws(this.userDefinedMetadata,this.name,t),l.userDefinedMetadata=this.userDefinedMetadata}return l.weightData=s.data,l.weightSpecs=s.specs,t.save(l)}setUserDefinedMetadata(t){Ws(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ti.className="Model",i.serialization.registerClass(Ti);class Li extends Ti{}Li.className="Functional",i.serialization.registerClass(Li);class Ei extends Ti{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:F("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){const e=t.inboundNodes[0].outputTensors[0].shape;if(e.some((t=>t<0)))throw new a(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){const e=t instanceof Ei||t instanceof Ti;let s;if(e){if(s=t,1!==s.outputs.length)throw new a("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==s.inputs.length)throw new a("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new a("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=ze({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=s.outputs,this.inputs=s.inputs;else{if(1!==t.inboundNodes.length)throw new a(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new a("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=be(this.outputs[0])}this.inboundNodes=[],new de({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:u(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(ie(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ti({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,s=console.log){this.built||this.build(),super.summary(t,e,s)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,s={}){if(!this.built)throw new r("The model needs to be compiled before being used.");return this.model.evaluate(t,e,s)}async evaluateDataset(t,e){if(!this.built)throw new r("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,s={}){if(!this.built)throw new r("The model needs to be compiled before being used.");return this.model.fit(t,e,s)}async fitDataset(t,e){if(!this.built)throw new r("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,s={},n=!1){let r,l={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0]["className"])throw new a("Legacy serialization format not supported yet.");r=e}else i.util.assert(null!=e["layers"],(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=e["layers"],delete e["layers"],l=e;const h=new t(l);if(!(h instanceof Ei))throw new o(`Sequential.fromConfig called on non-Sequential input: ${h}`);for(const i of r){const t=void 0,e=ts(i,t,n);n&&e.setFastWeightInitDuringBuild(!0),h.add(e)}return h}set stopTraining(t){if(null==this.model)throw new a("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new a("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const s={};s["className"]=e.getClassName(),s["config"]=e.getConfig(),t.push(s)}return{name:this.name,layers:t}}}Ei.className="Sequential",i.serialization.registerClass(Ei);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class $i extends i.serialization.Serializable{getConfig(){return{}}}class Di extends $i{apply(t,e=1){return vt(t,e)}}Di.className="elu",i.serialization.registerClass(Di);class Fi extends $i{apply(t){return i.selu(t)}}Fi.className="selu",i.serialization.registerClass(Fi);class Ri extends $i{apply(t){return i.relu(t)}}Ri.className="relu",i.serialization.registerClass(Ri);class Oi extends $i{apply(t){return(0,i.tidy)((()=>i.minimum(6,i.relu(t))))}}Oi.className="relu6",i.serialization.registerClass(Oi);class _i extends $i{apply(t){return t}}_i.className="linear",i.serialization.registerClass(_i);class Mi extends $i{apply(t){return i.sigmoid(t)}}Mi.className="sigmoid",i.serialization.registerClass(Mi);class Bi extends $i{apply(t){return It(t)}}Bi.className="hardSigmoid",i.serialization.registerClass(Bi);class Wi extends $i{apply(t){return i.softplus(t)}}Wi.className="softplus",i.serialization.registerClass(Wi);class Ui extends $i{apply(t){return At(t)}}Ui.className="softsign",i.serialization.registerClass(Ui);class ji extends $i{apply(t){return i.tanh(t)}}ji.className="tanh",i.serialization.registerClass(ji);class Vi extends $i{apply(t,e=-1){return i.softmax(t,e)}}Vi.className="softmax",i.serialization.registerClass(Vi);class Pi extends $i{apply(t,e=-1){return i.logSoftmax(t,e)}}Pi.className="logSoftmax",i.serialization.registerClass(Pi);class qi extends $i{apply(t,e=1){return(0,i.tidy)((()=>i.mul(i.sigmoid(i.mul(t,e)),t)))}}qi.className="swish",i.serialization.registerClass(qi);class Ji extends $i{apply(t){return(0,i.tidy)((()=>i.mul(t,i.tanh(i.softplus(t)))))}}function Hi(t){return t.getClassName()}function Zi(t,e={}){return z(t,i.serialization.SerializationMap.getMap().classNameMap,e,"activation")}function Ki(t){if(null==t){const t={className:"linear",config:{}};return Zi(t)}if("string"===typeof t){const e={};return e["className"]=t,e["config"]={},Zi(e)}return t instanceof $i?t:Zi(t)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Gi(t){if(null!=t&&"object"!==typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}Ji.className="mish",i.serialization.registerClass(Ji);class Yi extends i.serialization.Serializable{}class Xi extends Yi{constructor(t){super(),Gi(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return(0,i.tidy)((()=>{let e=(0,i.zeros)([1]);return this.hasL1&&(e=(0,i.add)(e,(0,i.sum)(i.mul(this.l1,(0,i.abs)(t))))),this.hasL2&&(e=(0,i.add)(e,(0,i.sum)(i.mul(this.l2,kt(t))))),i.reshape(e,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e["l1"],l2:e["l2"]})}}Xi.className="L1L2",i.serialization.registerClass(Xi);const Qi={l1l2:"L1L2"};function tn(t){return b(t)}function en(t,e={}){return z(t,i.serialization.SerializationMap.getMap().classNameMap,e,"regularizer")}function sn(t){if(null==t)return null;if("string"===typeof t){const e=t in Qi?Qi[t]:t,s={className:e,config:{}};return en(s)}return t instanceof Yi?t:en(t)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class nn extends fe{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=se(t);let s=(0,i.relu)(t);return null!=this.maxValue&&(s=(0,i.clipByValue)(s,0,this.maxValue)),s}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}nn.className="ReLU",i.serialization.registerClass(nn);class rn extends fe{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const s=se(t);return(0,i.leakyRelu)(s,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}rn.className="LeakyReLU",i.serialization.registerClass(rn);class an extends fe{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Qt(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=sn(t.alphaRegularizer),this.alphaConstraint=Ue(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!==typeof t.sharedAxes)throw new a(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);this.sharedAxes=[t.sharedAxes]}}build(t){t=ie(t);const e=t.slice(1);if(null!=this.sharedAxes)for(const i of this.sharedAxes)e[i-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const s={};if(null!=this.sharedAxes)for(let i=1;i<t.length;++i)s[i]=t[i];this.inputSpec=[new ue({ndim:t.length,axes:s})],this.built=!0}call(t,e){return t=se(t),(0,i.prelu)(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Xt(this.alphaInitializer),alphaRegularizer:tn(this.alphaRegularizer),alphaConstraint:Be(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}an.className="PReLU",i.serialization.registerClass(an);class on extends fe{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new o(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const s=se(t);return(0,i.elu)(s)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}on.className="ELU",i.serialization.registerClass(on);class ln extends fe{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const s=se(t);return(0,i.mul)(s,(0,i.cast)((0,i.greater)(s,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}ln.className="ThresholdedReLU",i.serialization.registerClass(ln);class hn extends fe{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Vi).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const s=se(t);return this.softmax(s,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function un(t,e,s){if("number"===typeof t)return u(t,e);if(t.length!==e)throw new a(`The ${s} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let i=0;i<e;++i){const n=t[i];if(!Q(n))throw new a(`The ${s} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${n}`)}return t}function cn(t,e,s,i,n=1){if(null==t)return t;const r=e+(e-1)*(n-1);let a;return a="same"===s?t:t-r+1,Math.floor((a+i-1)/i)}function pn(t,e,s,i){if(null==t)return null;if("valid"===i)t=t*e+st([s-e,0]);else{if("same"!==i)throw new a(`Unsupport padding mode: ${i}.`);t*=e}return t}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function dn(t,e){return(0,i.tidy)((()=>(U(e),"channelsFirst"===e?i.transpose(t,[0,2,3,1]):t)))}function gn(t,e){return(0,i.tidy)((()=>(U(e),"channelsFirst"===e?i.transpose(t,[0,2,3,4,1]):t)))}function fn(t,e,s,n=1,r="valid",l,h=1){return(0,i.tidy)((()=>{if(null==l&&(l=at()),U(l),3!==t.shape.length)throw new a(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==e.shape.length)throw new a(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(null!=s&&1!==s.shape.length)throw new a(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if("channelsFirst"===l&&(t=i.transpose(t,[0,2,1])),"causal"===r)throw new o("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let u=i.conv1d(t,e,n,"same"===r?"same":"valid","NWC",h);return null!=s&&(u=Nt(u,s)),u}))}function mn(t,e,s,n=[1,1],r="valid",l,h,u=null){return(0,i.tidy)((()=>{if(null==l&&(l=at()),U(l),3!==t.rank&&4!==t.rank)throw new a(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new a(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let c=dn(t,l);if("causal"===r)throw new o("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return c=i.fused.conv2d({x:c,filter:e,strides:n,pad:"same"===r?"same":"valid",dilations:h,dataFormat:"NHWC",bias:s,activation:u}),"channelsFirst"===l&&(c=i.transpose(c,[0,3,1,2])),c}))}function yn(t,e,s,n=[1,1,1],r="valid",l,h){return(0,i.tidy)((()=>{if(null==l&&(l=at()),U(l),4!==t.rank&&5!==t.rank)throw new a(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==e.rank&&5!==e.rank)throw new a(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let u=gn(t,l);if("causal"===r)throw new o("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return u=i.conv3d(u,e,n,"same"===r?"same":"valid","NDHWC",h),null!=s&&(u=Nt(u,s)),"channelsFirst"===l&&(u=i.transpose(u,[0,4,1,2,3])),u}))}hn.className="Softmax",i.serialization.registerClass(hn);class bn extends fe{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",bn.verifyArgs(e),this.rank=t,I(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new o(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=un(e.kernelSize,t,"kernelSize"),this.strides=un(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,V(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,U(this.dataFormat),this.activation=Ki(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Qt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ue(e.biasConstraint),this.biasRegularizer=sn(e.biasRegularizer),this.activityRegularizer=sn(e.activityRegularizer),this.dilationRate=un(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new a(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new a(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new a(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(c("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!==typeof t.kernelSize&&!C(t.kernelSize,"number",1,3))throw new a(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Hi(this.activation),useBias:this.useBias,biasInitializer:Xt(this.biasInitializer),biasRegularizer:tn(this.biasRegularizer),activityRegularizer:tn(this.activityRegularizer),biasConstraint:Be(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class wn extends bn{constructor(t,e){super(t,e),this.kernel=null,wn.verifyArgs(e),this.filters=e.filters,I(this.filters,"filters"),this.kernelInitializer=Qt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ue(e.kernelConstraint),this.kernelRegularizer=sn(e.kernelRegularizer)}build(t){t=ie(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new a(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],i=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return(0,i.tidy)((()=>{let e;t=se(t);const s=null==this.bias?null:this.bias.read(),i=L(this.activation.getClassName());if(null!=i&&2===this.rank)e=mn(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate,i);else{if(1===this.rank)e=fn(t,this.kernel.read(),s,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=mn(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new o("convolutions greater than 3D are not implemented yet.");e=yn(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=ie(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let n=0;n<s.length;++n){const t=cn(s[n],this.kernelSize[n],this.padding,this.strides[n],"number"===typeof this.dilationRate?this.dilationRate:this.dilationRate[n]);e.push(t)}let i=[t[0]];return"channelsLast"===this.dataFormat?(i=i.concat(e),i.push(this.filters)):(i.push(this.filters),i=i.concat(e)),i}getConfig(){const t={filters:this.filters,kernelInitializer:Xt(this.kernelInitializer),kernelRegularizer:tn(this.kernelRegularizer),kernelConstraint:Be(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!==typeof t.filters||t.filters<1)throw new a(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}class zn extends wn{constructor(t){super(2,t),zn.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t["rank"],t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&!C(t.kernelSize,"number",1,2))throw new a(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}zn.className="Conv2D",i.serialization.registerClass(zn);class kn extends wn{constructor(t){super(3,t),kn.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t["rank"],t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new a(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}kn.className="Conv3D",i.serialization.registerClass(kn);class Sn extends zn{constructor(t){if(super(t),this.inputSpec=[new ue({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new a(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=ie(t),4!==t.length)throw new a("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new a("The channel dimension of the inputs should be defined. Found `None`.");const s=t[e],i=this.kernelSize.concat([this.filters,s]);this.kernel=this.addWeight("kernel",i,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ue({ndim:4,axes:{[e]:s}})],this.built=!0}call(t,e){return i.tidy((()=>{let e=se(t);if(4!==e.shape.length)throw new a(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const s=e.shape,n=s[0];let r,o;"channelsFirst"===this.dataFormat?(r=2,o=3):(r=1,o=2);const l=s[r],h=s[o],u=this.kernelSize[0],c=this.kernelSize[1],p=this.strides[0],d=this.strides[1],g=pn(l,p,u,this.padding),f=pn(h,d,c,this.padding),m=[n,g,f,this.filters];"channelsLast"!==this.dataFormat&&(e=i.transpose(e,[0,2,3,1]));let y=i.conv2dTranspose(e,this.kernel.read(),m,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=i.transpose(y,[0,3,1,2])),null!=this.bias&&(y=Nt(y,this.bias.read(),this.dataFormat)),null!=this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(t){t=ie(t);const e=t.slice();let s,i,n;"channelsFirst"===this.dataFormat?(s=1,i=2,n=3):(s=3,i=1,n=2);const r=this.kernelSize[0],a=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[s]=this.filters,e[i]=pn(e[i],o,r,this.padding),e[n]=pn(e[n],l,a,this.padding),e}getConfig(){const t=super.getConfig();return delete t["dilationRate"],t}}Sn.className="Conv2DTranspose",i.serialization.registerClass(Sn);class Nn extends kn{constructor(t){if(super(t),this.inputSpec=[new ue({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new a(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=ie(t),5!==t.length)throw new a("Input should have rank 5; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new a("The channel dimension of the inputs should be defined. Found `None`.");const s=t[e],i=this.kernelSize.concat([this.filters,s]);this.kernel=this.addWeight("kernel",i,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ue({ndim:5,axes:{[e]:s}})],this.built=!0}call(t,e){return i.tidy((()=>{let e=se(t);if(5!==e.shape.length)throw new a(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const s=e.shape,n=s[0];let r,o,l;"channelsFirst"===this.dataFormat?(l=2,r=3,o=4):(l=1,r=2,o=3);const h=s[l],u=s[r],c=s[o],p=this.kernelSize[0],d=this.kernelSize[1],g=this.kernelSize[2],f=this.strides[0],m=this.strides[1],y=this.strides[2],b=pn(h,f,p,this.padding),w=pn(u,m,d,this.padding),z=pn(c,y,g,this.padding),k=[n,b,w,z,this.filters];"channelsLast"!==this.dataFormat&&(e=i.transpose(e,[0,2,3,4,1]));let S=i.conv3dTranspose(e,this.kernel.read(),k,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(S=i.transpose(S,[0,4,1,2,3])),null!==this.bias&&(S=Nt(S,this.bias.read(),this.dataFormat)),null!==this.activation&&(S=this.activation.apply(S)),S}))}computeOutputShape(t){t=ie(t);const e=t.slice();let s,i,n,r;"channelsFirst"===this.dataFormat?(s=1,i=2,n=3,r=4):(s=4,i=1,n=2,r=3);const a=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],h=this.strides[0],u=this.strides[1],c=this.strides[2];return e[s]=this.filters,e[i]=pn(e[i],h,a,this.padding),e[n]=pn(e[n],u,o,this.padding),e[r]=pn(e[r],c,l,this.padding),e}getConfig(){const t=super.getConfig();return delete t["dilationRate"],t}}Nn.className="Conv3DTranspose",i.serialization.registerClass(Nn);class vn extends wn{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new a("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new a("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new a(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Qt(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=sn(e.depthwiseRegularizer),this.depthwiseConstraint=Ue(e.depthwiseConstraint),this.pointwiseInitializer=Qt(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=sn(e.pointwiseRegularizer),this.pointwiseConstraint=Ue(e.pointwiseConstraint)}build(t){if(t=ie(t),t.length<this.rank+2)throw new a(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new a(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);const s=t[e],i=this.kernelSize.concat([s,this.depthMultiplier]),n=[];for(let a=0;a<this.rank;++a)n.push(1);n.push(s*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",i,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",n,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new ue({ndim:this.rank+2,axes:{[e]:s}})],this.built=!0}call(t,e){return(0,i.tidy)((()=>{let e;if(t=se(t),1===this.rank)throw new o("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=i.transpose(t,[0,2,3,1])),e=i.separableConv2d(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Nt(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=i.transpose(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t["rank"],delete t["kernelInitializer"],delete t["kernelRegularizer"],delete t["kernelConstraint"],t["depthwiseInitializer"]=Xt(this.depthwiseInitializer),t["pointwiseInitializer"]=Xt(this.pointwiseInitializer),t["depthwiseRegularizer"]=tn(this.depthwiseRegularizer),t["pointwiseRegularizer"]=tn(this.pointwiseRegularizer),t["depthwiseConstraint"]=Be(this.depthwiseConstraint),t["pointwiseConstraint"]=Be(this.pointwiseConstraint),t}}vn.className="SeparableConv";class An extends vn{constructor(t){super(2,t)}}An.className="SeparableConv2D",i.serialization.registerClass(An);class Cn extends wn{constructor(t){super(1,t),Cn.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t["rank"],delete t["dataFormat"],t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&!C(t.kernelSize,"number",1,1))throw new a(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Cn.className="Conv1D",i.serialization.registerClass(Cn);class In extends fe{constructor(t){super(t),"number"===typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"===typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return(0,i.tidy)((()=>{if(t=se(t),"channelsLast"===this.dataFormat){const e=gt(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return gt(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=gt(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return gt(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}In.className="Cropping2D",i.serialization.registerClass(In);class xn extends fe{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,U(this.dataFormat),this.interpolation=null==t.interpolation?"nearest":t.interpolation,j(this.interpolation)}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],s=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,s]}{const e=null==t[1]?null:this.size[0]*t[1],s=null==t[2]?null:this.size[1]*t[2];return[t[0],e,s,t[3]]}}call(t,e){return i.tidy((()=>{let e=se(t);const s=e.shape;if("channelsFirst"===this.dataFormat){e=i.transpose(e,[0,2,3,1]);const t=this.size[0]*s[2],n=this.size[1]*s[3],r="nearest"===this.interpolation?i.image.resizeNearestNeighbor(e,[t,n]):i.image.resizeBilinear(e,[t,n]);return i.transpose(r,[0,3,1,2])}{const t=this.size[0]*s[1],n=this.size[1]*s[2];return"nearest"===this.interpolation?i.image.resizeNearestNeighbor(e,[t,n]):i.image.resizeBilinear(e,[t,n])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Tn(t,e,s=[1,1],n="valid",r,o){return(0,i.tidy)((()=>{null==r&&(r=at()),U(r);let l=dn(t,r);if(4!==t.rank)throw new a(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==e.rank)throw new a(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return l=i.depthwiseConv2d(l,e,s,"same"===n?"same":"valid","NHWC",o),"channelsFirst"===r&&(l=i.transpose(l,[0,3,1,2])),l}))}xn.className="UpSampling2D",i.serialization.registerClass(xn);class Ln extends bn{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Qt(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ue(t.depthwiseConstraint),this.depthwiseRegularizer=sn(t.depthwiseRegularizer)}build(t){if(t=ie(t),t.length<4)throw new a(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new a(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const s=t[e],i=[this.kernelSize[0],this.kernelSize[1],s,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",i,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[s*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return(0,i.tidy)((()=>{t=se(t);let e=Tn(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Nt(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=ie(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],i="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,n=cn(e,this.kernelSize[0],this.padding,this.strides[0]),r=cn(s,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],i,n,r]:[t[0],n,r,i]}getConfig(){const t=super.getConfig();return t["depthMultiplier"]=this.depthMultiplier,t["depthwiseInitializer"]=Xt(this.depthwiseInitializer),t["depthwiseRegularizer"]=tn(this.depthwiseRegularizer),t["depthwiseConstraint"]=Be(this.depthwiseRegularizer),t}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function En(t,e,s,i){if(Array.isArray(t)){if(null!=e||null!=s)throw new a("When inputs is an array, neither initialState or constants should be provided");null!=i&&(s=t.slice(t.length-i,t.length),t=t.slice(0,t.length-i)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function n(t){return null==t||Array.isArray(t)?t:[t]}return e=n(e),s=n(s),{inputs:t,initialState:e,constants:s}}function $n(t,e,s,n=!1,r,l,h=!1,u=!1){return i.tidy((()=>{const c=e.shape.length;if(c<3)throw new a(`Input should be at least 3D, but is ${c}D.`);const p=[1,0].concat(it(2,c));if(e=i.transpose(e,p),null!=l)throw new o("The rnn() functoin of the deeplearn.js backend does not support constants yet.");h&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&(r=i.cast(i.cast(r,"bool"),"float32"),r.rank===c-1&&(r=i.expandDims(r,-1)),r=i.transpose(r,p)),n&&(e=i.reverse(e,0),null!=r&&(r=i.reverse(r,0)));const d=[];let g,f=s;const m=e.shape[0],y=i.unstack(e);let b,w;null!=r&&(b=i.unstack(r));for(let e=0;e<m;++e){const s=y[e],n=i.tidy((()=>t(s,f)));if(null==r)g=n[0],f=n[1];else{const t=i.tidy((()=>{const t=b[e],s=i.sub(i.onesLike(t),t),r=i.add(i.mul(n[0],t),i.mul(f[0],s)),a=f.map(((e,r)=>i.add(i.mul(n[1][r],t),i.mul(e,s))));return{output:r,newStates:a}}));g=t.output,f=t.newStates}u&&d.push(g)}if(u){const t=1;w=i.stack(d,t)}return[g,w,f]}))}Ln.className="DepthwiseConv2D",i.serialization.registerClass(Ln);class Dn extends fe{constructor(t){let e;if(super(t),null==t.cell)throw new a("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Un({cells:t.cell}):t.cell,null==e.stateSize)throw new a("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new ue({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return it(0,t).map((t=>null))}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){te(t)&&(t=t[0]);let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const s=e[0];let i;if(i=this.returnSequences?[t[0],t[1],s]:[t[0],s],this.returnState){const s=[];for(const i of e)s.push([t[0],i]);return[i].concat(s)}return i}computeMask(t,e){return i.tidy((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let s=0;s<t;++s)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){const e=null;if(null!=this.numConstants)throw new o("Constants support is not implemented in RNN yet.");te(t)&&(t=t[0]);const s=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new ue({shape:[s,null,...n]});const r=[t[0]].concat(t.slice(2));if(null!=e)throw new o("Constants support is not implemented in RNN yet.");let l;if(this.cell.build(r),l=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!i.util.arraysEqual(this.stateSpec.map((t=>t.shape[t.shape.length-1])),l))throw new a(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=l.map((t=>new ue({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){(0,i.tidy)((()=>{if(!this.stateful)throw new n("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape[0];if(null==s)throw new a("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>i.zeros([s,t]))):this.states_=[i.zeros([s,this.cell.stateSize])];else if(null==t)i.dispose(this.states_),null!=this.keptStates&&(i.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>i.zeros([s,t]))):this.states_[0]=i.zeros([s,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new a(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===e?this.keptStates.push(this.states_.slice()):i.dispose(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,o=[s,r];if(!i.util.arraysEqual(n.shape,o))throw new a(`State ${e} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>i.keep(t.clone())))}))}apply(t,e){let s=null==e?null:e["initialState"],i=null==e?null:e["constants"];null==e&&(e={});const n=En(t,s,i,this.numConstants);t=n.inputs,s=n.initialState,i=n.constants;let r=[],a=[];if(null!=s){e["initialState"]=s,r=r.concat(s),this.stateSpec=[];for(const t of s)this.stateSpec.push(new ue({shape:t.shape}));a=a.concat(this.stateSpec)}null!=i&&(e["constants"]=i,r=r.concat(i),this.numConstants=i.length);const o=r[0]instanceof ce;if(o){const s=[t].concat(r),i=this.inputSpec.concat(a),n=this.inputSpec;this.inputSpec=i;const o=super.apply(s,e);return this.inputSpec=n,o}return super.apply(t,e)}call(t,e){return(0,i.tidy)((()=>{const s=null==e?null:e["mask"],i=null==e?null:e["training"];let n=null==e?null:e["initialState"];t=se(t),null==n&&(n=this.stateful?this.states_:this.getInitialState(t));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(n.length!==r)throw new a(`RNN Layer has ${r} state(s) but was passed ${n.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:i},l=(t,e)=>{const s=this.cell.call([t].concat(e),o);return[s[0],s.slice(1)]},h=$n(l,t,n,this.goBackwards,s,null,this.unroll,this.returnSequences),u=h[0],c=h[1],p=h[2];this.stateful&&this.resetStates(p,i);const d=this.returnSequences?c:u;return this.returnState?[d].concat(p):d}))}getInitialState(t){return(0,i.tidy)((()=>{let e=i.zeros(t.shape);return e=i.sum(e,[1,2]),e=lt(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?yt(e,[1,t]):e)):this.cell.stateSize>1?[yt(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e["numConstants"]=this.numConstants);const s=this.cell.getConfig();return this.getClassName()===Dn.className&&(e["cell"]={className:this.cell.getClassName(),config:s}),Object.assign({},s,t,e)}static fromConfig(t,e,s={}){const i=e["cell"],n=ts(i,s);return new t(Object.assign(e,{cell:n}))}}Dn.className="RNN",i.serialization.registerClass(Dn);class Fn extends fe{}class Rn extends Fn{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,I(this.units,"units"),this.activation=Ki(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=sn(t.kernelRegularizer),this.recurrentRegularizer=sn(t.recurrentRegularizer),this.biasRegularizer=sn(t.biasRegularizer),this.kernelConstraint=Ue(t.kernelConstraint),this.recurrentConstraint=Ue(t.recurrentConstraint),this.biasConstraint=Ue(t.biasConstraint),this.dropout=et([1,st([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=et([1,st([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=ie(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return(0,i.tidy)((()=>{if(2!==t.length)throw new a(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let s=t[1];t=t[0];const n=null!=e["training"]&&e["training"];let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=jn({ones:()=>i.onesLike(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=jn({ones:()=>i.onesLike(s),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,l=this.recurrentDropoutMask;r=wt(null!=o?i.mul(t,o):t,this.kernel.read()),null!=this.bias&&(r=Nt(r,this.bias.read())),null!=l&&(s=i.mul(s,l));let h=i.add(r,wt(s,this.recurrentKernel.read()));return null!=this.activation&&(h=this.activation.apply(h)),[h,h]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Hi(this.activation),useBias:this.useBias,kernelInitializer:Xt(this.kernelInitializer),recurrentInitializer:Xt(this.recurrentInitializer),biasInitializer:Xt(this.biasInitializer),kernelRegularizer:tn(this.kernelRegularizer),recurrentRegularizer:tn(this.recurrentRegularizer),biasRegularizer:tn(this.biasRegularizer),activityRegularizer:tn(this.activityRegularizer),kernelConstraint:Be(this.kernelConstraint),recurrentConstraint:Be(this.recurrentConstraint),biasConstraint:Be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}Rn.className="SimpleRNNCell",i.serialization.registerClass(Rn);class On extends Dn{constructor(t){t.cell=new Rn(t),super(t)}call(t,e){return(0,i.tidy)((()=>{null!=this.cell.dropoutMask&&(i.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==e?null:e["mask"],n=null==e?null:e["training"],r=null==e?null:e["initialState"];return super.call(t,{mask:s,training:n,initialState:r})}))}static fromConfig(t,e){return new t(e)}}On.className="SimpleRNN",i.serialization.registerClass(On);class _n extends Fn{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new a("GRUCell does not support reset_after parameter set to true.");this.units=t.units,I(this.units,"units"),this.activation=Ki(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Ki(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=sn(t.kernelRegularizer),this.recurrentRegularizer=sn(t.recurrentRegularizer),this.biasRegularizer=sn(t.biasRegularizer),this.kernelConstraint=Ue(t.kernelConstraint),this.recurrentConstraint=Ue(t.recurrentConstraint),this.biasConstraint=Ue(t.biasConstraint),this.dropout=et([1,st([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=et([1,st([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=ie(t);const e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return(0,i.tidy)((()=>{if(2!==t.length)throw new a(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const s=null!=e["training"]&&e["training"];let n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=jn({ones:()=>i.onesLike(t),rate:this.dropout,training:s,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=jn({ones:()=>i.onesLike(n),rate:this.recurrentDropout,training:s,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,o=this.recurrentDropoutMask;let l,h,u;0<this.dropout&&this.dropout<1&&(t=i.mul(t,r[0]));let c=wt(t,this.kernel.read());this.useBias&&(c=Nt(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=i.mul(n,o[0]));const p=this.recurrentKernel.read(),[d,g]=i.split(p,[2*this.units,this.units],p.rank-1),f=wt(n,d),[m,y,b]=i.split(c,3,c.rank-1),[w,z]=i.split(f,2,f.rank-1);l=this.recurrentActivation.apply(i.add(m,w)),h=this.recurrentActivation.apply(i.add(y,z));const k=wt(i.mul(h,n),g);u=this.activation.apply(i.add(b,k));const S=i.add(i.mul(l,n),i.mul(i.add(1,i.neg(l)),u));return[S,S]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Hi(this.activation),recurrentActivation:Hi(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xt(this.kernelInitializer),recurrentInitializer:Xt(this.recurrentInitializer),biasInitializer:Xt(this.biasInitializer),kernelRegularizer:tn(this.kernelRegularizer),recurrentRegularizer:tn(this.recurrentRegularizer),biasRegularizer:tn(this.biasRegularizer),activityRegularizer:tn(this.activityRegularizer),kernelConstraint:Be(this.kernelConstraint),recurrentConstraint:Be(this.recurrentConstraint),biasConstraint:Be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}_n.className="GRUCell",i.serialization.registerClass(_n);class Mn extends Dn{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new _n(t),super(t)}call(t,e){return(0,i.tidy)((()=>{null!=this.cell.dropoutMask&&(i.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==e?null:e["mask"],n=null==e?null:e["training"],r=null==e?null:e["initialState"];return super.call(t,{mask:s,training:n,initialState:r})}))}static fromConfig(t,e){return 0===e["implmentation"]&&(e["implementation"]=1),new t(e)}}Mn.className="GRU",i.serialization.registerClass(Mn);class Bn extends Fn{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,I(this.units,"units"),this.activation=Ki(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Ki(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=sn(t.kernelRegularizer),this.recurrentRegularizer=sn(t.recurrentRegularizer),this.biasRegularizer=sn(t.biasRegularizer),this.kernelConstraint=Ue(t.kernelConstraint),this.recurrentConstraint=Ue(t.recurrentConstraint),this.biasConstraint=Ue(t.biasConstraint),this.dropout=et([1,st([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=et([1,st([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=ie(t);const s=t[t.length-1];let i;if(this.kernel=this.addWeight("kernel",[s,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,s=this.units;i=new(e=class extends Dt{apply(e,i){const n=t.apply([s]),r=(new Rt).apply([s]),a=t.apply([2*s]);return mt(mt(n,r),a)}},e.className="CustomInit",e)}else i=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,i,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return(0,i.tidy)((()=>{const s=null!=e["training"]&&e["training"];if(3!==t.length)throw new a(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1];const r=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=jn({ones:()=>i.onesLike(t),rate:this.dropout,training:s,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=jn({ones:()=>i.onesLike(n),rate:this.recurrentDropout,training:s,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,l=this.recurrentDropoutMask;let h,u,c,p;0<this.dropout&&this.dropout<1&&(t=i.mul(t,o[0]));let d=wt(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=i.mul(n,l[0])),d=i.add(d,wt(n,this.recurrentKernel.read())),this.useBias&&(d=Nt(d,this.bias.read()));const[g,f,m,y]=i.split(d,4,d.rank-1);h=this.recurrentActivation.apply(g),u=this.recurrentActivation.apply(f),c=i.add(i.mul(u,r),i.mul(h,this.activation.apply(m))),p=this.recurrentActivation.apply(y);const b=i.mul(p,this.activation.apply(c));return[b,b,c]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Hi(this.activation),recurrentActivation:Hi(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xt(this.kernelInitializer),recurrentInitializer:Xt(this.recurrentInitializer),biasInitializer:Xt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:tn(this.kernelRegularizer),recurrentRegularizer:tn(this.recurrentRegularizer),biasRegularizer:tn(this.biasRegularizer),activityRegularizer:tn(this.activityRegularizer),kernelConstraint:Be(this.kernelConstraint),recurrentConstraint:Be(this.recurrentConstraint),biasConstraint:Be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}Bn.className="LSTMCell",i.serialization.registerClass(Bn);class Wn extends Dn{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Bn(t),super(t)}call(t,e){return(0,i.tidy)((()=>{null!=this.cell.dropoutMask&&(i.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==e?null:e["mask"],n=null==e?null:e["training"],r=null==e?null:e["initialState"];return super.call(t,{mask:s,training:n,initialState:r})}))}static fromConfig(t,e){return 0===e["implmentation"]&&(e["implementation"]=1),new t(e)}}Wn.className="LSTM",i.serialization.registerClass(Wn);class Un extends Fn{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return(0,i.tidy)((()=>{let s=t.slice(1);const i=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?i.push(s.splice(0,t.stateSize.length)):i.push(s.splice(0,1));i.reverse();const n=[];let r;for(let a=0;a<this.cells.length;++a){const o=this.cells[a];s=i[a],r=0===a?[t[0]].concat(s):[r[0]].concat(s),r=o.call(r,e),n.push(r.slice(1))}s=[];for(const t of n.slice().reverse())s.push(...t);return[r[0]].concat(s)}))}build(t){let e;te(t)&&(t=t[0]),this.cells.forEach(((s,i)=>{H(`RNNCell_${i}`,(()=>{s.build(t),e=Array.isArray(s.stateSize)?s.stateSize[0]:s.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e=t=>({className:t.getClassName(),config:t.getConfig()}),s=this.cells.map(e),i={cells:s};return Object.assign({},t,i)}static fromConfig(t,e,s={}){const i=[];for(const n of e["cells"])i.push(ts(n,s));return new t({cells:i})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return le(t)}setWeights(t){const e=[];for(const s of this.cells){const i=s.weights.length,n=t.splice(i);for(let t=0;t<s.weights.length;++t)e.push([s.weights[t],n[t]])}he(e)}}function jn(t){const{ones:e,rate:s,training:n=!1,count:r=1,dropoutFunc:a}=t,o=()=>null!=a?a(e(),s):Ct(e(),s),l=()=>xt(o,e,n);if(!r||r<=1)return i.keep(l().clone());const h=Array(r).fill(void 0).map(l);return h.map((t=>i.keep(t.clone())))}Un.className="StackedRNNCells",i.serialization.registerClass(Un);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var Vn=function(t,e){var s={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(s[i]=t[i]);if(null!=t&&"function"===typeof Object.getOwnPropertySymbols){var n=0;for(i=Object.getOwnPropertySymbols(t);n<i.length;n++)e.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(t,i[n])&&(s[i[n]]=t[i[n]])}return s};class Pn extends Dn{constructor(t){if(t.unroll)throw new o("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new o("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new ue({ndim:5})]}call(t,e){return i.tidy((()=>{if(null!=this.cell.dropoutMask&&(i.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e["constants"])throw new a("ConvRNN2D cell does not support constants");const s=null==e?null:e["mask"],n=null==e?null:e["training"],r=null==e?null:e["initialState"];return super.call(t,{mask:s,training:n,initialState:r})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return i.tidy((()=>{const{stateSize:e}=this.cell,s=t.shape,n=this.computeSingleOutputShape(s),r=[n[0],...n.slice(2)],a=i.zeros(r);return Array.isArray(e)?Array(e.length).fill(a):[a]}))}resetStates(t,e=!1){i.tidy((()=>{if(!this.stateful)throw new n("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape,r=this.computeSingleOutputShape(s),o=[r[0],...r.slice(2)],l=s[0];if(null==l)throw new a("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>i.zeros(o))):this.states_=[i.zeros(o)];else if(null==t)i.dispose(this.states_),null!=this.keptStates&&(i.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>i.zeros(o))):this.states_[0]=i.zeros(o);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new a(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):i.dispose(this.states_);for(let e=0;e<this.states_.length;++e){const s=t[e],n=o;if(!i.util.arraysEqual(s.shape,n))throw new a(`State ${e} is incompatible with layer ${this.name}: expected shape=${n}, received shape=${s.shape}`);this.states_[e]=s}}this.states_=this.states_.map((t=>i.keep(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:s,kernelSize:i,padding:n,strides:r,dilationRate:a}=this.cell,o="channelsFirst"===e,l=t[o?3:2],h=t[o?4:3],u=cn(l,i[0],n,r[0],a[0]),c=cn(h,i[1],n,r[1],a[1]),p=[...t.slice(0,2),...o?[s,u,c]:[u,c,s]];return p}}Pn.className="ConvRNN2D";class qn extends Bn{constructor(t){const{filters:e,kernelSize:s,strides:i,padding:n,dataFormat:r,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,I(this.filters,"filters"),this.kernelSize=un(s,2,"kernelSize"),this.kernelSize.forEach((t=>I(t,"kernelSize"))),this.strides=un(i||1,2,"strides"),this.strides.forEach((t=>I(t,"strides"))),this.padding=n||"valid",V(this.padding),this.dataFormat=r||"channelsLast",U(this.dataFormat),this.dilationRate=un(a||1,2,"dilationRate"),this.dilationRate.forEach((t=>I(t,"dilationRate")))}build(t){var e;t=ie(t);const s="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[s])throw new a(`The channel dimension of the input should be defined. Found ${t[s]}`);const n=t[s],r=4,o=this.kernelSize.concat([n,this.filters*r]);this.kernel=this.addWeight("kernel",o,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,this.filters*r]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const s=this.biasInitializer,n=this.filters;t=new(e=class extends Dt{apply(t,e){const r=s.apply([n]),a=i.ones([n]),o=s.apply([2*n]);return ft([r,a,o])}},e.className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*r],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return i.tidy((()=>{if(3!==t.length)throw new a(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const s=e["training"]||!1,n=t[0],r=t[1],o=t[2],l=4;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=jn({ones:()=>i.onesLike(n),rate:this.dropout,training:s,count:l,dropoutFunc:this.dropoutFunc}));const h=this.dropoutMask,u=(t,e,s)=>e&&e[s]?i.mul(e[s],t):t;let c=u(n,h,0),p=u(n,h,1),d=u(n,h,2),g=u(n,h,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=jn({ones:()=>i.onesLike(r),rate:this.recurrentDropout,training:s,count:l,dropoutFunc:this.dropoutFunc}));const f=this.recurrentDropoutMask;let m=u(r,f,0),y=u(r,f,1),b=u(r,f,2),w=u(r,f,3);const z=3,[k,S,N,v]=i.split(this.kernel.read(),l,z),[A,C,I,x]=this.useBias?i.split(this.bias.read(),l):[null,null,null,null];c=this.inputConv(c,k,A,this.padding),p=this.inputConv(p,S,C,this.padding),d=this.inputConv(d,N,I,this.padding),g=this.inputConv(g,v,x,this.padding);const[T,L,E,$]=i.split(this.recurrentKernel.read(),l,z);m=this.recurrentConv(m,T),y=this.recurrentConv(y,L),b=this.recurrentConv(b,E),w=this.recurrentConv(w,$);const D=this.recurrentActivation.apply(i.add(c,m)),F=this.recurrentActivation.apply(i.add(p,y)),R=i.add(i.mul(F,o),i.mul(D,this.activation.apply(i.add(d,b)))),O=i.mul(this.recurrentActivation.apply(i.add(g,w)),this.activation.apply(R));return[O,O,R]}))}getConfig(){const t=super.getConfig(),{units:e}=t,s=Vn(t,["units"]),i={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},s,i)}inputConv(t,e,s,n){const r=i.conv2d(t,e,this.strides,n||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return s?Nt(r,s,this.dataFormat):r}recurrentConv(t,e){const s=1;return i.conv2d(t,e,s,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}qn.className="ConvLSTM2DCell",i.serialization.registerClass(qn);class Jn extends Pn{constructor(t){const e=new qn(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Jn.className="ConvLSTM2D",i.serialization.registerClass(Jn);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Hn extends fe{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,s=[];for(let i=0;i<this.noiseShape.length;++i)s.push(null==this.noiseShape[i]?e[i]:this.noiseShape[i]);return s}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t);if(0<this.rate&&this.rate<1){const t=null!=e["training"]&&e["training"],i=this.getNoiseShape(s),n=xt((()=>Ct(s,this.rate,i,this.seed)),(()=>s),t);return n}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Hn.className="Dropout",i.serialization.registerClass(Hn);class Zn extends Hn{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Zn.className="SpatialDropout1D",i.serialization.registerClass(Zn);class Kn extends fe{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,I(this.units,"units"),this.activation=Ki(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Qt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Qt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ue(t.kernelConstraint),this.biasConstraint=Ue(t.biasConstraint),this.kernelRegularizer=sn(t.kernelRegularizer),this.biasRegularizer=sn(t.biasRegularizer),this.activityRegularizer=sn(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=ie(t);const e=t[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=ie(t);const e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t),i=L(this.activation.getClassName());let n;return null!=i?n=wt(s,this.kernel.read(),i,this.bias?this.bias.read():null):(n=wt(s,this.kernel.read()),null!=this.bias&&(n=Nt(n,this.bias.read())),null!=this.activation&&(n=this.activation.apply(n))),n}))}getConfig(){const t={units:this.units,activation:Hi(this.activation),useBias:this.useBias,kernelInitializer:Xt(this.kernelInitializer),biasInitializer:Xt(this.biasInitializer),kernelRegularizer:tn(this.kernelRegularizer),biasRegularizer:tn(this.biasRegularizer),activityRegularizer:tn(this.activityRegularizer),kernelConstraint:Be(this.kernelConstraint),biasConstraint:Be(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Kn.className="Dense",i.serialization.registerClass(Kn);class Gn extends fe{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=ie(t);for(const e of t.slice(1))if(null==e)throw new a(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],tt(t,1)]}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);let s=se(t);if("channelsFirst"===this.dataFormat&&s.rank>1){const t=[0];for(let e=2;e<s.rank;++e)t.push(e);t.push(1),s=(0,i.transpose)(s,t)}return ct(s)}))}getConfig(){const t={};null!=this.dataFormat&&(t["dataFormat"]=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Gn.className="Flatten",i.serialization.registerClass(Gn);class Yn extends fe{constructor(t){super(t),this.supportsMasking=!0,this.activation=Ki(t.activation)}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t);return this.activation.apply(s)}))}getConfig(){const t={activation:Hi(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Yn.className="Activation",i.serialization.registerClass(Yn);class Xn extends fe{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return(0,i.tidy)((()=>(t=se(t),ht(t,this.n))))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Xn.className="RepeatVector",i.serialization.registerClass(Xn);class Qn extends fe{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const s="Total size of new array must be unchanged.",i=e.slice();let n=1,r=null;for(let l=0;l<i.length;++l){const t=i[l];if(this.isUnknown(t)){if(null!==r)throw new a("Can only specifiy one unknown dimension.");r=l}else n*=t}const o=tt(t);if(null!==r){if(0===n||o%n!==0)throw new a(s);i[r]=o/n}else if(o!==n)throw new a(s);return i}computeOutputShape(t){let e=!1;for(let s=0;s<t.length;++s)if(this.isUnknown(t[s])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t),n=s.shape,r=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return(0,i.reshape)(s,r)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Qn.className="Reshape",i.serialization.registerClass(Qn);class tr extends fe{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);const e=it(1,t.dims.length+1);if(!i.util.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ue({ndim:this.dims.length+1})]}computeOutputShape(t){t=ie(t);const e=t.slice();return this.dims.forEach(((s,i)=>{e[i+1]=t[s]})),e}call(t,e){return(0,i.transpose)(se(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}tr.className="Permute",i.serialization.registerClass(tr);class er extends fe{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const s=se(t),n=-1;return(0,i.any)((0,i.notEqual)(s,this.maskValue),n)}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t),n=-1,r=!0,a=(0,i.any)((0,i.notEqual)(s,this.maskValue),n,r),o=(0,i.mul)(s,(0,i.cast)(a,s.dtype));return o}))}}er.className="Masking",i.serialization.registerClass(er);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class sr extends fe{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(g(t.inputLength))}this.inputDim=t.inputDim,I(this.inputDim,"inputDim"),this.outputDim=t.outputDim,I(this.outputDim,"outputDim"),this.embeddingsInitializer=Qt(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=sn(t.embeddingsRegularizer),this.activityRegularizer=sn(t.activityRegularizer),this.embeddingsConstraint=Ue(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return(0,i.tidy)((()=>this.maskZero?(t=se(t),(0,i.notEqual)(t,(0,i.zerosLike)(t))):null))}computeOutputShape(t){if(t=ie(t),null==this.inputLength)return[...t,this.outputDim];const e=g(this.inputLength);if(e.length!==t.length-1)throw new a(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let s=0;for(let i=0;i<e.length;++i){const n=e[i],r=t[i+1];if(null!=n&&null!=r&&n!==r)throw new a(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);null==n&&(e[s]=r),s++}}return[t[0],...e,this.outputDim]}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);let s=se(t);"int32"!==s.dtype&&(s=ot(s,"int32"));const n=zt(this.embeddings.read(),(0,i.reshape)(s,[s.size]));return(0,i.reshape)(n,ie(this.computeOutputShape(s.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Xt(this.embeddingsInitializer),embeddingsRegularizer:tn(this.embeddingsRegularizer),activityRegularizer:tn(this.activityRegularizer),embeddingsConstraint:Be(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}sr.className="Embedding",i.serialization.registerClass(sr);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ir extends fe{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new o}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let i=0;i<e.length;++i){const n=t[t.length-e.length+i],r=e[i];if(null==n||null==r||n<0||r<0)s.push(null);else if(1===n)s.push(r);else if(1===r)s.push(n);else{if(n!==r)throw new a("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(n)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[ie(t)]),t.length<2)throw new a(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=N(e),e.length>1)throw new a(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const e=null==t[n]?null:t[n].slice(1);s=this.computeElementwiseOpOutputShape(s,e)}const i=t.map((t=>t.length));-1===t.indexOf(null)&&1===N(i).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return(0,i.tidy)((()=>{if(this.reshapeRequired){const e=[],s=t.map((t=>t.rank));if(-1===s.indexOf(null)){const i=st(s);for(let s of t){const t=s.rank;for(let e=0;e<i-t;++e)s=lt(s,1);e.push(s)}return this.mergeFunction(e)}{let s=!1;for(const a of t){const t=a.rank;if(null==t){const t=a.shape,n=t[0],r=t.slice(1).concat([n]);let o=i.reshape(a,[n].concat(tt(t.slice(1))));o=i.transpose(o,[1,0]),o=i.reshape(o,r),e.push(o),s=!0}else if(t>1){const n=it(1,t).concat([0]);e.push(i.transpose(a,n)),s=!0}else e.push(a)}let n=this.mergeFunction(e);const r=n.rank;if(s)if(null==r){const t=n.shape,e=t.length,s=t[e-1],r=[s].concat(t.slice(0,t.length-1));n=i.reshape(i.transpose(i.reshape(n,[-1,s]),[1,0]),r)}else if(r>1){const t=[r-1].concat(it(0,r-1));n=i.transpose(n,t)}return n}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let i=1;i<t.length;++i){const s=null==t[i]?null:t[i].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let s=[];for(const i of t)null!=i&&null!==i[0]&&s.push(i[0]);return s=N(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return i.tidy((()=>{if(null==e)return null;if(!Array.isArray(e))throw new a("`mask` should be an Array");if(!Array.isArray(t))throw new a("`inputs` should be an Array");if(e.length!==t.length)throw new a(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;e=e.map((t=>null==t?t:i.expandDims(t,0)));let s=e[0];for(let t=1;t<e.length-1;++t)s=i.logicalAnd(s,e[t]);return s}))}}class nr extends ir{constructor(t){super(t)}mergeFunction(t){return(0,i.tidy)((()=>{let e=t[0].clone();for(let s=1;s<t.length;++s)e=i.add(e,t[s]);return e}))}}nr.className="Add",i.serialization.registerClass(nr);class rr extends ir{constructor(t){super(t)}mergeFunction(t){return(0,i.tidy)((()=>{let e=t[0].clone();for(let s=1;s<t.length;++s)e=i.mul(e,t[s]);return e}))}}rr.className="Multiply",i.serialization.registerClass(rr);class ar extends ir{constructor(t){super(t)}mergeFunction(t){return(0,i.tidy)((()=>{let e=t[0].clone();for(let s=1;s<t.length;++s)e=i.add(e,t[s]);return i.mul(1/t.length,e)}))}}ar.className="Average",i.serialization.registerClass(ar);class or extends ir{constructor(t){super(t)}mergeFunction(t){return(0,i.tidy)((()=>{let e=t[0];for(let s=1;s<t.length;++s)e=i.maximum(e,t[s]);return e}))}}or.className="Maximum",i.serialization.registerClass(or);class lr extends ir{constructor(t){super(t)}mergeFunction(t){return(0,i.tidy)((()=>{let e=t[0];for(let s=1;s<t.length;++s)e=i.minimum(e,t[s]);return e}))}}lr.className="Minimum",i.serialization.registerClass(lr);class hr extends ir{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new a("A `Concatenate` layer should be called on a list of at least 2 inputs");let e=!0;for(const i of t)if(null!=i){e=!1;break}if(e)return;const s=[];for(let n=0;n<t.length;++n){const e=t[n].slice();e.splice(this.axis,1);let r=!1;for(const t of s)if(i.util.arraysEqual(t,e)){r=!0;break}r||s.push(e)}if(s.length>1)throw new a("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return(0,i.tidy)((()=>ft(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new a("A `Concatenate` layer should be called on a list of inputs.");const e=t,s=e[0].slice(),i=this.axis<0?s.length+this.axis:this.axis;for(const n of e.slice(1)){if(null==s[i]||null==n[i]){s[i]=null;break}s[i]+=n[i]}return s}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new a("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new a("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new a(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return i.tidy((()=>{let s=!0;if(e.forEach((t=>{null==t||(s=!1)})),s)return null;const n=[];for(let a=0;a<t.length;++a)null==e[a]?n.push(i.cast(i.onesLike(t[a]),"bool")):e[a].rank<t[a].rank?n.push(i.expandDims(e[a],-1)):n.push(e[a]);const r=i.concat(n,this.axis);return i.all(r,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function ur(t,e){while(t<0)t+=e;return t}function cr(t,e,s){if(t.shape.length>3||e.shape.length>3)throw new o("batchDot is not implemented for tensors of 4D or higher rank yet");if(i.util.assert(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),i.util.assert(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`)),"number"===typeof s&&(s=[s,s]),"complex64"===t.dtype||"complex64"===e.dtype)throw new o("batchDot is not implemented for complex64-type Tensors yet.");const n=t.shape.length,r=e.shape.length;null==s&&(s=[n-1,r-2]);const a=s;return i.tidy((()=>{let s,o;if(n>r){s=n-r;const t=[];for(let e=0;e<s;++e)t.push(1);e=i.reshape(e,e.shape.concat(t))}else if(r>n){s=r-n;const e=[];for(let t=0;t<s;++t)e.push(1);t=i.reshape(t,t.shape.concat(e))}else s=0;if(2===t.shape.length&&2===e.shape.length)o=a[0]===a[1]?i.sum(i.mul(t,e),a[0]):i.sum(i.mul(i.transpose(t,[1,0]),e),a[1]);else{const s=a[0]!==t.shape.length-1,n=a[1]===e.shape.length-1;o=i.matMul(t,e,s,n)}if(s>0){let t;t=n>r?n+r-3:n-1;const e=[];for(let i=t;i<t+s;++i)e.push(i);o=i.squeeze(o,e)}return 1===o.shape.length&&(o=i.expandDims(o,1)),o}))}hr.className="Concatenate",i.serialization.registerClass(hr);class pr extends ir{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){i.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],s=t[1];if(e.length>3||s.length>3)throw new o("Dot layer does not support tensors of 4D or higher rank yet.");const n=this.interpretAxes(e,s);if(e[n[0]]!==s[n[1]])throw new a(`Dimension incompatibility: ${e[n[0]]} !== ${s[n[1]]}`)}mergeFunction(t){if(2!==t.length)throw new a(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,s=t[0],i=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,s)=>ur(e,t[s].shape.length))):[ur(this.axes,s.shape.length),ur(this.axes,i.shape.length)],this.normalize&&(s=es(s,e[0]),i=es(i,e[1])),cr(s,i,e)}interpretAxes(t,e){let s;return s=Array.isArray(this.axes)?this.axes:[ur(this.axes,t.length),ur(this.axes,e.length)],s}computeOutputShape(t){i.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),s=t[1].slice();if(e.length>3||s.length>3)throw new o("Dot layer does not support tensors of 4D or higher rank yet.");const n=this.interpretAxes(e,s);e.splice(n[0],1),s.splice(n[1],1),s.splice(0,1);const r=e.concat(s);return 1===r.length&&r.push(1),r}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}pr.className="Dot",i.serialization.registerClass(pr);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class dr extends fe{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t),n=()=>(0,i.add)(bt(s.shape,0,this.stddev),s),r=xt(n,(()=>s),e["training"]||!1);return r}))}}dr.className="GaussianNoise",i.serialization.registerClass(dr);class gr extends fe{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e);const s=se(t);if(this.rate>0&&this.rate<1){const t=()=>{const t=Math.sqrt(this.rate/(1-this.rate));return(0,i.mul)(s,bt(s.shape,1,t))};return xt(t,(()=>s),e["training"]||!1)}return s}))}}gr.className="GaussianDropout",i.serialization.registerClass(gr);class fr extends fe{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||se(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return(0,i.tidy)((()=>{if(this.rate<1&&this.rate>0){const s=this._getNoiseShape(t),n=()=>{const e=se(t),n=1.6732632423543772,r=1.0507009873554805,a=-n*r;let o=(0,i.greaterEqual)((0,i.randomUniform)(s),this.rate);o=ot(o,"float32");const l=((1-this.rate)*(1+this.rate*a**2))**-.5,h=-l*a*this.rate,u=(0,i.add)((0,i.mul)(e,o),(0,i.mul)((0,i.add)(o,-1),a));return(0,i.add)((0,i.mul)(u,l),h)};return xt(n,(()=>se(t)),e["training"]||!1)}return t}))}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function mr(t,e,s,n,r,a=.001){let l;if(2===t.rank)l=i.batchNorm2d(t,e,s,n,r,a);else if(3===t.rank)l=i.batchNorm3d(t,e,s,n,r,a);else{if(4!==t.rank)throw new o(`batchNormalization is not implemented for array of rank ${t.rank} yet`);l=i.batchNorm4d(t,e,s,n,r,a)}return l}function yr(t,e,s,n,r=.001){return(0,i.tidy)((()=>{const a=i.moments(t,n),o=a.mean,l=a.variance,h=mr(t,o,l,s,e,r);return[h,o,l]}))}function br(t,e,s,n,r=.001){return(0,i.tidy)((()=>{const a=i.moments(t,n),o=a.mean,l=a.variance,h=[];for(const e of it(0,t.rank))-1!==n.indexOf(e)?h.push(1):h.push(t.shape[e]);const u=(0,i.reshape)(o,h),c=(0,i.reshape)(l,h),p=null==e?null:(0,i.reshape)(e,h),d=null==s?null:(0,i.reshape)(s,h),g=mr(t,u,c,d,p,r);return[g,o,l]}))}function wr(t,e,s,n,r=.001){return i.util.arraysEqual(n.slice().sort(),it(0,t.rank-1))?yr(t,e,s,n,r):br(t,e,s,n,r)}fr.className="AlphaDropout",i.serialization.registerClass(fr);class zr extends fe{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Qt(t.betaInitializer||"zeros"),this.gammaInitializer=Qt(t.gammaInitializer||"ones"),this.movingMeanInitializer=Qt(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Qt(t.movingVarianceInitializer||"ones"),this.betaConstraint=Ue(t.betaConstraint),this.gammaConstraint=Ue(t.gammaConstraint),this.betaRegularizer=sn(t.betaRegularizer),this.gammaRegularizer=sn(t.gammaRegularizer)}build(t){t=ie(t);const e=this.axis>=0?this.axis:this.axis+t.length,s=t[e];if(null==s)throw new a(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new ue({ndim:t.length,axes:{[e]:s}})];const i=[s];this.scale&&(this.gamma=this.addWeight("gamma",i,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",i,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",i,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",i,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return(0,i.tidy)((()=>{const s=null!=e["training"]&&e["training"],n=se(t),r=n.shape,a=r.length,o=it(0,a),l=this.axis>=0?this.axis:this.axis+a;o.splice(l,1);const h=u(1,a);h[l]=r[l];const c=o.slice();c.sort();const p=!i.util.arraysEqual(c,it(0,a).slice(0,a-1)),d=()=>{if(p){const t=(0,i.reshape)(this.movingMean.read(),h),e=(0,i.reshape)(this.movingVariance.read(),h),s=this.center?(0,i.reshape)(this.beta.read(),h):null,r=this.scale?(0,i.reshape)(this.gamma.read(),h):null;return mr(n,t,e,s,r,this.epsilon)}return mr(n,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)};if(!s)return d();const[g,f,m]=wr(n,this.gamma.read(),this.beta.read(),o,this.epsilon),y=(t,e,s)=>{i.tidy((()=>{const n=1-s,r=t.read(),a=i.mul(i.sub(r,e),n);t.write(i.sub(r,a))}))},b=()=>{y(this.movingMean,f,this.momentum),y(this.movingVariance,m,this.momentum)};return b(),g}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xt(this.betaInitializer),gammaInitializer:Xt(this.gammaInitializer),movingMeanInitializer:Xt(this.movingMeanInitializer),movingVarianceInitializer:Xt(this.movingVarianceInitializer),betaRegularizer:tn(this.betaRegularizer),gammaRegularizer:tn(this.gammaRegularizer),betaConstraint:Be(this.betaConstraint),gammaConstraint:Be(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}zr.className="BatchNormalization",i.serialization.registerClass(zr);class kr extends fe{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"===typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Qt(t.betaInitializer||"zeros"),this.gammaInitializer=Qt(t.gammaInitializer||"ones"),this.betaRegularizer=sn(t.betaRegularizer),this.gammaRegularizer=sn(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=ie(t);const e=t.length;"number"===typeof this.axis&&(this.axis=[this.axis]);for(let n=0;n<this.axis.length;++n)this.axis[n]<0&&(this.axis[n]+=e);for(const n of this.axis)if(n<0||n>=e)throw new Error(`Invalid axis: ${n}`);if(this.axis.length!==N(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const s=this.axis.map((e=>t[e])),i=!0;this.scale?this.gamma=this.addWeight("gamma",s,"float32",this.gammaInitializer,this.gammaRegularizer,i):this.gamma=null,this.center?this.beta=this.addWeight("beta",s,"float32",this.betaInitializer,this.betaRegularizer,i):this.beta=null,this.built=!0}call(t,e){const s=se(t),n=s.shape,r=n.length;return(0,i.tidy)((()=>{const t=!0;let{mean:e,variance:a}=(0,i.moments)(s,this.axis,t);const o=u(1,r);for(const s of this.axis)o[s]=n[s];const l=t=>null!=t&&t.shape.length!==r?i.reshape(t,o):t;let h=this.scale?l(this.gamma.read()):null,c=this.center?l(this.beta.read()):null;const p=[],d=[];for(let s=0;s<r;++s)-1!==this.axis.indexOf(s)?(p.push(n[s]),d.push(1)):(p.push(1),d.push(n[s]));return e=i.tile(e,p),a=i.tile(a,p),null!=h&&(h=i.tile(h,d)),null!=c&&(c=i.tile(c,d)),mr(s,e,a,c,h,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xt(this.betaInitializer),gammaInitializer:Xt(this.gammaInitializer),betaRegularizer:tn(this.betaRegularizer),gammaRegularizer:tn(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}function Sr(t,e,s){return(0,i.tidy)((()=>{if(4!==t.rank)throw new a(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==e&&(e=[[1,1],[1,1]]),2!==e.length||2!==e[0].length||2!==e[1].length)throw new a("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s=at()),"channelsLast"!==s&&"channelsFirst"!==s)throw new a(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let n;return n="channelsFirst"===s?[[0,0],[0,0],e[0],e[1]]:[[0,0],e[0],e[1],[0,0]],i.pad(t,n)}))}kr.className="LayerNormalization",i.serialization.registerClass(kr);class Nr extends fe{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?at():t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"===typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new a(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,s;if("number"===typeof t.padding[0])e=[t.padding[0],t.padding[0]],s=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new a(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new a(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);s=t.padding[1]}this.padding=[e,s]}this.inputSpec=[new ue({ndim:4})]}computeOutputShape(t){let e,s;return t=ie(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,s=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,s]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,s=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,s,t[3]])}call(t,e){return(0,i.tidy)((()=>Sr(se(t),this.padding,this.dataFormat)))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function vr(t,e,s,n,r,a){return(0,i.tidy)((()=>{let o;U(r),P(a),V(n),null==s&&(s=[1,1]),null==n&&(n="valid"),null==r&&(r=at()),null==a&&(a="max"),t=dn(t,r);const l="same"===n?"same":"valid";return o="max"===a?i.maxPool(t,e,s,l):i.avgPool(t,e,s,l),"channelsFirst"===r&&(o=i.transpose(o,[0,3,1,2])),o}))}function Ar(t,e,s,n,r,a){return(0,i.tidy)((()=>{let o;U(r),P(a),V(n),null==s&&(s=[1,1,1]),null==n&&(n="valid"),null==r&&(r=at()),null==a&&(a="max"),t=gn(t,r);const l="same"===n?"same":"valid";return o="max"===a?i.maxPool3d(t,e,s,l):i.avgPool3d(t,e,s,l),"channelsFirst"===r&&(o=i.transpose(o,[0,4,1,2,3])),o}))}Nr.className="ZeroPadding2D",i.serialization.registerClass(Nr);class Cr extends fe{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"===typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!==typeof t.poolSize[0])throw new a(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(I(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"===typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!==typeof t.strides[0])throw new a(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}I(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,V(this.padding),this.inputSpec=[new ue({ndim:3})]}computeOutputShape(t){t=ie(t);const e=cn(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return(0,i.tidy)((()=>{this.invokeCallHook(t,e),t=lt(se(t),2);const s=this.poolingFunction(se(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return i.squeeze(s,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Ir extends Cr{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),vr(t,e,s,i,n,"max")}}Ir.className="MaxPooling1D",i.serialization.registerClass(Ir);class xr extends Cr{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),vr(t,e,s,i,n,"avg")}}xr.className="AveragePooling1D",i.serialization.registerClass(xr);class Tr extends fe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new a(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];I(this.poolSize,"poolSize"),I(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,U(this.dataFormat),V(this.padding),this.inputSpec=[new ue({ndim:4})]}computeOutputShape(t){t=ie(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=cn(e,this.poolSize[0],this.padding,this.strides[0]),s=cn(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return(0,i.tidy)((()=>(this.invokeCallHook(t,e),this.poolingFunction(se(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Lr extends Tr{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),vr(t,e,s,i,n,"max")}}Lr.className="MaxPooling2D",i.serialization.registerClass(Lr);class Er extends Tr{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),vr(t,e,s,i,n,"avg")}}Er.className="AveragePooling2D",i.serialization.registerClass(Er);class $r extends fe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new a(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];I(this.poolSize,"poolSize"),I(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,U(this.dataFormat),V(this.padding),this.inputSpec=[new ue({ndim:5})]}computeOutputShape(t){t=ie(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],i="channelsFirst"===this.dataFormat?t[4]:t[3];return e=cn(e,this.poolSize[0],this.padding,this.strides[0]),s=cn(s,this.poolSize[1],this.padding,this.strides[1]),i=cn(i,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,i]:[t[0],e,s,i,t[4]]}call(t,e){return(0,i.tidy)((()=>(this.invokeCallHook(t,e),this.poolingFunction(se(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Dr extends $r{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),Ar(t,e,s,i,n,"max")}}Dr.className="MaxPooling3D",i.serialization.registerClass(Dr);class Fr extends $r{constructor(t){super(t)}poolingFunction(t,e,s,i,n){return U(n),V(i),Ar(t,e,s,i,n,"avg")}}Fr.className="AveragePooling3D",i.serialization.registerClass(Fr);class Rr extends fe{constructor(t){super(t),this.inputSpec=[new ue({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new o}}class Or extends Rr{constructor(t){super(t||{})}call(t,e){return(0,i.tidy)((()=>{const e=se(t);return i.mean(e,1)}))}}Or.className="GlobalAveragePooling1D",i.serialization.registerClass(Or);class _r extends Rr{constructor(t){super(t||{})}call(t,e){return(0,i.tidy)((()=>{const e=se(t);return i.max(e,1)}))}}_r.className="GlobalMaxPooling1D",i.serialization.registerClass(_r);class Mr extends fe{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,U(this.dataFormat),this.inputSpec=[new ue({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new o}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Br extends Mr{call(t,e){return(0,i.tidy)((()=>{const e=se(t);return"channelsLast"===this.dataFormat?i.mean(e,[1,2]):i.mean(e,[2,3])}))}}Br.className="GlobalAveragePooling2D",i.serialization.registerClass(Br);class Wr extends Mr{call(t,e){return(0,i.tidy)((()=>{const e=se(t);return"channelsLast"===this.dataFormat?i.max(e,[1,2]):i.max(e,[2,3])}))}}Wr.className="GlobalMaxPooling2D",i.serialization.registerClass(Wr);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ur extends fe{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const i=e["layer"],n=ts(i,s);delete e["layer"];const r={layer:n};return Object.assign(r,e),new t(r)}}class jr extends Ur{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=ie(t),t.length<3)throw new a(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=ie(t);const e=[t[0]].concat(t.slice(2)),s=this.layer.computeOutputShape(e),i=t[1];return[s[0],i].concat(s.slice(1))}call(t,e){return(0,i.tidy)((()=>{t=se(t);const s=(t,s)=>{const i=se(this.layer.call(t,e));return[i,[]]},i=$n(s,t,[],!1,null,null,!1,!0),n=i[1];return n}))}}function Vr(t){A(B,"BidirectionalMergeMode",t)}jr.className="TimeDistributed",i.serialization.registerClass(jr);const Pr="concat";class qr extends Ur{constructor(t){super(t);const e=t.layer.getConfig(),s={};s["className"]=t.layer.getClassName(),s["config"]=e,this.forwardLayer=ts(s),e["goBackwards"]=!0!==e["goBackwards"];const i={};if(i["className"]=t.layer.getClassName(),i["config"]=e,this.backwardLayer=ts(i),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?Pr:t.mergeMode,Vr(this.mergeMode),t.weights)throw new o("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,s=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,s)),this.backwardLayer.setWeights(t.slice(s))}computeOutputShape(t){let e,s,i,n=this.forwardLayer.computeOutputShape(t);return Array.isArray(n)&&Array.isArray(n[0])||(n=[n]),this.returnState?(i=n.slice(1),e=n[0]):e=n[0],"concat"===this.mergeMode?(e[e.length-1]*=2,s=[e]):s=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?s.concat(i).concat(i.slice()):[e].concat(i).concat(i.slice()):d(s)}apply(t,e){let s=null==e?null:e["initialState"],i=null==e?null:e["constants"];null==e&&(e={});const n=En(t,s,i,this.numConstants);if(t=n.inputs,s=n.initialState,i=n.constants,Array.isArray(t)&&(s=t.slice(1),t=t[0]),(null==s||0===s.length)&&null==i)return super.apply(t,e);const r=[],l=[];if(null!=s){const t=s.length;if(t%2>0)throw new a("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e["initialState"]=s,r.push(...s);const i=s.map((t=>new ue({shape:t.shape})));this.forwardLayer.stateSpec=i.slice(0,t/2),this.backwardLayer.stateSpec=i.slice(t/2),l.push(...i)}if(null!=i)throw new o("Support for constants in Bidirectional layers is not implemented yet.");const h=r[0]instanceof ce;for(const o of r)if(o instanceof ce!==h)throw new a("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(h){const s=[t].concat(r),i=this.inputSpec.concat(l),n=this.inputSpec;this.inputSpec=i;const a=super.apply(s,e);return this.inputSpec=n,a}return super.apply(t,e)}call(t,e){return(0,i.tidy)((()=>{const s=e["initialState"];let n,r,a,o;if(null==s)n=this.forwardLayer.call(t,e),r=this.backwardLayer.call(t,e);else{const i=s.slice(0,s.length/2),a=s.slice(s.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:i})),r=this.backwardLayer.call(t,Object.assign(e,{initialState:a}))}return this.returnState&&(Array.isArray(n)&&(a=n.slice(1).concat(r.slice(1))),n=n[0],r=r[0]),this.returnSequences&&(r=i.reverse(r,1)),"concat"===this.mergeMode?o=ft([n,r]):"sum"===this.mergeMode?o=i.add(n,r):"ave"===this.mergeMode?o=i.mul(.5,i.add(n,r)):"mul"===this.mergeMode?o=i.mul(n,r):null==this.mergeMode&&(o=[n,r]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){H(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),H(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let s;if(Array.isArray(e)&&(e=e[0]),s=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states,e=t.map((t=>null));return Array.isArray(s)?s.concat(e).concat(e):[s].concat(e).concat(e)}return s}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const s=ts(e["layer"]);if(delete e["layer"],null!=e["numConstants"])throw new o("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const i=e;return i["layer"]=s,new t(i)}}qr.className="Bidirectional",i.serialization.registerClass(qr);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var Jr=s(92800),Hr=s(1986),Zr=s(46425),Kr=s(22780);
/** @license See the LICENSE file. */
const Gr="3.18.0";i.version_core,Zr.Um,Kr.$p,Hr.iS,Jr.uW}}]);
//# sourceMappingURL=chunk-vendors-4aa4cbae.a496e865.js.map